const {assert} = require("local-chai");
const {BigNumber} = require("@ethersproject/bignumber");
async function expectRevert(promise, expectedMessage) {
  if (typeof promise === 'undefined') {
    promise = expectedMessage;
    expectedMessage = null;
  }
  let receipt;
  try {
    receipt = await promise;
  } catch (error) {
    const isExpectedMessagePresent = !expectedMessage || error.message.search(expectedMessage) >= 0;
    if (!isExpectedMessagePresent) {
      throw new Error(`Revert message : "${expectedMessage}" not present, instead got : "${error.message}"`);
    }
    return true;
  }

  if (receipt.status === '0x0') {
    if (expectedMessage) {
      throw new Error(`Revert message not parsed : "${expectedMessage}"`);
    }
    return true;
  }
// throw new Error(`Revert expected`);
}

function recurseTests(test) {
  if (test.subTests) {
    // eslint-disable-next-line mocha/no-setup-in-describe
    describe(test.title, function () {
      // eslint-disable-next-line mocha/no-setup-in-describe
      for (const subTest of test.subTests) {
        // eslint-disable-next-line mocha/no-setup-in-describe
        recurse(subTest);
      }
    });
  } else {
    it(test.title, test.test);
  }
}

async function findEvents(contract, event, blockHash) {
  const filter = contract.filters[event]();
  const events = await contract.queryFilter(filter, blockHash)
  return events;
}

async function checERC20Balances(account, balances, func) {
  const intialBalances = [];
  for(const name of Object.keys(balances)) {
    intialBalances[name] = await balances[name][0].balanceOf(account);
  }
  const receipt = await func();
  for(const name of Object.keys(balances)) {
    const newBalance = await balances[name][0].balanceOf(account);
    const diff = balances[name][1];
    if (diff._isBigNumber) {
      diff = diff.toString();
    }
    assert.equal(newBalance.toString(), intialBalances[name].add(diff).toString(), `balance of ${name} not expected`)
  }
  return receipt;
}

function toWei(number) {
  return BigNumber.from(number).mul("1000000000000000000");
}

module.exports = {
  zeroAddress: '0x0000000000000000000000000000000000000000',
  emptyBytes: '0x',
  expectRevert,
  waitFor: (p) => p.then((tx) => tx.wait()),
  recurseTests,
  findEvents,
  checERC20Balances,
  toWei,
};
