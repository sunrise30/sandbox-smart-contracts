const chai = require('chai');

// const chaiAsPromised = require('chai-as-promised');
// chai.use(chaiAsPromised);

// const {waffleChai} = require('@ethereum-waffle/chai');
// chai.use(waffleChai);

const {BigNumber} = require('@ethersproject/bignumber');
const { assert } = require('chai');

function override(method, name, utils) {
  return (_super) => {
    return overwriteBigNumberFunction(method, name, _super, utils);
  }
}
function overwriteBigNumberFunction(functionName, readableName, _super, chaiUtils) {
  return function (...args) {
    const [actual] = args;
    const expected = chaiUtils.flag(this, 'object');
    if ((expected && expected._isBigNumber) || (actual && actual._isBigNumber)) {
      const expectedBN = BigNumber.from(expected);
      const actualBN = BigNumber.from(actual);
      this.assert(
        expectedBN[functionName](actual),
        `Expected "${expectedBN.toString()}" to be ${readableName} "${actualBN.toString()}"`,
        `Expected "${expectedBN.toString()}" NOT to be ${readableName} "${actualBN.toString()}"`,
        expected, actual
      );
    } else {
      _super.apply(this, args);
    }
  };
}

chai.use(function(chai, utils) {
  Assertion = chai.Assertion;
  Assertion.overwriteMethod('equal', override('eq', 'equal', utils));
  Assertion.overwriteMethod('eq', override('eq', 'equal', utils));
  Assertion.overwriteMethod('above', override('gt', 'above', utils));
  Assertion.overwriteMethod('gt', override('gt', 'greater than', utils));
  Assertion.overwriteMethod('below', override('lt', 'below', utils));
  Assertion.overwriteMethod('lt', override('lt', 'less than', utils));
  Assertion.overwriteMethod('least', override('gte', 'at least', utils));
  Assertion.overwriteMethod('gte', override('gte', 'greater than or equal', utils));
  Assertion.overwriteMethod('most', override('lte', 'at most', utils));
  Assertion.overwriteMethod('lte', override('lte', 'less than or equal', utils));
});

module.exports = chai;
