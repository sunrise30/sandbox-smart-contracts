{
  "contractInfo": {
    "abi": [
      {
        "constant": true,
        "inputs": [],
        "name": "getExpiryTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "merkleRoot",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setDAIEnabled",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isDAIEnabled",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isETHEnabled",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "sandAmount",
            "type": "uint256"
          }
        ],
        "name": "getEtherAmountWithSAND",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "buyer",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "reserved",
            "type": "address"
          },
          {
            "name": "x",
            "type": "uint256"
          },
          {
            "name": "y",
            "type": "uint256"
          },
          {
            "name": "size",
            "type": "uint256"
          },
          {
            "name": "priceInSand",
            "type": "uint256"
          },
          {
            "name": "salt",
            "type": "bytes32"
          },
          {
            "name": "proof",
            "type": "bytes32[]"
          }
        ],
        "name": "buyLandWithDAI",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getAdmin",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setSANDEnabled",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "metaTransactionProcessor",
            "type": "address"
          },
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setMetaTransactionProcessor",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "changeAdmin",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "isSANDEnabled",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "newWallet",
            "type": "address"
          }
        ],
        "name": "setReceivingWallet",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "who",
            "type": "address"
          }
        ],
        "name": "isMetaTransactionProcessor",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "buyer",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "reserved",
            "type": "address"
          },
          {
            "name": "x",
            "type": "uint256"
          },
          {
            "name": "y",
            "type": "uint256"
          },
          {
            "name": "size",
            "type": "uint256"
          },
          {
            "name": "priceInSand",
            "type": "uint256"
          },
          {
            "name": "salt",
            "type": "bytes32"
          },
          {
            "name": "proof",
            "type": "bytes32[]"
          }
        ],
        "name": "buyLandWithSand",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setETHEnabled",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "buyer",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "reserved",
            "type": "address"
          },
          {
            "name": "x",
            "type": "uint256"
          },
          {
            "name": "y",
            "type": "uint256"
          },
          {
            "name": "size",
            "type": "uint256"
          },
          {
            "name": "priceInSand",
            "type": "uint256"
          },
          {
            "name": "salt",
            "type": "bytes32"
          },
          {
            "name": "proof",
            "type": "bytes32[]"
          }
        ],
        "name": "buyLandWithETH",
        "outputs": [],
        "payable": true,
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "name": "landAddress",
            "type": "address"
          },
          {
            "name": "sandContractAddress",
            "type": "address"
          },
          {
            "name": "initialMetaTx",
            "type": "address"
          },
          {
            "name": "admin",
            "type": "address"
          },
          {
            "name": "initialWalletAddress",
            "type": "address"
          },
          {
            "name": "merkleRoot",
            "type": "bytes32"
          },
          {
            "name": "expiryTime",
            "type": "uint256"
          },
          {
            "name": "medianizerContractAddress",
            "type": "address"
          },
          {
            "name": "daiTokenContractAddress",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "buyer",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "topCornerId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "size",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "price",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "amountPaid",
            "type": "uint256"
          }
        ],
        "name": "LandQuadPurchased",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "metaTransactionProcessor",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "MetaTransactionProcessor",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "oldAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      }
    ],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "60806040526009805462ff00001961ffff199091166101001716905534801561002757600080fd5b506040516116dc3803806116dc833981810160405261012081101561004b57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e088015161010090980151600280546001600160a01b03808b166001600160a01b03199283161790925560038054928a16929091169190911790559697959694959394929391929091906100cb8760016001600160e01b0361012d16565b600080546001600160a01b039788166001600160a01b0319918216179091556006805496881696821696909617909555600893909355600791909155600480549185169184169190911790556005805491909316911617905550610191915050565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b61153c806101a06000396000f3fe60806040526004361061010e5760003560e01c80637c53ec4c116100a5578063b522ecff11610074578063e0a86c0411610059578063e0a86c04146103eb578063e97eb0a2146104ab578063fb903fe4146104d75761010e565b8063b522ecff14610385578063dc5074af146103b85761010e565b80637c53ec4c146102d65780638a04af6a146103025780638f2839701461033d578063a7e30684146103705761010e565b80634a253778116100e15780634a253778146101a65780635d8e3021146101bb5780636e006a69146101e55780636e9960c3146102a55761010e565b806325cb5bc0146101135780632eb4a7ab1461013a5780633b7c4c151461014f578063427b8d341461017d575b600080fd5b34801561011f57600080fd5b5061012861058a565b60408051918252519081900360200190f35b34801561014657600080fd5b50610128610590565b34801561015b57600080fd5b5061017b6004803603602081101561017257600080fd5b50351515610596565b005b34801561018957600080fd5b50610192610617565b604080519115158252519081900360200190f35b3480156101b257600080fd5b50610192610626565b3480156101c757600080fd5b50610128600480360360208110156101de57600080fd5b5035610634565b3480156101f157600080fd5b5061017b600480360361012081101561020957600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359160a08201359160c08101359160e08201359190810190610120810161010082013564010000000081111561026657600080fd5b82018360208201111561027857600080fd5b8035906020019184602083028401116401000000008311171561029a57600080fd5b50909250905061066f565b3480156102b157600080fd5b506102ba61085d565b604080516001600160a01b039092168252519081900360200190f35b3480156102e257600080fd5b5061017b600480360360208110156102f957600080fd5b5035151561086c565b34801561030e57600080fd5b5061017b6004803603604081101561032557600080fd5b506001600160a01b03813516906020013515156108c8565b34801561034957600080fd5b5061017b6004803603602081101561036057600080fd5b50356001600160a01b031661091f565b34801561037c57600080fd5b50610192610a00565b34801561039157600080fd5b5061017b600480360360208110156103a857600080fd5b50356001600160a01b0316610a09565b3480156103c457600080fd5b50610192600480360360208110156103db57600080fd5b50356001600160a01b0316610ad1565b3480156103f757600080fd5b5061017b600480360361012081101561040f57600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359160a08201359160c08101359160e08201359190810190610120810161010082013564010000000081111561046c57600080fd5b82018360208201111561047e57600080fd5b803590602001918460208302840111640100000000831117156104a057600080fd5b509092509050610aef565b3480156104b757600080fd5b5061017b600480360360208110156104ce57600080fd5b50351515610cb1565b61017b60048036036101208110156104ee57600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359160a08201359160c08101359160e08201359190810190610120810161010082013564010000000081111561054b57600080fd5b82018360208201111561055d57600080fd5b8035906020019184602083028401116401000000008311171561057f57600080fd5b509092509050610d31565b60075490565b60085490565b6000546001600160a01b031633146105df5760405162461bcd60e51b81526004018080602001828103825260218152602001806114e76021913960400191505060405180910390fd5b6009805491151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff909216919091179055565b60095462010000900460ff1690565b600954610100900460ff1690565b60008061063f610ec5565b90506106688161065c85663328b944c4000063ffffffff610f5416565b9063ffffffff610fca16565b9392505050565b60095462010000900460ff166106cc576040805162461bcd60e51b815260206004820152601860248201527f646169207061796d656e7473206e6f7420656e61626c65640000000000000000604482015290519081900360640190fd5b61070f8a898989898989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fdd92505050565b6000610734670de0b6b3a764000061065c87663328b944c4000063ffffffff610f5416565b600554600654604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0392831660248201526044810185905290519394509116916323b872dd916064808201926020929091908290030181600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506040513d60208110156107d857600080fd5b505161082b576040805162461bcd60e51b815260206004820152601660248201527f6661696c656420746f207472616e736665722064616900000000000000000000604482015290519081900360640190fd5b6108508b8b8a8a8a8a600560009054906101000a90046001600160a01b03168861119a565b5050505050505050505050565b6000546001600160a01b031690565b6000546001600160a01b031633146108b55760405162461bcd60e51b81526004018080602001828103825260228152602001806114976022913960400191505060405180910390fd5b6009805460ff1916911515919091179055565b6000546001600160a01b031633146109115760405162461bcd60e51b815260040180806020018281038252602e8152602001806114b9602e913960400191505060405180910390fd5b61091b82826112a4565b5050565b6000546001600160a01b0316331461097e576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60095460ff1690565b6001600160a01b038116610a4e5760405162461bcd60e51b81526004018080602001828103825260278152602001806114466027913960400191505060405180910390fd5b6000546001600160a01b03163314610a975760405162461bcd60e51b815260040180806020018281038252602a81526020018061146d602a913960400191505060405180910390fd5b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b031660009081526001602052604090205460ff1690565b60095460ff16610b46576040805162461bcd60e51b815260206004820152601960248201527f73616e64207061796d656e7473206e6f7420656e61626c656400000000000000604482015290519081900360640190fd5b610b898a898989898989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fdd92505050565b600354600654604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152928316602482015260448101889052905191909216916323b872dd9160648083019260209291908290030181600087803b158015610c0357600080fd5b505af1158015610c17573d6000803e3d6000fd5b505050506040513d6020811015610c2d57600080fd5b5051610c80576040805162461bcd60e51b815260206004820152601a60248201527f73616e6420746f6b656e207472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b610ca58a8a89898989600360009054906101000a90046001600160a01b03168b61119a565b50505050505050505050565b6000546001600160a01b03163314610cfa5760405162461bcd60e51b81526004018080602001828103825260218152602001806114256021913960400191505060405180910390fd5b60098054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b600954610100900460ff16610d8d576040805162461bcd60e51b815260206004820152601a60248201527f6574686572207061796d656e7473206e6f7420656e61626c6564000000000000604482015290519081900360640190fd5b610dd08a898989898989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fdd92505050565b6000610ddb85610634565b905080341015610e32576040805162461bcd60e51b815260206004820152601560248201527f6e6f7420656e6f7567682065746865722073656e740000000000000000000000604482015290519081900360640190fd5b348190038015610e6b57604051339082156108fc029083906000818181858888f19350505050158015610e69573d6000803e3d6000fd5b505b6006546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015610ea5573d6000803e3d6000fd5b50610eb78c8c8b8b8b8b60008961119a565b505050505050505050505050565b60048054604080517f57de26a4000000000000000000000000000000000000000000000000000000008152905160009384936001600160a01b0316926357de26a49281830192602092829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b505191505090565b600082610f6357506000610fc4565b5081810281838281610f7157fe5b0414610fc4576040805162461bcd60e51b815260206004820152600860248201527f6f766572666c6f77000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b92915050565b6000818381610fd557fe5b049392505050565b6007544210611033576040805162461bcd60e51b815260206004820152600c60248201527f73616c65206973206f7665720000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03881633148061105957503360009081526001602052604090205460ff165b6110aa576040805162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03871615806110d15750876001600160a01b0316876001600160a01b0316145b611122576040805162461bcd60e51b815260206004820152601860248201527f63616e6e6f7420627579207265736572766564204c616e640000000000000000604482015290519081900360640190fd5b6000611132878787878c88611308565b905061113e8282611379565b61118f576040805162461bcd60e51b815260206004820152601560248201527f496e76616c6964206c616e642070726f76696465640000000000000000000000604482015290519081900360640190fd5b505050505050505050565b600254604080517f6e1e3bbf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015260248201889052604482018a90526064820189905260a06084830152600060a483018190529251931692636e1e3bbf9260e48084019391929182900301818387803b15801561122257600080fd5b505af1158015611236573d6000803e3d6000fd5b505060408051878152602081018790526001600160a01b03868116828401526060820186905291516101988a028b019450828c169350918c16917fe4dfa6ac11314892f3029b34a25b1a887da3b1cab2bbf8506d87128ba6e3ac029181900360800190a45050505050505050565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b60408051602080820198909852808201969096526060808701959095526080860193909352921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a084015260b4808401929092528051808403909201825260d4909201909152805191012090565b600081815b845181101561141857600085828151811061139557fe5b60200260200101519050808310156113dd578281604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925061140f565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b5060010161137e565b5060085414939250505056fe6f6e6c792061646d696e2063616e20656e61626c652f64697361626c6520455448726563656976696e672077616c6c65742063616e6e6f74206265207a65726f20616464726573736f6e6c792061646d696e2063616e206368616e67652074686520726563656976696e672077616c6c65746f6e6c792061646d696e2063616e20656e61626c652f64697361626c652053414e446f6e6c792061646d696e2063616e207365747570206d6574615472616e73616374696f6e50726f636573736f72736f6e6c792061646d696e2063616e20656e61626c652f64697361626c6520444149a265627a7a72305820bbe65163ba00785ef7742684ec093843bf72906af725a411863ce6d785735d7d64736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x9 DUP1 SLOAD PUSH3 0xFF0000 NOT PUSH2 0xFFFF NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16DC CODESIZE SUB DUP1 PUSH2 0x16DC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 DUP9 ADD MLOAD PUSH2 0x100 SWAP1 SWAP9 ADD MLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP3 DUP11 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP7 SWAP8 SWAP6 SWAP7 SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xCB DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH2 0x12D AND JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP7 DUP9 AND SWAP7 DUP3 AND SWAP7 SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE PUSH1 0x8 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x7 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x5 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE POP PUSH2 0x191 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xB21EB88B4E33B3F1281830A7178D74D8AA73220416215726B68AE23D539515CB SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x153C DUP1 PUSH2 0x1A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C53EC4C GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xB522ECFF GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xE0A86C04 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE0A86C04 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0xE97EB0A2 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0xFB903FE4 EQ PUSH2 0x4D7 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0xB522ECFF EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0xDC5074AF EQ PUSH2 0x3B8 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0x7C53EC4C EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x8A04AF6A EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xA7E30684 EQ PUSH2 0x370 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0x4A253778 GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4A253778 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x5D8E3021 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x6E006A69 EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x6E9960C3 EQ PUSH2 0x2A5 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0x25CB5BC0 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x3B7C4C15 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x427B8D34 EQ PUSH2 0x17D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x58A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x590 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x596 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0x626 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x634 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x66F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BA PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x86C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x8C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x91F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0xA00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAD1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xAEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x55D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14E7 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 0x10000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x63F PUSH2 0xEC5 JUMP JUMPDEST SWAP1 POP PUSH2 0x668 DUP2 PUSH2 0x65C DUP6 PUSH7 0x3328B944C40000 PUSH4 0xFFFFFFFF PUSH2 0xF54 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xFCA AND JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6CC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x646169207061796D656E7473206E6F7420656E61626C65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x70F DUP11 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xFDD SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x734 PUSH8 0xDE0B6B3A7640000 PUSH2 0x65C DUP8 PUSH7 0x3328B944C40000 PUSH4 0xFFFFFFFF PUSH2 0xF54 AND JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP5 POP SWAP2 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x82B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6661696C656420746F207472616E736665722064616900000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x850 DUP12 DUP12 DUP11 DUP11 DUP11 DUP11 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH2 0x119A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1497 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x911 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14B9 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x91B DUP3 DUP3 PUSH2 0x12A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x97E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206368616E67652061646D696E0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1446 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x146D PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xFF AND PUSH2 0xB46 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616E64207061796D656E7473206E6F7420656E61626C656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xB89 DUP11 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xFDD SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xC80 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616E6420746F6B656E207472616E73666572206661696C6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xCA5 DUP11 DUP11 DUP10 DUP10 DUP10 DUP10 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH2 0x119A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1425 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xD8D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6574686572207061796D656E7473206E6F7420656E61626C6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xDD0 DUP11 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xFDD SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDB DUP6 PUSH2 0x634 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F7567682065746865722073656E740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLVALUE DUP2 SWAP1 SUB DUP1 ISZERO PUSH2 0xE6B JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xE69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xEA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xEB7 DUP13 DUP13 DUP12 DUP12 DUP12 DUP12 PUSH1 0x0 DUP10 PUSH2 0x119A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x57DE26A400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x57DE26A4 SWAP3 DUP2 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF63 JUMPI POP PUSH1 0x0 PUSH2 0xFC4 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xF71 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xFC4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F766572666C6F77000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 DUP2 PUSH2 0xFD5 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD TIMESTAMP LT PUSH2 0x1033 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616C65206973206F7665720000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND CALLER EQ DUP1 PUSH2 0x1059 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x10AA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420617574686F72697A6564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO DUP1 PUSH2 0x10D1 JUMPI POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1122 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420627579207265736572766564204C616E640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP8 DUP8 DUP8 DUP8 DUP13 DUP9 PUSH2 0x1308 JUMP JUMPDEST SWAP1 POP PUSH2 0x113E DUP3 DUP3 PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x118F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206C616E642070726F76696465640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x6E1E3BBF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD SWAP4 AND SWAP3 PUSH4 0x6E1E3BBF SWAP3 PUSH1 0xE4 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1236 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 MLOAD PUSH2 0x198 DUP11 MUL DUP12 ADD SWAP5 POP DUP3 DUP13 AND SWAP4 POP SWAP2 DUP13 AND SWAP2 PUSH32 0xE4DFA6AC11314892F3029B34A25B1A887DA3B1CAB2BBF8506D87128BA6E3AC02 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xB21EB88B4E33B3F1281830A7178D74D8AA73220416215726B68AE23D539515CB SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x60 DUP1 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xB4 DUP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP5 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0xD4 SWAP1 SWAP3 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1418 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1395 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 LT ISZERO PUSH2 0x13DD JUMPI DUP3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x140F JUMP JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x137E JUMP JUMPDEST POP PUSH1 0x8 SLOAD EQ SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH16 0x6E6C792061646D696E2063616E20656E PUSH2 0x626C PUSH6 0x2F6469736162 PUSH13 0x6520455448726563656976696E PUSH8 0x2077616C6C657420 PUSH4 0x616E6E6F PUSH21 0x206265207A65726F20616464726573736F6E6C7920 PUSH2 0x646D PUSH10 0x6E2063616E206368616E PUSH8 0x6520746865207265 PUSH4 0x65697669 PUSH15 0x672077616C6C65746F6E6C79206164 PUSH14 0x696E2063616E20656E61626C652F PUSH5 0x697361626C PUSH6 0x2053414E446F PUSH15 0x6C792061646D696E2063616E207365 PUSH21 0x7570206D6574615472616E73616374696F6E50726F PUSH4 0x6573736F PUSH19 0x736F6E6C792061646D696E2063616E20656E61 PUSH3 0x6C652F PUSH5 0x697361626C PUSH6 0x20444149A265 PUSH3 0x7A7A72 ADDRESS PC KECCAK256 0xbb 0xe6 MLOAD PUSH4 0xBA00785E 0xf7 PUSH21 0x2684EC093843BF72906AF725A411863CE6D785735D PUSH30 0x64736F6C6343000509003200000000000000000000000000000000000000 ",
        "sourceMap": "455:10264:63:-;;;921:25;;;-1:-1:-1;;;;952:25:63;;;921;952;983:24;;;1242:716;5:2:-1;;;;30:1;27;20:12;5:2;1242:716:63;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;1242:716:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1583:5;:25;;-1:-1:-1;;;;;1583:25:63;;;-1:-1:-1;;;;;;1583:25:63;;;;;;;1618:5;:34;;;;;;;;;;;;;;;1242:716;;;;;;;;;;;;;;;1662:49;1242:716;1583:25;-1:-1:-1;;;;;1662:28:63;:49;:::i;:::-;1721:6;:14;;-1:-1:-1;;;;;1721:14:63;;;-1:-1:-1;;;;;;1721:14:63;;;;;;;1745:7;:30;;;;;;;;;;;;;;;1785:11;:24;;;;1819:11;:24;;;;1853:11;:51;;;;;;;;;;;;;;1914:4;:37;;;;;;;;;;;-1:-1:-1;455:10264:63;;-1:-1:-1;;455:10264:63;873:247:2;-1:-1:-1;;;;;978:51:2;;;;;;:25;:51;;;;;;;;;:61;;-1:-1:-1;;978:61:2;;;;;;;;;;1054:59;;;;;;;;;;;;;;;;;;;;;873:247;;:::o;455:10264:63:-;;;;;;;"
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "60806040526004361061010e5760003560e01c80637c53ec4c116100a5578063b522ecff11610074578063e0a86c0411610059578063e0a86c04146103eb578063e97eb0a2146104ab578063fb903fe4146104d75761010e565b8063b522ecff14610385578063dc5074af146103b85761010e565b80637c53ec4c146102d65780638a04af6a146103025780638f2839701461033d578063a7e30684146103705761010e565b80634a253778116100e15780634a253778146101a65780635d8e3021146101bb5780636e006a69146101e55780636e9960c3146102a55761010e565b806325cb5bc0146101135780632eb4a7ab1461013a5780633b7c4c151461014f578063427b8d341461017d575b600080fd5b34801561011f57600080fd5b5061012861058a565b60408051918252519081900360200190f35b34801561014657600080fd5b50610128610590565b34801561015b57600080fd5b5061017b6004803603602081101561017257600080fd5b50351515610596565b005b34801561018957600080fd5b50610192610617565b604080519115158252519081900360200190f35b3480156101b257600080fd5b50610192610626565b3480156101c757600080fd5b50610128600480360360208110156101de57600080fd5b5035610634565b3480156101f157600080fd5b5061017b600480360361012081101561020957600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359160a08201359160c08101359160e08201359190810190610120810161010082013564010000000081111561026657600080fd5b82018360208201111561027857600080fd5b8035906020019184602083028401116401000000008311171561029a57600080fd5b50909250905061066f565b3480156102b157600080fd5b506102ba61085d565b604080516001600160a01b039092168252519081900360200190f35b3480156102e257600080fd5b5061017b600480360360208110156102f957600080fd5b5035151561086c565b34801561030e57600080fd5b5061017b6004803603604081101561032557600080fd5b506001600160a01b03813516906020013515156108c8565b34801561034957600080fd5b5061017b6004803603602081101561036057600080fd5b50356001600160a01b031661091f565b34801561037c57600080fd5b50610192610a00565b34801561039157600080fd5b5061017b600480360360208110156103a857600080fd5b50356001600160a01b0316610a09565b3480156103c457600080fd5b50610192600480360360208110156103db57600080fd5b50356001600160a01b0316610ad1565b3480156103f757600080fd5b5061017b600480360361012081101561040f57600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359160a08201359160c08101359160e08201359190810190610120810161010082013564010000000081111561046c57600080fd5b82018360208201111561047e57600080fd5b803590602001918460208302840111640100000000831117156104a057600080fd5b509092509050610aef565b3480156104b757600080fd5b5061017b600480360360208110156104ce57600080fd5b50351515610cb1565b61017b60048036036101208110156104ee57600080fd5b6001600160a01b038235811692602081013582169260408201359092169160608201359160808101359160a08201359160c08101359160e08201359190810190610120810161010082013564010000000081111561054b57600080fd5b82018360208201111561055d57600080fd5b8035906020019184602083028401116401000000008311171561057f57600080fd5b509092509050610d31565b60075490565b60085490565b6000546001600160a01b031633146105df5760405162461bcd60e51b81526004018080602001828103825260218152602001806114e76021913960400191505060405180910390fd5b6009805491151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff909216919091179055565b60095462010000900460ff1690565b600954610100900460ff1690565b60008061063f610ec5565b90506106688161065c85663328b944c4000063ffffffff610f5416565b9063ffffffff610fca16565b9392505050565b60095462010000900460ff166106cc576040805162461bcd60e51b815260206004820152601860248201527f646169207061796d656e7473206e6f7420656e61626c65640000000000000000604482015290519081900360640190fd5b61070f8a898989898989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fdd92505050565b6000610734670de0b6b3a764000061065c87663328b944c4000063ffffffff610f5416565b600554600654604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0392831660248201526044810185905290519394509116916323b872dd916064808201926020929091908290030181600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506040513d60208110156107d857600080fd5b505161082b576040805162461bcd60e51b815260206004820152601660248201527f6661696c656420746f207472616e736665722064616900000000000000000000604482015290519081900360640190fd5b6108508b8b8a8a8a8a600560009054906101000a90046001600160a01b03168861119a565b5050505050505050505050565b6000546001600160a01b031690565b6000546001600160a01b031633146108b55760405162461bcd60e51b81526004018080602001828103825260228152602001806114976022913960400191505060405180910390fd5b6009805460ff1916911515919091179055565b6000546001600160a01b031633146109115760405162461bcd60e51b815260040180806020018281038252602e8152602001806114b9602e913960400191505060405180910390fd5b61091b82826112a4565b5050565b6000546001600160a01b0316331461097e576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60095460ff1690565b6001600160a01b038116610a4e5760405162461bcd60e51b81526004018080602001828103825260278152602001806114466027913960400191505060405180910390fd5b6000546001600160a01b03163314610a975760405162461bcd60e51b815260040180806020018281038252602a81526020018061146d602a913960400191505060405180910390fd5b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b031660009081526001602052604090205460ff1690565b60095460ff16610b46576040805162461bcd60e51b815260206004820152601960248201527f73616e64207061796d656e7473206e6f7420656e61626c656400000000000000604482015290519081900360640190fd5b610b898a898989898989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fdd92505050565b600354600654604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152928316602482015260448101889052905191909216916323b872dd9160648083019260209291908290030181600087803b158015610c0357600080fd5b505af1158015610c17573d6000803e3d6000fd5b505050506040513d6020811015610c2d57600080fd5b5051610c80576040805162461bcd60e51b815260206004820152601a60248201527f73616e6420746f6b656e207472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b610ca58a8a89898989600360009054906101000a90046001600160a01b03168b61119a565b50505050505050505050565b6000546001600160a01b03163314610cfa5760405162461bcd60e51b81526004018080602001828103825260218152602001806114256021913960400191505060405180910390fd5b60098054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b600954610100900460ff16610d8d576040805162461bcd60e51b815260206004820152601a60248201527f6574686572207061796d656e7473206e6f7420656e61626c6564000000000000604482015290519081900360640190fd5b610dd08a898989898989898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610fdd92505050565b6000610ddb85610634565b905080341015610e32576040805162461bcd60e51b815260206004820152601560248201527f6e6f7420656e6f7567682065746865722073656e740000000000000000000000604482015290519081900360640190fd5b348190038015610e6b57604051339082156108fc029083906000818181858888f19350505050158015610e69573d6000803e3d6000fd5b505b6006546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015610ea5573d6000803e3d6000fd5b50610eb78c8c8b8b8b8b60008961119a565b505050505050505050505050565b60048054604080517f57de26a4000000000000000000000000000000000000000000000000000000008152905160009384936001600160a01b0316926357de26a49281830192602092829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b505191505090565b600082610f6357506000610fc4565b5081810281838281610f7157fe5b0414610fc4576040805162461bcd60e51b815260206004820152600860248201527f6f766572666c6f77000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b92915050565b6000818381610fd557fe5b049392505050565b6007544210611033576040805162461bcd60e51b815260206004820152600c60248201527f73616c65206973206f7665720000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03881633148061105957503360009081526001602052604090205460ff165b6110aa576040805162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03871615806110d15750876001600160a01b0316876001600160a01b0316145b611122576040805162461bcd60e51b815260206004820152601860248201527f63616e6e6f7420627579207265736572766564204c616e640000000000000000604482015290519081900360640190fd5b6000611132878787878c88611308565b905061113e8282611379565b61118f576040805162461bcd60e51b815260206004820152601560248201527f496e76616c6964206c616e642070726f76696465640000000000000000000000604482015290519081900360640190fd5b505050505050505050565b600254604080517f6e1e3bbf0000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015260248201889052604482018a90526064820189905260a06084830152600060a483018190529251931692636e1e3bbf9260e48084019391929182900301818387803b15801561122257600080fd5b505af1158015611236573d6000803e3d6000fd5b505060408051878152602081018790526001600160a01b03868116828401526060820186905291516101988a028b019450828c169350918c16917fe4dfa6ac11314892f3029b34a25b1a887da3b1cab2bbf8506d87128ba6e3ac029181900360800190a45050505050505050565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b60408051602080820198909852808201969096526060808701959095526080860193909352921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a084015260b4808401929092528051808403909201825260d4909201909152805191012090565b600081815b845181101561141857600085828151811061139557fe5b60200260200101519050808310156113dd578281604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120925061140f565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b5060010161137e565b5060085414939250505056fe6f6e6c792061646d696e2063616e20656e61626c652f64697361626c6520455448726563656976696e672077616c6c65742063616e6e6f74206265207a65726f20616464726573736f6e6c792061646d696e2063616e206368616e67652074686520726563656976696e672077616c6c65746f6e6c792061646d696e2063616e20656e61626c652f64697361626c652053414e446f6e6c792061646d696e2063616e207365747570206d6574615472616e73616374696f6e50726f636573736f72736f6e6c792061646d696e2063616e20656e61626c652f64697361626c6520444149a265627a7a72305820bbe65163ba00785ef7742684ec093843bf72906af725a411863ce6d785735d7d64736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C53EC4C GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xB522ECFF GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xE0A86C04 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE0A86C04 EQ PUSH2 0x3EB JUMPI DUP1 PUSH4 0xE97EB0A2 EQ PUSH2 0x4AB JUMPI DUP1 PUSH4 0xFB903FE4 EQ PUSH2 0x4D7 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0xB522ECFF EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0xDC5074AF EQ PUSH2 0x3B8 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0x7C53EC4C EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x8A04AF6A EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xA7E30684 EQ PUSH2 0x370 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0x4A253778 GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x4A253778 EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x5D8E3021 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x6E006A69 EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x6E9960C3 EQ PUSH2 0x2A5 JUMPI PUSH2 0x10E JUMP JUMPDEST DUP1 PUSH4 0x25CB5BC0 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x3B7C4C15 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x427B8D34 EQ PUSH2 0x17D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x58A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x590 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x596 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0x626 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x634 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x66F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BA PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x86C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x8C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x91F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH2 0xA00 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA09 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAD1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xAEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0x60 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xC0 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x55D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xD31 JUMP JUMPDEST PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14E7 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 0x10000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x63F PUSH2 0xEC5 JUMP JUMPDEST SWAP1 POP PUSH2 0x668 DUP2 PUSH2 0x65C DUP6 PUSH7 0x3328B944C40000 PUSH4 0xFFFFFFFF PUSH2 0xF54 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xFCA AND JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6CC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x646169207061796D656E7473206E6F7420656E61626C65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x70F DUP11 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xFDD SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x734 PUSH8 0xDE0B6B3A7640000 PUSH2 0x65C DUP8 PUSH7 0x3328B944C40000 PUSH4 0xFFFFFFFF PUSH2 0xF54 AND JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP5 POP SWAP2 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x82B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6661696C656420746F207472616E736665722064616900000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x850 DUP12 DUP12 DUP11 DUP11 DUP11 DUP11 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH2 0x119A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1497 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x911 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x14B9 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x91B DUP3 DUP3 PUSH2 0x12A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x97E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206368616E67652061646D696E0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1446 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x146D PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xFF AND PUSH2 0xB46 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616E64207061796D656E7473206E6F7420656E61626C656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xB89 DUP11 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xFDD SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH1 0x64 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xC80 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616E6420746F6B656E207472616E73666572206661696C6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xCA5 DUP11 DUP11 DUP10 DUP10 DUP10 DUP10 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH2 0x119A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1425 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xD8D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6574686572207061796D656E7473206E6F7420656E61626C6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xDD0 DUP11 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xFDD SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDB DUP6 PUSH2 0x634 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F7567682065746865722073656E740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLVALUE DUP2 SWAP1 SUB DUP1 ISZERO PUSH2 0xE6B JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xE69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xEA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xEB7 DUP13 DUP13 DUP12 DUP12 DUP12 DUP12 PUSH1 0x0 DUP10 PUSH2 0x119A JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x57DE26A400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH4 0x57DE26A4 SWAP3 DUP2 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF63 JUMPI POP PUSH1 0x0 PUSH2 0xFC4 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 PUSH2 0xF71 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xFC4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F766572666C6F77000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 DUP2 PUSH2 0xFD5 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD TIMESTAMP LT PUSH2 0x1033 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616C65206973206F7665720000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND CALLER EQ DUP1 PUSH2 0x1059 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x10AA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420617574686F72697A6564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO DUP1 PUSH2 0x10D1 JUMPI POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1122 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420627579207265736572766564204C616E640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP8 DUP8 DUP8 DUP8 DUP13 DUP9 PUSH2 0x1308 JUMP JUMPDEST SWAP1 POP PUSH2 0x113E DUP3 DUP3 PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x118F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206C616E642070726F76696465640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x6E1E3BBF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0x64 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD SWAP4 AND SWAP3 PUSH4 0x6E1E3BBF SWAP3 PUSH1 0xE4 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1236 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 MLOAD PUSH2 0x198 DUP11 MUL DUP12 ADD SWAP5 POP DUP3 DUP13 AND SWAP4 POP SWAP2 DUP13 AND SWAP2 PUSH32 0xE4DFA6AC11314892F3029B34A25B1A887DA3B1CAB2BBF8506D87128BA6E3AC02 SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xB21EB88B4E33B3F1281830A7178D74D8AA73220416215726B68AE23D539515CB SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP9 SWAP1 SWAP9 MSTORE DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x60 DUP1 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x80 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xB4 DUP1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP5 SUB SWAP1 SWAP3 ADD DUP3 MSTORE PUSH1 0xD4 SWAP1 SWAP3 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1418 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1395 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 LT ISZERO PUSH2 0x13DD JUMPI DUP3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x140F JUMP JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x137E JUMP JUMPDEST POP PUSH1 0x8 SLOAD EQ SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH16 0x6E6C792061646D696E2063616E20656E PUSH2 0x626C PUSH6 0x2F6469736162 PUSH13 0x6520455448726563656976696E PUSH8 0x2077616C6C657420 PUSH4 0x616E6E6F PUSH21 0x206265207A65726F20616464726573736F6E6C7920 PUSH2 0x646D PUSH10 0x6E2063616E206368616E PUSH8 0x6520746865207265 PUSH4 0x65697669 PUSH15 0x672077616C6C65746F6E6C79206164 PUSH14 0x696E2063616E20656E61626C652F PUSH5 0x697361626C PUSH6 0x2053414E446F PUSH15 0x6C792061646D696E2063616E207365 PUSH21 0x7570206D6574615472616E73616374696F6E50726F PUSH4 0x6573736F PUSH19 0x736F6E6C792061646D696E2063616E20656E61 PUSH3 0x6C652F PUSH5 0x697361626C PUSH6 0x20444149A265 PUSH3 0x7A7A72 ADDRESS PC KECCAK256 0xbb 0xe6 MLOAD PUSH4 0xBA00785E 0xf7 PUSH21 0x2684EC093843BF72906AF725A411863CE6D785735D PUSH30 0x64736F6C6343000509003200000000000000000000000000000000000000 ",
        "sourceMap": "455:10264:63:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8793:91;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8793:91:63;;;:::i;:::-;;;;;;;;;;;;;;;;9025:88;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9025:88:63;;;:::i;2459:160::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2459:160:63;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2459:160:63;;;;:::i;:::-;;2730:88;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2730:88:63;;;:::i;:::-;;;;;;;;;;;;;;;;;;3202:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3202:90:63;;;:::i;10263:192::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10263:192:63;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10263:192:63;;:::i;8010:656::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8010:656:63;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;8010:656:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;8010:656:63;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8010:656:63;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;8010:656:63;;-1:-1:-1;8010:656:63;-1:-1:-1;8010:656:63;:::i;264:82:1:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;264:82:1;;;:::i;:::-;;;;-1:-1:-1;;;;;264:82:1;;;;;;;;;;;;;;3417:163:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3417:163:63;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3417:163:63;;;;:::i;572:295:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;572:295:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;572:295:2;;;;;;;;;;:::i;469:197:1:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;469:197:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;469:197:1;-1:-1:-1;;;;;469:197:1;;:::i;3719:90:63:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3719:90:63;;;:::i;2079:269::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2079:269:63;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2079:269:63;-1:-1:-1;;;;;2079:269:63;;:::i;1330:131:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1330:131:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1330:131:2;-1:-1:-1;;;;;1330:131:2;;:::i;5398:672:63:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5398:672:63;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;5398:672:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;5398:672:63;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5398:672:63;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;5398:672:63;;-1:-1:-1;5398:672:63;-1:-1:-1;5398:672:63;:::i;2929:162::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2929:162:63;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2929:162:63;;;;:::i;6631:818::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;6631:818:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6631:818:63;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6631:818:63;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;6631:818:63;;-1:-1:-1;6631:818:63;-1:-1:-1;6631:818:63;:::i;8793:91::-;8866:11;;8793:91;:::o;9025:88::-;9095:11;;9025:88;:::o;2459:160::-;2537:6;;-1:-1:-1;;;;;2537:6:63;2523:10;:20;2515:66;;;;-1:-1:-1;;;2515:66:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2591:11;:21;;;;;;;;;;;;;;;;;2459:160::o;2730:88::-;2800:11;;;;;;;;2730:88::o;3202:90::-;3272:13;;;;;;;;3202:90::o;10263:192::-;10336:7;10355:18;10376:15;:13;:15::i;:::-;10355:36;-1:-1:-1;10408:40:63;10355:36;10408:24;:10;678:17;10408:24;:14;:24;:::i;:::-;:28;:40;:28;:40;:::i;:::-;10401:47;10263:192;-1:-1:-1;;;10263:192:63:o;8010:656::-;8281:11;;;;;;;8273:48;;;;;-1:-1:-1;;;8273:48:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;8331:69;8346:5;8353:8;8363:1;8366;8369:4;8375:11;8388:4;8394:5;;8331:69;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;8331:14:63;;-1:-1:-1;;;8331:69:63:i;:::-;8411:19;8433:50;8463:19;8433:25;:11;678:17;8433:25;:15;:25;:::i;:50::-;8501:4;;8531:7;;8501:51;;;;;;8519:10;8501:51;;;;-1:-1:-1;;;;;8531:7:63;;;8501:51;;;;;;;;;;;;8411:72;;-1:-1:-1;8501:4:63;;;:17;;:51;;;;;;;;;;;;;;;:4;;:51;;;5:2:-1;;;;30:1;27;20:12;5:2;8501:51:63;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8501:51:63;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8501:51:63;8493:86;;;;;-1:-1:-1;;;8493:86:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;8590:69;8596:5;8603:2;8607:1;8610;8613:4;8619:11;8640:4;;;;;;;;;-1:-1:-1;;;;;8640:4:63;8647:11;8590:5;:69::i;:::-;8010:656;;;;;;;;;;;:::o;264:82:1:-;307:7;333:6;-1:-1:-1;;;;;333:6:1;264:82;:::o;3417:163:63:-;3496:6;;-1:-1:-1;;;;;3496:6:63;3482:10;:20;3474:67;;;;-1:-1:-1;;;3474:67:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3551:12;:22;;-1:-1:-1;;3551:22:63;;;;;;;;;;3417:163::o;572:295:2:-;709:6;;-1:-1:-1;;;;;709:6:2;695:10;:20;674:113;;;;-1:-1:-1;;;674:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;797:63;826:24;852:7;797:28;:63::i;:::-;572:295;;:::o;469:197:1:-;549:6;;-1:-1:-1;;;;;549:6:1;535:10;:20;527:60;;;;;-1:-1:-1;;;527:60:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;615:6;;602:30;;;-1:-1:-1;;;;;615:6:1;;;602:30;;;;;;;;;;;;;;;;;;;;;642:6;:17;;;;-1:-1:-1;;;;;642:17:1;;;;;;;;;;469:197::o;3719:90:63:-;3790:12;;;;3719:90;:::o;2079:269::-;-1:-1:-1;;;;;2160:23:63;;2152:75;;;;-1:-1:-1;;;2152:75:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2259:6;;-1:-1:-1;;;;;2259:6:63;2245:10;:20;2237:75;;;;-1:-1:-1;;;2237:75:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2322:7;:19;;;;-1:-1:-1;;;;;2322:19:63;;;;;;;;;;2079:269::o;1330:131:2:-;-1:-1:-1;;;;;1424:30:2;1401:4;1424:30;;;:25;:30;;;;;;;;;1330:131::o;5398:672:63:-;5670:12;;;;5662:50;;;;;-1:-1:-1;;;5662:50:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;5722:69;5737:5;5744:8;5754:1;5757;5760:4;5766:11;5779:4;5785:5;;5722:69;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;5722:14:63;;-1:-1:-1;;;5722:69:63:i;:::-;5822:5;;5881:7;;5822:109;;;;;;-1:-1:-1;;;;;5822:109:63;;;;;;;5881:7;;;5822:109;;;;;;;;;;;;:5;;;;;:18;;:109;;;;;;;;;;;;;;:5;;:109;;;5:2:-1;;;;30:1;27;20:12;5:2;5822:109:63;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5822:109:63;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5822:109:63;5801:182;;;;;-1:-1:-1;;;5801:182:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;5993:70;5999:5;6006:2;6010:1;6013;6016:4;6022:11;6043:5;;;;;;;;;-1:-1:-1;;;;;6043:5:63;6051:11;5993:5;:70::i;:::-;5398:672;;;;;;;;;;:::o;2929:162::-;3007:6;;-1:-1:-1;;;;;3007:6:63;2993:10;:20;2985:66;;;;-1:-1:-1;;;2985:66:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3061:13;:23;;;;;;;;;;;;;;;;;2929:162::o;6631:818::-;6910:13;;;;;;;6902:52;;;;;-1:-1:-1;;;6902:52:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;6964:69;6979:5;6986:8;6996:1;6999;7002:4;7008:11;7021:4;7027:5;;6964:69;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6964:14:63;;-1:-1:-1;;;6964:69:63:i;:::-;7044:19;7066:35;7089:11;7066:22;:35::i;:::-;7044:57;;7132:11;7119:9;:24;;7111:58;;;;;-1:-1:-1;;;7111:58:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;7198:9;:23;;;7234:12;;7231:87;;7262:29;;:10;;:29;;;;;7282:8;;7262:29;;;;7282:8;7262:10;:29;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7262:29:63;7231:87;7335:7;;7327:38;;-1:-1:-1;;;;;7335:7:63;;;;7327:38;;;;;7353:11;;7335:7;7327:38;7335:7;7327:38;7353:11;7335:7;7327:38;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7327:38:63;7376:66;7382:5;7389:2;7393:1;7396;7399:4;7405:11;7426:1;7430:11;7376:5;:66::i;:::-;6631:818;;;;;;;;;;;;:::o;10580:137::-;10662:11;;;:18;;;;;;;;10628:7;;;;-1:-1:-1;;;;;10662:11:63;;:16;;:18;;;;;;;;;;;:11;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;10662:18:63;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10662:18:63;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10662:18:63;;-1:-1:-1;;10580:137:63;:::o;211:426:38:-;269:9;511:6;507:45;;-1:-1:-1;540:1:38;533:8;;507:45;-1:-1:-1;566:5:38;;;570:1;566;:5;:1;589:5;;;;;:10;581:31;;;;;-1:-1:-1;;;581:31:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;211:426;;;;:::o;727:290::-;785:7;1009:1;1005;:5;;;;;;;727:290;-1:-1:-1;;;727:290:38:o;3815:729:63:-;4146:11;;4128:15;:29;4120:54;;;;;-1:-1:-1;;;4120:54:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4192:19:63;;4201:10;4192:19;;:60;;-1:-1:-1;4241:10:63;4215:37;;;;:25;:37;;;;;;;;4192:60;4184:87;;;;;-1:-1:-1;;;4184:87:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4289:22:63;;;;:43;;;4327:5;-1:-1:-1;;;;;4315:17:63;:8;-1:-1:-1;;;;;4315:17:63;;4289:43;4281:80;;;;;-1:-1:-1;;;4281:80:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;4371:12;4386:52;4404:1;4407;4410:4;4416:5;4423:8;4433:4;4386:17;:52::i;:::-;4371:67;;4470:20;4478:5;4485:4;4470:7;:20::i;:::-;4449:88;;;;;-1:-1:-1;;;4449:88:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;3815:729;;;;;;;;;:::o;4550:286::-;4698:5;;:34;;;;;;-1:-1:-1;;;;;4698:34:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:5;:34;;;;;;;;:5;;;:14;;:34;;;;;:5;;:34;;;;;;:5;;:34;;;5:2:-1;;;;30:1;27;20:12;5:2;4698:34:63;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;4747:82:63;;;;;;;;;;;;-1:-1:-1;;;;;4747:82:63;;;;;;;;;;;;;;;601:3;4781:13;;4776:19;;;-1:-1:-1;4747:82:63;;;;-1:-1:-1;4747:82:63;;;;;;;;;;;;;4550:286;;;;;;;;:::o;873:247:2:-;-1:-1:-1;;;;;978:51:2;;;;;;:25;:51;;;;;;;;;:61;;-1:-1:-1;;978:61:2;;;;;;;;;;1054:59;;;;;;;;;;;;;;;;;;;;;873:247;;:::o;9119:428:63:-;9369:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;9369:161:63;;;;;;;9346:194;;;;;;9119:428::o;9553:541::-;9631:4;9670;9631;9685:358;9709:5;:12;9705:1;:16;9685:358;;;9742:20;9765:5;9771:1;9765:8;;;;;;;;;;;;;;9742:31;;9807:12;9792;:27;9788:245;;;9881:12;9895;9864:44;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9864:44:63;;;9854:55;;;;;;9839:70;;9788:245;;;9990:12;10004;9973:44;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9973:44:63;;;9963:55;;;;;;9948:70;;9788:245;-1:-1:-1;9723:3:63;;9685:358;;;-1:-1:-1;10076:11:63;;10060:27;;9553:541;-1:-1:-1;;;9553:541:63:o"
      },
      "methodIdentifiers": {
        "buyLandWithDAI(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])": "6e006a69",
        "buyLandWithETH(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])": "fb903fe4",
        "buyLandWithSand(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])": "e0a86c04",
        "changeAdmin(address)": "8f283970",
        "getAdmin()": "6e9960c3",
        "getEtherAmountWithSAND(uint256)": "5d8e3021",
        "getExpiryTime()": "25cb5bc0",
        "isDAIEnabled()": "427b8d34",
        "isETHEnabled()": "4a253778",
        "isMetaTransactionProcessor(address)": "dc5074af",
        "isSANDEnabled()": "a7e30684",
        "merkleRoot()": "2eb4a7ab",
        "setDAIEnabled(bool)": "3b7c4c15",
        "setETHEnabled(bool)": "e97eb0a2",
        "setMetaTransactionProcessor(address,bool)": "8a04af6a",
        "setReceivingWallet(address)": "b522ecff",
        "setSANDEnabled(bool)": "7c53ec4c"
      }
    },
    "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDAIEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDAIEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isETHEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sandAmount\",\"type\":\"uint256\"}],\"name\":\"getEtherAmountWithSAND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"reserved\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"priceInSand\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyLandWithDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSANDEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSANDEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setReceivingWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"reserved\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"priceInSand\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyLandWithSand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setETHEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"reserved\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"priceInSand\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyLandWithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"landAddress\",\"type\":\"address\"},{\"name\":\"sandContractAddress\",\"type\":\"address\"},{\"name\":\"initialMetaTx\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"initialWalletAddress\",\"type\":\"address\"},{\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"name\":\"medianizerContractAddress\",\"type\":\"address\"},{\"name\":\"daiTokenContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"topCornerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"LandQuadPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"buyLandWithDAI(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])\":{\"params\":{\"buyer\":\"address that perform the payment\",\"priceInSand\":\"price in SAND to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"reserved\":\"the reserved address (if any)\",\"size\":\"size of the pack of Land to purchase\",\"to\":\"address that will own the purchased Land\",\"x\":\"x coordinate of the Land\",\"y\":\"y coordinate of the Land\"},\"return\":\"The address of the operator\"},\"buyLandWithETH(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])\":{\"params\":{\"buyer\":\"address that perform the payment\",\"priceInSand\":\"price in SAND to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"reserved\":\"the reserved address (if any)\",\"size\":\"size of the pack of Land to purchase\",\"to\":\"address that will own the purchased Land\",\"x\":\"x coordinate of the Land\",\"y\":\"y coordinate of the Land\"},\"return\":\"The address of the operator\"},\"buyLandWithSand(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])\":{\"params\":{\"buyer\":\"address that perform the payment\",\"priceInSand\":\"price in SAND to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"reserved\":\"the reserved address (if any)\",\"size\":\"size of the pack of Land to purchase\",\"to\":\"address that will own the purchased Land\",\"x\":\"x coordinate of the Land\",\"y\":\"y coordinate of the Land\"},\"return\":\"The address of the operator\"},\"changeAdmin(address)\":{\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"getAdmin()\":{\"return\":\"the current administrator of this contract.\"},\"getEtherAmountWithSAND(uint256)\":{\"params\":{\"sandAmount\":\"An amount of SAND\"},\"return\":\"The amount of ETH\"},\"getExpiryTime()\":{\"return\":\"The expiry time, as a unix epoch\"},\"isDAIEnabled()\":{\"return\":\"whether DAI payments are enabled\"},\"isETHEnabled()\":{\"return\":\"whether ETH payments are enabled\"},\"isMetaTransactionProcessor(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has meta-transaction execution rights.\"},\"isSANDEnabled()\":{\"return\":\"whether the specific SAND payments are enabled\"},\"merkleRoot()\":{\"return\":\"The Merkle root, as a bytes32 hash\"},\"setDAIEnabled(bool)\":{\"params\":{\"enabled\":\"whether to enable or disable\"}},\"setETHEnabled(bool)\":{\"params\":{\"enabled\":\"whether to enable or disable\"}},\"setMetaTransactionProcessor(address,bool)\":{\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setReceivingWallet(address)\":{\"params\":{\"newWallet\":\"address of the new receiving wallet\"}},\"setSANDEnabled(bool)\":{\"params\":{\"enabled\":\"whether to enable or disable\"}}},\"title\":\"Land Sale contract that supports also DAI and ETH as payment\"},\"userdoc\":{\"methods\":{\"buyLandWithDAI(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])\":{\"notice\":\"buy Land with DAI using the merkle proof associated with it\"},\"buyLandWithETH(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])\":{\"notice\":\"buy Land with ETH using the merkle proof associated with it\"},\"buyLandWithSand(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])\":{\"notice\":\"buy Land with SAND using the merkle proof associated with it\"},\"changeAdmin(address)\":{\"notice\":\"change the administrator to be `newAdmin`.\"},\"getAdmin()\":{\"notice\":\"gives the current administrator of this contract.\"},\"getEtherAmountWithSAND(uint256)\":{\"notice\":\"Returns the amount of ETH for a specific amount of SAND\"},\"getExpiryTime()\":{\"notice\":\"Gets the expiry time for the current sale\"},\"isDAIEnabled()\":{\"notice\":\"return whether DAI payments are enabled\"},\"isETHEnabled()\":{\"notice\":\"return whether ETH payments are enabled\"},\"isMetaTransactionProcessor(address)\":{\"notice\":\"check whether address `who` is given meta-transaction execution rights.\"},\"isSANDEnabled()\":{\"notice\":\"return whether the specific SAND payments are enabled\"},\"merkleRoot()\":{\"notice\":\"Gets the Merkle root associated with the current sale\"},\"setDAIEnabled(bool)\":{\"notice\":\"enable/disable DAI payment for Lands\"},\"setETHEnabled(bool)\":{\"notice\":\"enable/disable ETH payment for Lands\"},\"setMetaTransactionProcessor(address,bool)\":{\"notice\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\"},\"setReceivingWallet(address)\":{\"notice\":\"set the wallet receiving the proceeds\"},\"setSANDEnabled(bool)\":{\"notice\":\"enable/disable the specific SAND payment for Lands\"}},\"notice\":\"This contract mananges the sale of our lands\"}},\"settings\":{\"compilationTarget\":{\"src/LandSale/LandSaleWithETHAndDAI.sol\":\"LandSaleWithETHAndDAI\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts_common/src/BaseWithStorage/Admin.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract Admin {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require (msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf3763fa108235379b48cf8fe9a708692fcb077250d9974351fd636ff0baf84bf\"},\"contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract MetaTransactionReceiver is Admin{\\n\\n    mapping(address => bool) internal _metaTransactionContracts;\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin can setup metaTransactionProcessors\\\"\\n        );\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns(bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\",\"keccak256\":\"0xbd938dbadc0ed2142b6dc20b0613dc3236a9a6ec370639476b672c2536e9a186\"},\"contracts_common/src/BaseWithStorage/SuperOperators.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract SuperOperators is Admin {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin is allowed to add super operators\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x22354cf60ccf77a6de61c13bdaf4e3094d115b960ae563b0527622c846a12abb\"},\"contracts_common/src/Interfaces/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\n/* interface */\\ncontract ERC20 is ERC20Basic {\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        returns (bool);\\n    function approve(address spender, uint256 value) public returns (bool);\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        returns (uint256);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa8cb63790e43bb77235530d0add180a84e9eb20c95173059e7d783c599c199b0\"},\"contracts_common/src/Interfaces/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC20Basic DRAFT\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\n/* interface */\\ncontract ERC20Basic {\\n    function totalSupply() public view returns (uint256);\\n    function balanceOf(address who) public view returns (uint256);\\n    function transfer(address to, uint256 value) public returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x7d333b4cd97e3fa0a67f3f20d79e6a46d5c81a8f7d506aa24c624ec6e4e913b9\"},\"contracts_common/src/Interfaces/ERC721Events.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ERC721Events {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0xdf0051d52413d5e853a9801d5745337e4040949b31568cc17ca50f8853e10567\"},\"contracts_common/src/Interfaces/ERC721MandatoryTokenReceiver.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\n*/\\ninterface ERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xe68dbcb5d43dd61dd8606271fe75e149bb401e9fdfb9e89e2a5b3962638fea91\"},\"contracts_common/src/Interfaces/ERC721TokenReceiver.sol\":{\"content\":\"/* This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\\n *\\n * This code has not been reviewed.\\n * Do not use or deploy this code before reviewing it personally first.\\n */\\n// solhint-disable-next-line compiler-fixed\\npragma solidity ^0.5.2;\\n\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x94e7441c07cb2f97b9b5be8ca5a5f76623615963852aa5e20208b8cbcb33c1ce\"},\"contracts_common/src/Interfaces/Medianizer.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n\\n/**\\n * @title Medianizer contract\\n * @dev From MakerDAO (https://etherscan.io/address/0x729D19f657BD0614b4985Cf1D82531c67569197B#code)\\n */\\ninterface Medianizer {\\n    function read() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77a6277882bc0f9482175a23dcd2cf4ec08cc7268f9e8caf71ad49c39b07c262\"},\"contracts_common/src/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary AddressUtils {\\n\\n    function toPayable(address _address) internal pure returns (address payable _payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2ad037f43ea9a899526bd911737727d027ce8a2bc1cf615bdf5a1706d400afd6\"},\"contracts_common/src/Libraries/SafeMathWithRequire.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        require(c / a == b, \\\"overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"undeflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c >= a, \\\"overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x362e750dc8b68acf6b56e0e78c6e8801b5d08031cfc77576e3222e5f42d99313\"},\"src/Land.sol\":{\"content\":\"/* solhint-disable no-empty-blocks */\\n\\npragma solidity 0.5.9;\\n\\nimport \\\"./Land/erc721/LandBaseToken.sol\\\";\\n\\ncontract Land is LandBaseToken {\\n    constructor(\\n        address metaTransactionContract,\\n        address admin\\n    ) public LandBaseToken(\\n        metaTransactionContract,\\n        admin\\n    ) {\\n    }\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://api.sandbox.game/lands/\\\",\\n                    uint2str(id),\\n                    \\\"/metadata.json\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n}\\n\",\"keccak256\":\"0x50a19e798e0ecee177cf2e7a21bdfe0a0e98bf67251a510fe25c3ae982e17c00\"},\"src/Land/erc721/ERC721BaseToken.sol\":{\"content\":\"/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport \\\"../../../contracts_common/src/Libraries/AddressUtils.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC721Events.sol\\\";\\nimport \\\"../../../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\nimport \\\"../../../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC721MandatoryTokenReceiver.sol\\\";\\n\\ncontract ERC721BaseToken is ERC721Events, SuperOperators, MetaTransactionReceiver {\\n    using AddressUtils for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    mapping (address => uint256) public _numNFTPerAddress;\\n    mapping (uint256 => uint256) public _owners;\\n    mapping (address => mapping(address => bool)) public _operatorsForAll;\\n    mapping (uint256 => address) public _operators;\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin\\n    ) internal {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 id) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _owners[id] = uint256(to);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Return the number of Land owned by an address\\n     * @param owner The address to look for\\n     * @return The number of Land token owned by the address\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"owner is zero address\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return address(_owners[id]);\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        operatorEnabled = (data / 2**255) == 1;\\n    }\\n\\n    /**\\n     * @notice Return the owner of a Land\\n     * @param id The id of the Land\\n     * @return The address of the owner\\n     */\\n    function ownerOf(uint256 id) external view returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    function _approveFor(address owner, address operator, uint256 id) internal {\\n        if(operator == address(0)) {\\n            _owners[id] = uint256(owner); // no need to resset the operator, it will be overriden next time\\n        } else {\\n            _owners[id] = uint256(owner) + 2**255;\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        address owner = _ownerOf(id);\\n        require(sender != address(0), \\\"sender is zero address\\\");\\n        require(\\n            msg.sender == sender ||\\n            _metaTransactionContracts[msg.sender] ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[sender][msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        require(owner == sender, \\\"owner != sender\\\");\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) external {\\n        address owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(\\n            owner == msg.sender ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[owner][msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Get the approved operator for a specific token\\n     * @param id The id of the token\\n     * @return The address of the operator\\n     */\\n    function getApproved(uint256 id) external view returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkTransfer(address from, address to, uint256 id) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(owner == from, \\\"not owner in _checkTransfer\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        isMetaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !isMetaTx) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender] ||\\n                (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"not approved to transfer\\\"\\n            );\\n        }\\n    }\\n\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success;\\n        bool result;\\n        bytes memory call_data = abi.encodeWithSelector(\\n            ERC165ID,\\n            interfaceId\\n        );\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, call_data)\\n            let call_size := mload(call_data)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(\\n                10000,\\n                _contract,\\n                call_ptr,\\n                call_size,\\n                output,\\n                0x20\\n            ) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n    */\\n    function transferFrom(address from, address to, uint256 id) external {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \\\"\\\"),\\n                \\\"erc721 transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data),\\n                \\\"ERC721: transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id) external {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n    */\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    function _batchTransferFrom(address from, address to, uint256[] memory ids, bytes memory data, bool safe) internal {\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        bool authorized = msg.sender == from ||\\n            metaTx ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[from][msg.sender];\\n\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for(uint256 i = 0; i < numTokens; i ++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"not owner in batchTransferFrom\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \\\"not authorized\\\");\\n            _owners[id] = uint256(to);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n    */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender ||\\n            _metaTransactionContracts[msg.sender] ||\\n            _superOperators[msg.sender],\\n            \\\"not authorized to approve for all\\\"\\n        );\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(\\n            !_superOperators[operator],\\n            \\\"super operator can't have their approvalForAll changed\\\"\\n        );\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Check if the sender approved the operator\\n     * @param owner The address of the owner\\n     * @param operator The address of the operator\\n     * @return The status of the approval\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool isOperator)\\n    {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function _burn(address from, address owner, uint256 id) public {\\n        require(from == owner, \\\"not owner\\\");\\n        _owners[id] = 2**160; // cannot mint it again\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id token which will be burnt.\\n    function burn(uint256 id) external {\\n        _burn(msg.sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token which will be burnt.\\n    function burnFrom(address from, uint256 id) external {\\n        require(from != address(0), \\\"Invalid sender address\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(\\n            msg.sender == from ||\\n            _metaTransactionContracts[msg.sender] ||\\n            (operatorEnabled && _operators[id] == from) ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[from][msg.sender],\\n            \\\"not authorized to burn\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    function _checkOnERC721Received(address operator, address from, address to, uint256 tokenId, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        bytes4 retval = ERC721TokenReceiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _checkOnERC721BatchReceived(address operator, address from, address to, uint256[] memory ids, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        bytes4 retval = ERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x4ed2366d9e73a981b8c2148e828080d6905f09ebab8dedcd6b7a5d9641b68ca0\"},\"src/Land/erc721/LandBaseToken.sol\":{\"content\":\"/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport \\\"./ERC721BaseToken.sol\\\";\\n\\ncontract LandBaseToken is ERC721BaseToken {\\n    // Our grid is 408 x 408 lands\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER =          0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 =      0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 =      0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 =      0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 =    0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 =    0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n    event Minter(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin is allowed to add minters\\\"\\n        );\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin\\n    ) public ERC721BaseToken(metaTransactionContract, admin) {\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external returns(uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() external returns(uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function x(uint256 id) external returns(uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function y(uint256 id) external returns(uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id / GRID_SIZE;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The top left x coordinate of the new quad\\n     * @param y The top left y coordinate of the new quad\\n     * @param data extra data to pass to the transfer\\n     */\\n    function mintQuad(address to, uint256 size, uint256 x, uint256 y, bytes calldata data) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(\\n            isMinter(msg.sender),\\n            \\\"Only a minter can mint\\\"\\n        );\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        require(_owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == 0, \\\"Already minted as 24x24\\\");\\n\\n        uint256 toX = x+size;\\n        uint256 toY = y+size;\\n        if (size <= 12) {\\n            require(\\n                _owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE] == 0,\\n                \\\"Already minted as 12x12\\\"\\n            );\\n        } else {\\n            for (uint256 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint256 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    require(_owners[id12x12] == 0, \\\"Already minted as 12x12\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            require(_owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE] == 0, \\\"Already minted as 6x6\\\");\\n        } else {\\n            for (uint256 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint256 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    require(_owners[id6x6] == 0, \\\"Already minted as 6x6\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            require(_owners[LAYER_3x3 + (x/3) * 3 + ((y/3) * 3) * GRID_SIZE] == 0, \\\"Already minted as 3x3\\\");\\n        } else {\\n            for (uint256 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint256 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    require(_owners[id3x3] == 0, \\\"Already minted as 3x3\\\");\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < size*size; i++) {\\n            uint256 id = _idInPath(i, size, x, y);\\n            require(_owners[id] == 0, \\\"Already minted\\\");\\n            emit Transfer(address(0), to, id);\\n        }\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(msg.sender, address(0), to, size, x, y, data);\\n    }\\n\\n    function _idInPath(uint256 i, uint256 size, uint256 x, uint256 y) internal pure returns(uint256) {\\n        uint256 row = i / size;\\n        if(row % 2 == 0) { // alow ids to follow a path in a quad\\n            return (x + (i%size)) + ((y + row) * GRID_SIZE);\\n        } else {\\n            return ((x + size) - (1 + i%size)) + ((y + row) * GRID_SIZE);\\n        }\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x The top left x coordinate of the quad\\n    /// @param y The top left y coordinate of the quad\\n    /// @param data additional data\\n    function transferQuad(address from, address to, uint256 size, uint256 x, uint256 y, bytes calldata data) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(metaTx ? from : msg.sender, from, to, size, x, y, data);\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size*size);\\n            for (uint256 i = 0; i < size*size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(operator, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of top left x coordinates for each quad\\n    /// @param ys list of top left y coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size*size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    function _transferQuad(address from, address to, uint256 size, uint256 x, uint256 y) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = x + y * GRID_SIZE;\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(to);\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size*size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns(bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require(address(owner) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _regroup(address from, address to, uint256 size, uint256 x, uint256 y) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        if (size == 3) {\\n            _regroup3x3(from, to, x, y, true);\\n        } else if (size == 6) {\\n            _regroup6x6(from, to, x, y, true);\\n        } else if (size == 12) {\\n            _regroup12x12(from, to, x, y, true);\\n        } else if (size == 24) {\\n            _regroup24x24(from, to, x, y, true);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _regroup3x3(address from, address to, uint256 x, uint256 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_3x3 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x+3; xi++) {\\n            for (uint256 yi = y; yi < y+3; yi++) {\\n                ownerOfAll = _checkAndClear(from, xi + yi * GRID_SIZE) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from) ||\\n                    _owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE] == uint256(from) ||\\n                    _owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE] == uint256(from) ||\\n                    _owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == uint256(from),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n    function _regroup6x6(address from, address to, uint256 x, uint256 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_6x6 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x+6; xi += 3) {\\n            for (uint256 yi = y; yi < y+6; yi += 3) {\\n                bool ownAllIndividual = _regroup3x3(from, to, xi, yi, false);\\n                uint256 id3x3 = LAYER_3x3 + xi + yi * GRID_SIZE;\\n                uint256 owner3x3 = _owners[id3x3];\\n                if (owner3x3 != 0) {\\n                    if(!ownAllIndividual) {\\n                        require(owner3x3 == uint256(from), \\\"not owner of 3x3 quad\\\");\\n                    }\\n                    _owners[id3x3] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner3x3 != 0) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from) ||\\n                    _owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE] == uint256(from) ||\\n                    _owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == uint256(from),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n    function _regroup12x12(address from, address to, uint256 x, uint256 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_12x12 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x+12; xi += 6) {\\n            for (uint256 yi = y; yi < y+12; yi += 6) {\\n                bool ownAllIndividual = _regroup6x6(from, to, xi, yi, false);\\n                uint256 id6x6 = LAYER_6x6 + xi + yi * GRID_SIZE;\\n                uint256 owner6x6 = _owners[id6x6];\\n                if (owner6x6 != 0) {\\n                    if(!ownAllIndividual) {\\n                        require(owner6x6 == uint256(from), \\\"not owner of 6x6 quad\\\");\\n                    }\\n                    _owners[id6x6] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner6x6 != 0) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from) ||\\n                    _owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == uint256(from),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n    function _regroup24x24(address from, address to, uint256 x, uint256 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_24x24 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x+24; xi += 12) {\\n            for (uint256 yi = y; yi < y+24; yi += 12) {\\n                bool ownAllIndividual = _regroup12x12(from, to, xi, yi, false);\\n                uint256 id12x12 = LAYER_12x12 + xi + yi * GRID_SIZE;\\n                uint256 owner12x12 = _owners[id12x12];\\n                if (owner12x12 != 0) {\\n                    if(!ownAllIndividual) {\\n                        require(owner12x12 == uint256(from), \\\"not owner of 12x12 quad\\\");\\n                    }\\n                    _owners[id12x12] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner12x12 != 0) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from),\\n                    \\\"not owner of all sub quads not parent quad\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll || _owners[quadId] == uint256(from);\\n    }\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            return address(owner1x1); // cast to zero\\n        } else {\\n            address owner3x3 = address(_owners[LAYER_3x3 + (x/3) * 3 + ((y/3) * 3) * GRID_SIZE]);\\n            if (owner3x3 != address(0)) {\\n                return owner3x3;\\n            } else {\\n                address owner6x6 = address(_owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE]);\\n                if (owner6x6 != address(0)) {\\n                    return owner6x6;\\n                } else {\\n                    address owner12x12 = address(_owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE]);\\n                    if (owner12x12 != address(0)) {\\n                        return owner12x12;\\n                    } else {\\n                        return address(_owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(owner1x1);\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            address owner3x3 = address(_owners[LAYER_3x3 + (x/3) * 3 + ((y/3) * 3) * GRID_SIZE]);\\n            if (owner3x3 != address(0)) {\\n                owner = owner3x3;\\n                operatorEnabled = false;\\n            } else {\\n                address owner6x6 = address(_owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE]);\\n                if (owner6x6 != address(0)) {\\n                    owner = owner6x6;\\n                    operatorEnabled = false;\\n                } else {\\n                    address owner12x12 = address(_owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE]);\\n                    if (owner12x12 != address(0)) {\\n                        owner = owner12x12;\\n                        operatorEnabled = false;\\n                    } else {\\n                        owner = address(_owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE]);\\n                        operatorEnabled = false;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa6aed274b1cbb8ad60bfe17506b73da798ff64aa08ef30137a4021a0ef0996dd\"},\"src/LandSale/LandSaleWithETHAndDAI.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"../../contracts_common/src/Libraries/SafeMathWithRequire.sol\\\";\\nimport \\\"../Land.sol\\\";\\nimport \\\"../../contracts_common/src/Interfaces/ERC20.sol\\\";\\nimport \\\"../../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport \\\"../../contracts_common/src/Interfaces/Medianizer.sol\\\";\\n\\n/**\\n * @title Land Sale contract that supports also DAI and ETH as payment\\n * @notice This contract mananges the sale of our lands\\n */\\ncontract LandSaleWithETHAndDAI is MetaTransactionReceiver {\\n    using SafeMathWithRequire for uint256;\\n\\n    uint256 internal constant GRID_SIZE = 408; // 408 is the size of the Land\\n    uint256 internal constant daiPrice = 14400000000000000;\\n\\n    Land internal _land;\\n    ERC20 internal _sand;\\n    Medianizer private _medianizer;\\n    ERC20 private _dai;\\n\\n    address payable internal _wallet;\\n    uint256 internal _expiryTime;\\n    bytes32 internal _merkleRoot;\\n\\n    bool _sandEnabled = false;\\n    bool _etherEnabled = true;\\n    bool _daiEnabled = false;\\n\\n    event LandQuadPurchased(\\n        address indexed buyer,\\n        address indexed to,\\n        uint256 indexed topCornerId,\\n        uint256 size,\\n        uint256 price,\\n        address token,\\n        uint256 amountPaid\\n    );\\n\\n    constructor(\\n        address landAddress,\\n        address sandContractAddress,\\n        address initialMetaTx,\\n        address admin,\\n        address payable initialWalletAddress,\\n        bytes32 merkleRoot,\\n        uint256 expiryTime,\\n        address medianizerContractAddress,\\n        address daiTokenContractAddress\\n    ) public {\\n        _land = Land(landAddress);\\n        _sand = ERC20(sandContractAddress);\\n        _setMetaTransactionProcessor(initialMetaTx, true);\\n        _admin = admin;\\n        _wallet = initialWalletAddress;\\n        _merkleRoot = merkleRoot;\\n        _expiryTime = expiryTime;\\n        _medianizer = Medianizer(medianizerContractAddress);\\n        _dai = ERC20(daiTokenContractAddress);\\n    }\\n\\n    /// @notice set the wallet receiving the proceeds\\n    /// @param newWallet address of the new receiving wallet\\n    function setReceivingWallet(address payable newWallet) external{\\n        require(newWallet != address(0), \\\"receiving wallet cannot be zero address\\\");\\n        require(msg.sender == _admin, \\\"only admin can change the receiving wallet\\\");\\n        _wallet = newWallet;\\n    }\\n\\n    /// @notice enable/disable DAI payment for Lands\\n    /// @param enabled whether to enable or disable\\n    function setDAIEnabled(bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin can enable/disable DAI\\\");\\n        _daiEnabled = enabled;\\n    }\\n\\n    /// @notice return whether DAI payments are enabled\\n    /// @return whether DAI payments are enabled\\n    function isDAIEnabled() external view returns (bool) {\\n        return _daiEnabled;\\n    }\\n\\n    /// @notice enable/disable ETH payment for Lands\\n    /// @param enabled whether to enable or disable\\n    function setETHEnabled(bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin can enable/disable ETH\\\");\\n        _etherEnabled = enabled;\\n    }\\n\\n    /// @notice return whether ETH payments are enabled\\n    /// @return whether ETH payments are enabled\\n    function isETHEnabled() external view returns (bool) {\\n        return _etherEnabled;\\n    }\\n\\n    /// @notice enable/disable the specific SAND payment for Lands\\n    /// @param enabled whether to enable or disable\\n    function setSANDEnabled(bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin can enable/disable SAND\\\");\\n        _sandEnabled = enabled;\\n    }\\n\\n    /// @notice return whether the specific SAND payments are enabled\\n    /// @return whether the specific SAND payments are enabled\\n    function isSANDEnabled() external view returns (bool) {\\n        return _sandEnabled;\\n    }\\n\\n    function _checkValidity(\\n        address buyer,\\n        address reserved,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 price,\\n        bytes32 salt,\\n        bytes32[] memory proof\\n    ) internal view {\\n        /* solium-disable-next-line security/no-block-members */\\n        require(block.timestamp < _expiryTime, \\\"sale is over\\\");\\n        require(buyer == msg.sender || _metaTransactionContracts[msg.sender], \\\"not authorized\\\");\\n        require(reserved == address(0) || reserved == buyer, \\\"cannot buy reserved Land\\\");\\n        bytes32 leaf = _generateLandHash(x, y, size, price, reserved, salt);\\n\\n        require(\\n            _verify(proof, leaf),\\n            \\\"Invalid land provided\\\"\\n        );\\n    }\\n\\n    function _mint(address buyer, address to, uint256 x, uint256 y, uint256 size, uint256 price, address token, uint256 tokenAmount) internal {\\n        _land.mintQuad(to, size, x, y, \\\"\\\");\\n        emit LandQuadPurchased(buyer, to, x + (y * GRID_SIZE), size, price, token, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice buy Land with SAND using the merkle proof associated with it\\n     * @param buyer address that perform the payment\\n     * @param to address that will own the purchased Land\\n     * @param reserved the reserved address (if any)\\n     * @param x x coordinate of the Land\\n     * @param y y coordinate of the Land\\n     * @param size size of the pack of Land to purchase\\n     * @param priceInSand price in SAND to purchase that Land\\n     * @param proof merkleProof for that particular Land\\n     * @return The address of the operator\\n     */\\n    function buyLandWithSand(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 priceInSand,\\n        bytes32 salt,\\n        bytes32[] calldata proof\\n    ) external {\\n        require(_sandEnabled, \\\"sand payments not enabled\\\");\\n        _checkValidity(buyer, reserved, x, y, size, priceInSand, salt, proof);\\n        require(\\n            _sand.transferFrom(\\n                buyer,\\n                _wallet,\\n                priceInSand\\n            ),\\n            \\\"sand token transfer failed\\\"\\n        );\\n        _mint(buyer, to, x, y, size, priceInSand, address(_sand), priceInSand);\\n    }\\n\\n    /**\\n     * @notice buy Land with ETH using the merkle proof associated with it\\n     * @param buyer address that perform the payment\\n     * @param to address that will own the purchased Land\\n     * @param reserved the reserved address (if any)\\n     * @param x x coordinate of the Land\\n     * @param y y coordinate of the Land\\n     * @param size size of the pack of Land to purchase\\n     * @param priceInSand price in SAND to purchase that Land\\n     * @param proof merkleProof for that particular Land\\n     * @return The address of the operator\\n     */\\n    function buyLandWithETH(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 priceInSand,\\n        bytes32 salt,\\n        bytes32[] calldata proof\\n    ) external payable {\\n        require(_etherEnabled, \\\"ether payments not enabled\\\");\\n        _checkValidity(buyer, reserved, x, y, size, priceInSand, salt, proof);\\n\\n        uint256 ETHRequired = getEtherAmountWithSAND(priceInSand);\\n        require(msg.value >= ETHRequired, \\\"not enough ether sent\\\");\\n        uint256 leftOver = msg.value - ETHRequired;\\n        if(leftOver > 0) {\\n            msg.sender.transfer(leftOver); // refund extra\\n        }\\n        address(_wallet).transfer(ETHRequired);\\n\\n        _mint(buyer, to, x, y, size, priceInSand, address(0), ETHRequired);\\n    }\\n\\n    /**\\n     * @notice buy Land with DAI using the merkle proof associated with it\\n     * @param buyer address that perform the payment\\n     * @param to address that will own the purchased Land\\n     * @param reserved the reserved address (if any)\\n     * @param x x coordinate of the Land\\n     * @param y y coordinate of the Land\\n     * @param size size of the pack of Land to purchase\\n     * @param priceInSand price in SAND to purchase that Land\\n     * @param proof merkleProof for that particular Land\\n     * @return The address of the operator\\n     */\\n    function buyLandWithDAI(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 priceInSand,\\n        bytes32 salt,\\n        bytes32[] calldata proof\\n    ) external {\\n        require(_daiEnabled, \\\"dai payments not enabled\\\");\\n        _checkValidity(buyer, reserved, x, y, size, priceInSand, salt, proof);\\n\\n        uint256 DAIRequired = priceInSand.mul(daiPrice).div(1000000000000000000);\\n        require(_dai.transferFrom(msg.sender, _wallet, DAIRequired), \\\"failed to transfer dai\\\");\\n\\n        _mint(buyer, to, x, y, size, priceInSand, address(_dai), DAIRequired);\\n    }\\n\\n    /**\\n     * @notice Gets the expiry time for the current sale\\n     * @return The expiry time, as a unix epoch\\n     */\\n    function getExpiryTime() external view returns(uint256) {\\n        return _expiryTime;\\n    }\\n\\n    /**\\n     * @notice Gets the Merkle root associated with the current sale\\n     * @return The Merkle root, as a bytes32 hash\\n     */\\n    function merkleRoot() external view returns(bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    function _generateLandHash(\\n        uint256 x,\\n        uint256 y,\\n        uint256 size,\\n        uint256 price,\\n        address reserved,\\n        bytes32 salt\\n    ) internal pure returns (\\n        bytes32\\n    ) {\\n        return keccak256(\\n            abi.encodePacked(\\n                x,\\n                y,\\n                size,\\n                price,\\n                reserved,\\n                salt\\n            )\\n        );\\n    }\\n\\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        return computedHash == _merkleRoot;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of ETH for a specific amount of SAND\\n     * @param sandAmount An amount of SAND\\n     * @return The amount of ETH\\n     */\\n    function getEtherAmountWithSAND(uint256 sandAmount) public view returns (uint256) {\\n        uint256 ethUsdPair = getEthUsdPair();\\n        return sandAmount.mul(daiPrice).div(ethUsdPair);\\n    }\\n\\n    /**\\n     * @notice Gets the ETHUSD pair from the Medianizer contract\\n     * @return The pair as an uint256\\n     */\\n    function getEthUsdPair() internal view returns (uint256) {\\n        bytes32 pair = _medianizer.read();\\n        return uint256(pair);\\n    }\\n}\\n\",\"keccak256\":\"0xd584c3542bfc3254ad8428ce7b18de936ecec5c4b2d53bec59132181dd89c000\"}},\"version\":1}",
    "userdoc": {
      "methods": {
        "buyLandWithDAI(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])": {
          "notice": "buy Land with DAI using the merkle proof associated with it"
        },
        "buyLandWithETH(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])": {
          "notice": "buy Land with ETH using the merkle proof associated with it"
        },
        "buyLandWithSand(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32[])": {
          "notice": "buy Land with SAND using the merkle proof associated with it"
        },
        "changeAdmin(address)": {
          "notice": "change the administrator to be `newAdmin`."
        },
        "getAdmin()": {
          "notice": "gives the current administrator of this contract."
        },
        "getEtherAmountWithSAND(uint256)": {
          "notice": "Returns the amount of ETH for a specific amount of SAND"
        },
        "getExpiryTime()": {
          "notice": "Gets the expiry time for the current sale"
        },
        "isDAIEnabled()": {
          "notice": "return whether DAI payments are enabled"
        },
        "isETHEnabled()": {
          "notice": "return whether ETH payments are enabled"
        },
        "isMetaTransactionProcessor(address)": {
          "notice": "check whether address `who` is given meta-transaction execution rights."
        },
        "isSANDEnabled()": {
          "notice": "return whether the specific SAND payments are enabled"
        },
        "merkleRoot()": {
          "notice": "Gets the Merkle root associated with the current sale"
        },
        "setDAIEnabled(bool)": {
          "notice": "enable/disable DAI payment for Lands"
        },
        "setETHEnabled(bool)": {
          "notice": "enable/disable ETH payment for Lands"
        },
        "setMetaTransactionProcessor(address,bool)": {
          "notice": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights)."
        },
        "setReceivingWallet(address)": {
          "notice": "set the wallet receiving the proceeds"
        },
        "setSANDEnabled(bool)": {
          "notice": "enable/disable the specific SAND payment for Lands"
        }
      },
      "notice": "This contract mananges the sale of our lands"
    }
  },
  "args": [
    "0xE09B54F242D41018CBc456050867292BE9295c28",
    "0x3845badAde8e6dFF049820680d1F14bD3903a5d0",
    "0x3845badAde8e6dFF049820680d1F14bD3903a5d0",
    "0xeaa0993e1d21c2103e4f172a20d29371fbaf6d06",
    "0x9695ed5020BB47880738Db356678fe8cBc8FF60b",
    "0x32395e699ed85ea23474a5670dd7c2fd549a05db284aefd21e3583b1030068bf",
    1576753200,
    "0x729D19f657BD0614b4985Cf1D82531c67569197B",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F"
  ],
  "address": "0xD9E0f58486B5728195B28ee8dF4273C170D865Ed",
  "transactionHash": "0x92a60f2de9b353382aa0ebd0fa362ae04d2c58a0e9dc9541df845a5098227911",
  "data": [
    {
      "x": 192,
      "y": 192,
      "size": 24,
      "price": "921600000000000000000000",
      "reserved": "0x7A9fe22691c811ea339D9B73150e6911a5343DcA"
    },
    {
      "x": 168,
      "y": 240,
      "size": 24,
      "price": "921600000000000000000000"
    },
    {
      "x": 192,
      "y": 228,
      "size": 12,
      "price": "244800000000000000000000",
      "reserved": "0x8D7Cd362cE140B44e025D0B7e35A9Dd843A1bA82"
    },
    {
      "x": 156,
      "y": 264,
      "size": 12,
      "price": "244800000000000000000000"
    },
    {
      "x": 156,
      "y": 216,
      "size": 12,
      "price": "244800000000000000000000",
      "reserved": "0x7A9fe22691c811ea339D9B73150e6911a5343DcA"
    },
    {
      "x": 168,
      "y": 204,
      "size": 12,
      "price": "244800000000000000000000"
    },
    {
      "x": 144,
      "y": 240,
      "size": 12,
      "price": "244800000000000000000000"
    },
    {
      "x": 192,
      "y": 222,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 192,
      "y": 258,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 198,
      "y": 246,
      "size": 6,
      "price": "64800000000000000000000",
      "reserved": "0x1b67dEE1d9FBf11D94f1cF3006172db830d2A913"
    },
    {
      "x": 180,
      "y": 264,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 150,
      "y": 258,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 162,
      "y": 240,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 162,
      "y": 252,
      "size": 6,
      "price": "64800000000000000000000",
      "reserved": "0x3A31455a51FD865c92a8f9563B1a5e0B3A7269ba"
    },
    {
      "x": 144,
      "y": 222,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 162,
      "y": 204,
      "size": 6,
      "price": "64800000000000000000000"
    },
    {
      "x": 180,
      "y": 210,
      "size": 6,
      "price": "64800000000000000000000",
      "reserved": "0x7A9fe22691c811ea339D9B73150e6911a5343DcA"
    },
    {
      "x": 174,
      "y": 228,
      "size": 6,
      "price": "64800000000000000000000",
      "reserved": "0xd1A19ae358C9eD941497cEAC66478AC185E9a139"
    },
    {
      "x": 180,
      "y": 222,
      "size": 6,
      "price": "64800000000000000000000",
      "reserved": "0x7A9fe22691c811ea339D9B73150e6911a5343DcA"
    },
    {
      "x": 156,
      "y": 234,
      "size": 6,
      "price": "64800000000000000000000",
      "reserved": "0x7A9fe22691c811ea339D9B73150e6911a5343DcA"
    },
    {
      "x": 192,
      "y": 216,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 189,
      "y": 216,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 198,
      "y": 216,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 201,
      "y": 219,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 201,
      "y": 222,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 198,
      "y": 243,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 195,
      "y": 246,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 195,
      "y": 249,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 192,
      "y": 252,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 198,
      "y": 255,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 186,
      "y": 264,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 189,
      "y": 264,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 177,
      "y": 264,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 171,
      "y": 264,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 168,
      "y": 267,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 162,
      "y": 261,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 159,
      "y": 258,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 156,
      "y": 255,
      "size": 3,
      "price": "17100000000000000000000",
      "reserved": "0x4B7Cb5b29Be1FcDD2a16058eA5d2a7B1EA727C35"
    },
    {
      "x": 153,
      "y": 264,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 150,
      "y": 255,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 162,
      "y": 249,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 159,
      "y": 246,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 156,
      "y": 243,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 150,
      "y": 237,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 141,
      "y": 243,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 141,
      "y": 246,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 147,
      "y": 228,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 153,
      "y": 228,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 147,
      "y": 219,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 159,
      "y": 213,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 156,
      "y": 210,
      "size": 3,
      "price": "17100000000000000000000",
      "reserved": "0x841f3a12D45651C21EcfA26546C9E77F5Ff4Fe80"
    },
    {
      "x": 159,
      "y": 207,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 153,
      "y": 222,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 159,
      "y": 228,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 183,
      "y": 207,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 186,
      "y": 207,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 177,
      "y": 216,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 180,
      "y": 216,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 177,
      "y": 222,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 171,
      "y": 222,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 171,
      "y": 219,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 168,
      "y": 228,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 165,
      "y": 231,
      "size": 3,
      "price": "17100000000000000000000",
      "reserved": "0x57c8bcc1c4af411d996a6317971b9b44439c9b75"
    },
    {
      "x": 168,
      "y": 234,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 174,
      "y": 234,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 174,
      "y": 237,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 186,
      "y": 222,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 189,
      "y": 225,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 186,
      "y": 228,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 183,
      "y": 234,
      "size": 3,
      "price": "17100000000000000000000",
      "reserved": "0x7532beCD60d5a8DCdA82176605dF84c228fa94dA"
    },
    {
      "x": 186,
      "y": 237,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 144,
      "y": 204,
      "size": 12,
      "price": "244800000000000000000000"
    },
    {
      "x": 150,
      "y": 216,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 150,
      "y": 231,
      "size": 3,
      "price": "17100000000000000000000"
    },
    {
      "x": 156,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 209,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 210,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 211,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 212,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 213,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 214,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 215,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 149,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 216,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 149,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 217,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 149,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 218,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 219,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 220,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 221,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 222,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 223,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 224,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 225,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 226,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 199,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 200,
      "y": 227,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 228,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 229,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 150,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 151,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 230,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 231,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 232,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 233,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 234,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 235,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 186,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 187,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 188,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 236,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 237,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 238,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 171,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 172,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 173,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 177,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 178,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 179,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 180,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 181,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 182,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 183,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 184,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 185,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 189,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 190,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 191,
      "y": 239,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 240,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 241,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 242,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 243,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 244,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 245,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 246,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 247,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 248,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 249,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 250,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 251,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 252,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 253,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 152,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 198,
      "y": 254,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 255,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 256,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 153,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 154,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 155,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 192,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 193,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 194,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 195,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 196,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 197,
      "y": 257,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 258,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 259,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 162,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 163,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 164,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 260,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 261,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 262,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 156,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 157,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 158,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 159,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 160,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 161,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 165,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 166,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 167,
      "y": 263,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 264,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 264,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 264,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 174,
      "y": 264,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 175,
      "y": 264,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 176,
      "y": 264,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 265,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 265,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 265,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 168,
      "y": 266,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 169,
      "y": 266,
      "size": 1,
      "price": "2000000000000000000000"
    },
    {
      "x": 170,
      "y": 266,
      "size": 1,
      "price": "2000000000000000000000"
    }
  ]
}