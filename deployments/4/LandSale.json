{
  "contractInfo": {
    "abi": [
      {
        "constant": true,
        "inputs": [],
        "name": "getExpiryTime",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "buyer",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "reserved",
            "type": "address"
          },
          {
            "name": "x",
            "type": "uint16"
          },
          {
            "name": "y",
            "type": "uint16"
          },
          {
            "name": "size",
            "type": "uint16"
          },
          {
            "name": "price",
            "type": "uint256"
          },
          {
            "name": "salt",
            "type": "bytes32"
          },
          {
            "name": "proof",
            "type": "bytes32[]"
          }
        ],
        "name": "buyLand",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "merkleRoot",
        "outputs": [
          {
            "name": "",
            "type": "bytes32"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getAdmin",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "metaTransactionProcessor",
            "type": "address"
          },
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setMetaTransactionProcessor",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "changeAdmin",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "newWallet",
            "type": "address"
          }
        ],
        "name": "setReceivingWallet",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "who",
            "type": "address"
          }
        ],
        "name": "isMetaTransactionProcessor",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "name": "landAddress",
            "type": "address"
          },
          {
            "name": "erc20ContractAddress",
            "type": "address"
          },
          {
            "name": "initialMetaTx",
            "type": "address"
          },
          {
            "name": "admin",
            "type": "address"
          },
          {
            "name": "initialWalletAddress",
            "type": "address"
          },
          {
            "name": "merkleRoot",
            "type": "bytes32"
          },
          {
            "name": "expiryTime",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "buyer",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "topCornerId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "size",
            "type": "uint16"
          },
          {
            "indexed": false,
            "name": "price",
            "type": "uint256"
          }
        ],
        "name": "LandQuadPurchased",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "metaTransactionProcessor",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "MetaTransactionProcessor",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "oldAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      }
    ],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50604051610c6f380380610c6f833981810160405260e081101561003357600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600280546001600160a01b038089166001600160a01b031992831617909255600380549288169290911691909117905594959394929391929091906100a48560016001600160e01b036100e616565b600080546001600160a01b039586166001600160a01b03199182161790915560048054949095169316929092179092556006919091556005555061014a915050565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a15050565b610b16806101596000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638a04af6a1161005b5780638a04af6a146101915780638f283970146101bf578063b522ecff146101e5578063dc5074af1461020b57610088565b806325cb5bc01461008d578063269ddb48146100a75780632eb4a7ab146101655780636e9960c31461016d575b600080fd5b610095610245565b60408051918252519081900360200190f35b61016360048036036101208110156100be57600080fd5b6001600160a01b038235811692602081013582169260408201359092169161ffff6060830135811692608081013582169260a08201359092169160c08201359160e081013591810190610120810161010082013564010000000081111561012457600080fd5b82018360208201111561013657600080fd5b8035906020019184602083028401116401000000008311171561015857600080fd5b50909250905061024b565b005b610095610662565b610175610668565b604080516001600160a01b039092168252519081900360200190f35b610163600480360360408110156101a757600080fd5b506001600160a01b0381351690602001351515610677565b610163600480360360208110156101d557600080fd5b50356001600160a01b03166106ce565b610163600480360360208110156101fb57600080fd5b50356001600160a01b03166107af565b6102316004803603602081101561022157600080fd5b50356001600160a01b0316610877565b604080519115158252519081900360200190f35b60055490565b60055442106102a1576040805162461bcd60e51b815260206004820152600c60248201527f73616c65206973206f7665720000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038a163314806102c757503360009081526001602052604090205460ff165b610318576040805162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038816158061033f5750896001600160a01b0316886001600160a01b0316145b610390576040805162461bcd60e51b815260206004820152601860248201527f63616e6e6f7420627579207265736572766564204c616e640000000000000000604482015290519081900360640190fd5b60006103a0888888888d89610895565b90506103e0838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250610935915050565b610431576040805162461bcd60e51b815260206004820152601560248201527f496e76616c6964206c616e642070726f76696465640000000000000000000000604482015290519081900360640190fd5b600360009054906101000a90046001600160a01b03166001600160a01b03166323b872dd8c600460009054906101000a90046001600160a01b0316886040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156104d557600080fd5b505af11580156104e9573d6000803e3d6000fd5b505050506040513d60208110156104ff57600080fd5b5051610552576040805162461bcd60e51b815260206004820152601560248201527f6572633230207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b600254604080517f013ad7cf0000000000000000000000000000000000000000000000000000000081526001600160a01b038d8116600483015261ffff808b166024840152808d1660448401528b1660648301529151919092169163013ad7cf91608480830192600092919082900301818387803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b505050506101988761ffff16028861ffff16018a6001600160a01b03168c6001600160a01b03167ff913800894326642342f3b5ce4c501263bc84443e140ae875cd3775520d0d0bc8989604051808361ffff1661ffff1681526020018281526020019250505060405180910390a45050505050505050505050565b60065490565b6000546001600160a01b031690565b6000546001600160a01b031633146106c05760405162461bcd60e51b815260040180806020018281038252602e815260200180610ab4602e913960400191505060405180910390fd5b6106ca82826109e0565b5050565b6000546001600160a01b0316331461072d576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b0381166107f45760405162461bcd60e51b8152600401808060200182810382526027815260200180610a636027913960400191505060405180910390fd5b6000546001600160a01b0316331461083d5760405162461bcd60e51b815260040180806020018281038252602a815260200180610a8a602a913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b031660009081526001602052604090205460ff1690565b6040805160f097881b7fffff00000000000000000000000000000000000000000000000000000000000090811660208084019190915297891b811660228301529590971b9094166024870152602686019290925260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166046850152605a8085019190915281518085039091018152607a9093019052815191012090565b600081815b84518110156109d457600085828151811061095157fe5b602002602001015190508083101561099957828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506109cb565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b5060010161093a565b50600654149392505050565b6001600160a01b03821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a1505056fe726563656976696e672077616c6c65742063616e6e6f74206265207a65726f20616464726573736f6e6c792061646d696e2063616e206368616e67652074686520726563656976696e672077616c6c65746f6e6c792061646d696e2063616e207365747570206d6574615472616e73616374696f6e50726f636573736f7273a265627a7a72305820c038a7ecb1c4f22d817a57f585c3afe0fdcdf03efc7edae335da6b41d10acdda64736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xC6F CODESIZE SUB DUP1 PUSH2 0xC6F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0xE0 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 SWAP1 SWAP7 ADD MLOAD PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP3 DUP9 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xA4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH2 0xE6 AND JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP5 SWAP1 SWAP6 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x5 SSTORE POP PUSH2 0x14A SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xB21EB88B4E33B3F1281830A7178D74D8AA73220416215726B68AE23D539515CB SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0xB16 DUP1 PUSH2 0x159 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A04AF6A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8A04AF6A EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0xB522ECFF EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xDC5074AF EQ PUSH2 0x20B JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x25CB5BC0 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x269DDB48 EQ PUSH2 0xA7 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x6E9960C3 EQ PUSH2 0x16D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x245 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH2 0xFFFF PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x80 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x24B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH2 0x662 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x668 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x677 JUMP JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT PUSH2 0x2A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616C65206973206F7665720000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND CALLER EQ DUP1 PUSH2 0x2C7 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x318 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420617574686F72697A6564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO DUP1 PUSH2 0x33F JUMPI POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x390 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420627579207265736572766564204C616E640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP9 DUP9 DUP9 DUP9 DUP14 DUP10 PUSH2 0x895 JUMP JUMPDEST SWAP1 POP PUSH2 0x3E0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP6 SWAP3 POP PUSH2 0x935 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206C616E642070726F76696465640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP13 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x552 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6572633230207472616E73666572206661696C65640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x13AD7CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0xFFFF DUP1 DUP12 AND PUSH1 0x24 DUP5 ADD MSTORE DUP1 DUP14 AND PUSH1 0x44 DUP5 ADD MSTORE DUP12 AND PUSH1 0x64 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x13AD7CF SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x198 DUP8 PUSH2 0xFFFF AND MUL DUP9 PUSH2 0xFFFF AND ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF913800894326642342F3B5CE4C501263BC84443E140AE875CD3775520D0D0BC DUP10 DUP10 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xAB4 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6CA DUP3 DUP3 PUSH2 0x9E0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x72D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206368616E67652061646D696E0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xA63 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x83D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xA8A PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xF0 SWAP8 DUP9 SHL PUSH32 0xFFFF000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP8 DUP10 SHL DUP2 AND PUSH1 0x22 DUP4 ADD MSTORE SWAP6 SWAP1 SWAP8 SHL SWAP1 SWAP5 AND PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x26 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x46 DUP6 ADD MSTORE PUSH1 0x5A DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x7A SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x951 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 LT ISZERO PUSH2 0x999 JUMPI DUP3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x9CB JUMP JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x93A JUMP JUMPDEST POP PUSH1 0x6 SLOAD EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xB21EB88B4E33B3F1281830A7178D74D8AA73220416215726B68AE23D539515CB SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP INVALID PUSH19 0x6563656976696E672077616C6C65742063616E PUSH15 0x6F74206265207A65726F2061646472 PUSH6 0x73736F6E6C79 KECCAK256 PUSH2 0x646D PUSH10 0x6E2063616E206368616E PUSH8 0x6520746865207265 PUSH4 0x65697669 PUSH15 0x672077616C6C65746F6E6C79206164 PUSH14 0x696E2063616E207365747570206D PUSH6 0x74615472616E PUSH20 0x616374696F6E50726F636573736F7273A265627A PUSH27 0x72305820C038A7ECB1C4F22D817A57F585C3AFE0FDCDF03EFC7EDA 0xe3 CALLDATALOAD 0xda PUSH12 0x41D10ACDDA64736F6C634300 SDIV MULMOD STOP ORIGIN ",
        "sourceMap": "280:4386:62:-;;;746:527;8:9:-1;5:2;;;30:1;27;20:12;5:2;746:527:62;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;746:527:62;;;;;;;;;;;;;;;;;;;;;;;;;;;1004:5;:25;;-1:-1:-1;;;;;1004:25:62;;;-1:-1:-1;;;;;;1004:25:62;;;;;;;1039:6;:36;;;;;;;;;;;;;;;746:527;;;;;;;;;;;1085:49;746:527;1004:25;-1:-1:-1;;;;;1085:28:62;:49;:::i;:::-;1144:6;:14;;-1:-1:-1;;;;;1144:14:62;;;-1:-1:-1;;;;;;1144:14:62;;;;;;;1168:7;:30;;;;;;;;;;;;;;;1208:11;:24;;;;1242:11;:24;-1:-1:-1;280:4386:62;;-1:-1:-1;;280:4386:62;873:247:2;-1:-1:-1;;;;;978:51:2;;;;;;:25;:51;;;;;;;;;:61;;-1:-1:-1;;978:61:2;;;;;;;;;;1054:59;;;;;;;;;;;;;;;;;;;;;873:247;;:::o;280:4386:62:-;;;;;;;"
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50600436106100885760003560e01c80638a04af6a1161005b5780638a04af6a146101915780638f283970146101bf578063b522ecff146101e5578063dc5074af1461020b57610088565b806325cb5bc01461008d578063269ddb48146100a75780632eb4a7ab146101655780636e9960c31461016d575b600080fd5b610095610245565b60408051918252519081900360200190f35b61016360048036036101208110156100be57600080fd5b6001600160a01b038235811692602081013582169260408201359092169161ffff6060830135811692608081013582169260a08201359092169160c08201359160e081013591810190610120810161010082013564010000000081111561012457600080fd5b82018360208201111561013657600080fd5b8035906020019184602083028401116401000000008311171561015857600080fd5b50909250905061024b565b005b610095610662565b610175610668565b604080516001600160a01b039092168252519081900360200190f35b610163600480360360408110156101a757600080fd5b506001600160a01b0381351690602001351515610677565b610163600480360360208110156101d557600080fd5b50356001600160a01b03166106ce565b610163600480360360208110156101fb57600080fd5b50356001600160a01b03166107af565b6102316004803603602081101561022157600080fd5b50356001600160a01b0316610877565b604080519115158252519081900360200190f35b60055490565b60055442106102a1576040805162461bcd60e51b815260206004820152600c60248201527f73616c65206973206f7665720000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038a163314806102c757503360009081526001602052604090205460ff165b610318576040805162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a6564000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038816158061033f5750896001600160a01b0316886001600160a01b0316145b610390576040805162461bcd60e51b815260206004820152601860248201527f63616e6e6f7420627579207265736572766564204c616e640000000000000000604482015290519081900360640190fd5b60006103a0888888888d89610895565b90506103e0838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250610935915050565b610431576040805162461bcd60e51b815260206004820152601560248201527f496e76616c6964206c616e642070726f76696465640000000000000000000000604482015290519081900360640190fd5b600360009054906101000a90046001600160a01b03166001600160a01b03166323b872dd8c600460009054906101000a90046001600160a01b0316886040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156104d557600080fd5b505af11580156104e9573d6000803e3d6000fd5b505050506040513d60208110156104ff57600080fd5b5051610552576040805162461bcd60e51b815260206004820152601560248201527f6572633230207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b600254604080517f013ad7cf0000000000000000000000000000000000000000000000000000000081526001600160a01b038d8116600483015261ffff808b166024840152808d1660448401528b1660648301529151919092169163013ad7cf91608480830192600092919082900301818387803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b505050506101988761ffff16028861ffff16018a6001600160a01b03168c6001600160a01b03167ff913800894326642342f3b5ce4c501263bc84443e140ae875cd3775520d0d0bc8989604051808361ffff1661ffff1681526020018281526020019250505060405180910390a45050505050505050505050565b60065490565b6000546001600160a01b031690565b6000546001600160a01b031633146106c05760405162461bcd60e51b815260040180806020018281038252602e815260200180610ab4602e913960400191505060405180910390fd5b6106ca82826109e0565b5050565b6000546001600160a01b0316331461072d576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b0381166107f45760405162461bcd60e51b8152600401808060200182810382526027815260200180610a636027913960400191505060405180910390fd5b6000546001600160a01b0316331461083d5760405162461bcd60e51b815260040180806020018281038252602a815260200180610a8a602a913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001600160a01b031660009081526001602052604090205460ff1690565b6040805160f097881b7fffff00000000000000000000000000000000000000000000000000000000000090811660208084019190915297891b811660228301529590971b9094166024870152602686019290925260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166046850152605a8085019190915281518085039091018152607a9093019052815191012090565b600081815b84518110156109d457600085828151811061095157fe5b602002602001015190508083101561099957828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506109cb565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b5060010161093a565b50600654149392505050565b6001600160a01b03821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9281900390910190a1505056fe726563656976696e672077616c6c65742063616e6e6f74206265207a65726f20616464726573736f6e6c792061646d696e2063616e206368616e67652074686520726563656976696e672077616c6c65746f6e6c792061646d696e2063616e207365747570206d6574615472616e73616374696f6e50726f636573736f7273a265627a7a72305820c038a7ecb1c4f22d817a57f585c3afe0fdcdf03efc7edae335da6b41d10acdda64736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A04AF6A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8A04AF6A EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0xB522ECFF EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xDC5074AF EQ PUSH2 0x20B JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x25CB5BC0 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x269DDB48 EQ PUSH2 0xA7 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x6E9960C3 EQ PUSH2 0x16D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x245 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x120 DUP2 LT ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH2 0xFFFF PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP2 AND SWAP3 PUSH1 0x80 DUP2 ADD CALLDATALOAD DUP3 AND SWAP3 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP1 SWAP3 AND SWAP2 PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0xE0 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH2 0x120 DUP2 ADD PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x24B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH2 0x662 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x668 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x677 JUMP JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AF JUMP JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x877 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT PUSH2 0x2A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73616C65206973206F7665720000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND CALLER EQ DUP1 PUSH2 0x2C7 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x318 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420617574686F72697A6564000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO DUP1 PUSH2 0x33F JUMPI POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x390 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420627579207265736572766564204C616E640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP9 DUP9 DUP9 DUP9 DUP14 DUP10 PUSH2 0x895 JUMP JUMPDEST SWAP1 POP PUSH2 0x3E0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP6 SWAP3 POP PUSH2 0x935 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964206C616E642070726F76696465640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP13 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x552 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6572633230207472616E73666572206661696C65640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x13AD7CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH2 0xFFFF DUP1 DUP12 AND PUSH1 0x24 DUP5 ADD MSTORE DUP1 DUP14 AND PUSH1 0x44 DUP5 ADD MSTORE DUP12 AND PUSH1 0x64 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x13AD7CF SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x198 DUP8 PUSH2 0xFFFF AND MUL DUP9 PUSH2 0xFFFF AND ADD DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xF913800894326642342F3B5CE4C501263BC84443E140AE875CD3775520D0D0BC DUP10 DUP10 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xAB4 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6CA DUP3 DUP3 PUSH2 0x9E0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x72D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206368616E67652061646D696E0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xA63 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x83D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xA8A PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xF0 SWAP8 DUP9 SHL PUSH32 0xFFFF000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP8 DUP10 SHL DUP2 AND PUSH1 0x22 DUP4 ADD MSTORE SWAP6 SWAP1 SWAP8 SHL SWAP1 SWAP5 AND PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x26 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x46 DUP6 ADD MSTORE PUSH1 0x5A DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x7A SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x9D4 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x951 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 LT ISZERO PUSH2 0x999 JUMPI DUP3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x9CB JUMP JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x93A JUMP JUMPDEST POP PUSH1 0x6 SLOAD EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xB21EB88B4E33B3F1281830A7178D74D8AA73220416215726B68AE23D539515CB SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP INVALID PUSH19 0x6563656976696E672077616C6C65742063616E PUSH15 0x6F74206265207A65726F2061646472 PUSH6 0x73736F6E6C79 KECCAK256 PUSH2 0x646D PUSH10 0x6E2063616E206368616E PUSH8 0x6520746865207265 PUSH4 0x65697669 PUSH15 0x672077616C6C65746F6E6C79206164 PUSH14 0x696E2063616E207365747570206D PUSH6 0x74615472616E PUSH20 0x616374696F6E50726F636573736F7273A265627A PUSH27 0x72305820C038A7ECB1C4F22D817A57F585C3AFE0FDCDF03EFC7EDA 0xe3 CALLDATALOAD 0xda PUSH12 0x41D10ACDDA64736F6C634300 SDIV MULMOD STOP ORIGIN ",
        "sourceMap": "280:4386:62:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;280:4386:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3366:91;;;:::i;:::-;;;;;;;;;;;;;;;;2210:1029;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;2210:1029:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;2210:1029:62;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2210:1029:62;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;2210:1029:62;;-1:-1:-1;2210:1029:62;-1:-1:-1;2210:1029:62;:::i;:::-;;3598:88;;;:::i;264:82:1:-;;;:::i;:::-;;;;-1:-1:-1;;;;;264:82:1;;;;;;;;;;;;;;572:295:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;572:295:2;;;;;;;;;;:::i;469:197:1:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;469:197:1;-1:-1:-1;;;;;469:197:1;;:::i;1394:269:62:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1394:269:62;-1:-1:-1;;;;;1394:269:62;;:::i;1330:131:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1330:131:2;-1:-1:-1;;;;;1330:131:2;;:::i;:::-;;;;;;;;;;;;;;;;;;3366:91:62;3439:11;;3366:91;:::o;2210:1029::-;2540:11;;2522:15;:29;2514:54;;;;;-1:-1:-1;;;2514:54:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2586:19:62;;2595:10;2586:19;;:60;;-1:-1:-1;2635:10:62;2609:37;;;;:25;:37;;;;;;;;2586:60;2578:87;;;;;-1:-1:-1;;;2578:87:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2683:22:62;;;;:43;;;2721:5;-1:-1:-1;;;;;2709:17:62;:8;-1:-1:-1;;;;;2709:17:62;;2683:43;2675:80;;;;;-1:-1:-1;;;2675:80:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;2765:12;2780:52;2798:1;2801;2804:4;2810:5;2817:8;2827:4;2780:17;:52::i;:::-;2765:67;;2864:20;2872:5;;2864:20;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2879:4:62;;-1:-1:-1;2864:7:62;;-1:-1:-1;;2864:20:62:i;:::-;2843:88;;;;;-1:-1:-1;;;2843:88:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;2963:6;;;;;;;;;-1:-1:-1;;;;;2963:6:62;-1:-1:-1;;;;;2963:19:62;;3000:5;3023:7;;;;;;;;;-1:-1:-1;;;;;3023:7:62;3048:5;2963:104;;;;;;;;;;;;;-1:-1:-1;;;;;2963:104:62;-1:-1:-1;;;;;2963:104:62;;;;;;-1:-1:-1;;;;;2963:104:62;-1:-1:-1;;;;;2963:104:62;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2963:104:62;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2963:104:62;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2963:104:62;2942:172;;;;;-1:-1:-1;;;2942:172:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;3125:5;;:30;;;;;;-1:-1:-1;;;;;3125:30:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:5;;;;;:14;;:30;;;;;:5;;:30;;;;;;;:5;;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;3125:30:62;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3125:30:62;;;;370:3;3204:1;:13;;;3199:1;:19;;;3195:2;-1:-1:-1;;;;;3170:62:62;3188:5;-1:-1:-1;;;;;3170:62:62;;3220:4;3226:5;3170:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;2210:1029;;;;;;;;;;;:::o;3598:88::-;3668:11;;3598:88;:::o;264:82:1:-;307:7;333:6;-1:-1:-1;;;;;333:6:1;264:82;:::o;572:295:2:-;709:6;;-1:-1:-1;;;;;709:6:2;695:10;:20;674:113;;;;-1:-1:-1;;;674:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;797:63;826:24;852:7;797:28;:63::i;:::-;572:295;;:::o;469:197:1:-;549:6;;-1:-1:-1;;;;;549:6:1;535:10;:20;527:60;;;;;-1:-1:-1;;;527:60:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;615:6;;602:30;;;-1:-1:-1;;;;;615:6:1;;;602:30;;;;;;;;;;;;;;;;;;;;;642:6;:17;;;;-1:-1:-1;;;;;642:17:1;;;;;;;;;;469:197::o;1394:269:62:-;-1:-1:-1;;;;;1475:23:62;;1467:75;;;;-1:-1:-1;;;1467:75:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1574:6;;-1:-1:-1;;;;;1574:6:62;1560:10;:20;1552:75;;;;-1:-1:-1;;;1552:75:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1637:7;:19;;;;-1:-1:-1;;;;;1637:19:62;;;;;;;;;;1394:269::o;1330:131:2:-;-1:-1:-1;;;;;1424:30:2;1401:4;1424:30;;;:25;:30;;;;;;;;;1330:131::o;3692:425:62:-;3939:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;3939:161:62;;;;;;3916:194;;;;;;3692:425::o;4123:541::-;4201:4;4240;4201;4255:358;4279:5;:12;4275:1;:16;4255:358;;;4312:20;4335:5;4341:1;4335:8;;;;;;;;;;;;;;4312:31;;4377:12;4362;:27;4358:245;;;4451:12;4465;4434:44;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4434:44:62;;;4424:55;;;;;;4409:70;;4358:245;;;4560:12;4574;4543:44;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4543:44:62;;;4533:55;;;;;;4518:70;;4358:245;-1:-1:-1;4293:3:62;;4255:358;;;-1:-1:-1;4646:11:62;;4630:27;;4123:541;-1:-1:-1;;;4123:541:62:o;873:247:2:-;-1:-1:-1;;;;;978:51:2;;;;;;:25;:51;;;;;;;;;:61;;;;;;;;;;;;;1054:59;;;;;;;;;;;;;;;;;;;;;873:247;;:::o"
      },
      "methodIdentifiers": {
        "buyLand(address,address,address,uint16,uint16,uint16,uint256,bytes32,bytes32[])": "269ddb48",
        "changeAdmin(address)": "8f283970",
        "getAdmin()": "6e9960c3",
        "getExpiryTime()": "25cb5bc0",
        "isMetaTransactionProcessor(address)": "dc5074af",
        "merkleRoot()": "2eb4a7ab",
        "setMetaTransactionProcessor(address,bool)": "8a04af6a",
        "setReceivingWallet(address)": "b522ecff"
      }
    },
    "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"reserved\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint16\"},{\"name\":\"y\",\"type\":\"uint16\"},{\"name\":\"size\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setReceivingWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"landAddress\",\"type\":\"address\"},{\"name\":\"erc20ContractAddress\",\"type\":\"address\"},{\"name\":\"initialMetaTx\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"initialWalletAddress\",\"type\":\"address\"},{\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"topCornerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LandQuadPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"buyLand(address,address,address,uint16,uint16,uint16,uint256,bytes32,bytes32[])\":{\"params\":{\"buyer\":\"address that perform the payment\",\"price\":\"amount of Sand to purchase that Land\",\"proof\":\"merkleProof for that particular Land\",\"reserved\":\"the reserved address (if any)\",\"size\":\"size of the pack of Land to purchase\",\"to\":\"address that will own the purchased Land\",\"x\":\"x coordinate of the Land\",\"y\":\"y coordinate of the Land\"},\"return\":\"The address of the operator\"},\"changeAdmin(address)\":{\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"getAdmin()\":{\"return\":\"the current administrator of this contract.\"},\"getExpiryTime()\":{\"return\":\"The expiry time, as a unix epoch\"},\"isMetaTransactionProcessor(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has meta-transaction execution rights.\"},\"merkleRoot()\":{\"return\":\"The Merkle root, as a bytes32 hash\"},\"setMetaTransactionProcessor(address,bool)\":{\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setReceivingWallet(address)\":{\"params\":{\"newWallet\":\"address of the new receiving wallet\"}}},\"title\":\"Land Sale contract\"},\"userdoc\":{\"methods\":{\"buyLand(address,address,address,uint16,uint16,uint16,uint256,bytes32,bytes32[])\":{\"notice\":\"buy Land using the merkle proof associated with it\"},\"changeAdmin(address)\":{\"notice\":\"change the administrator to be `newAdmin`.\"},\"getAdmin()\":{\"notice\":\"gives the current administrator of this contract.\"},\"getExpiryTime()\":{\"notice\":\"Gets the expiry time for the current sale\"},\"isMetaTransactionProcessor(address)\":{\"notice\":\"check whether address `who` is given meta-transaction execution rights.\"},\"merkleRoot()\":{\"notice\":\"Gets the Merkle root associated with the current sale\"},\"setMetaTransactionProcessor(address,bool)\":{\"notice\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\"},\"setReceivingWallet(address)\":{\"notice\":\"set the wallet receiving the proceeds\"}},\"notice\":\"This contract mananges the sale of our lands\"}},\"settings\":{\"compilationTarget\":{\"src/LandSale/LandSale.sol\":\"LandSale\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts_common/src/BaseWithStorage/Admin.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract Admin {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require (msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf3763fa108235379b48cf8fe9a708692fcb077250d9974351fd636ff0baf84bf\"},\"contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract MetaTransactionReceiver is Admin{\\n\\n    mapping(address => bool) internal _metaTransactionContracts;\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin can setup metaTransactionProcessors\\\"\\n        );\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns(bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\",\"keccak256\":\"0xbd938dbadc0ed2142b6dc20b0613dc3236a9a6ec370639476b672c2536e9a186\"},\"contracts_common/src/BaseWithStorage/SuperOperators.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract SuperOperators is Admin {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin is allowed to add super operators\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x22354cf60ccf77a6de61c13bdaf4e3094d115b960ae563b0527622c846a12abb\"},\"contracts_common/src/Interfaces/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\n/* interface */\\ncontract ERC20 is ERC20Basic {\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        returns (bool);\\n    function approve(address spender, uint256 value) public returns (bool);\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        returns (uint256);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa8cb63790e43bb77235530d0add180a84e9eb20c95173059e7d783c599c199b0\"},\"contracts_common/src/Interfaces/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC20Basic DRAFT\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\n/* interface */\\ncontract ERC20Basic {\\n    function totalSupply() public view returns (uint256);\\n    function balanceOf(address who) public view returns (uint256);\\n    function transfer(address to, uint256 value) public returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x7d333b4cd97e3fa0a67f3f20d79e6a46d5c81a8f7d506aa24c624ec6e4e913b9\"},\"contracts_common/src/Interfaces/ERC721Events.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ERC721Events {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0xdf0051d52413d5e853a9801d5745337e4040949b31568cc17ca50f8853e10567\"},\"contracts_common/src/Interfaces/ERC721MandatoryTokenReceiver.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\n*/\\ninterface ERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xe68dbcb5d43dd61dd8606271fe75e149bb401e9fdfb9e89e2a5b3962638fea91\"},\"contracts_common/src/Interfaces/ERC721TokenReceiver.sol\":{\"content\":\"/* This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\\n *\\n * This code has not been reviewed.\\n * Do not use or deploy this code before reviewing it personally first.\\n */\\n// solhint-disable-next-line compiler-fixed\\npragma solidity ^0.5.2;\\n\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x94e7441c07cb2f97b9b5be8ca5a5f76623615963852aa5e20208b8cbcb33c1ce\"},\"contracts_common/src/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary AddressUtils {\\n\\n    function toPayable(address _address) internal pure returns (address payable _payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2ad037f43ea9a899526bd911737727d027ce8a2bc1cf615bdf5a1706d400afd6\"},\"src/Land.sol\":{\"content\":\"/* solhint-disable no-empty-blocks */\\n\\npragma solidity 0.5.9;\\n\\nimport \\\"./Land/erc721/LandBaseToken.sol\\\";\\n\\ncontract Land is LandBaseToken {\\n    constructor(\\n        address metaTransactionContract,\\n        address admin\\n    ) public LandBaseToken(\\n        metaTransactionContract,\\n        admin\\n    ) {\\n    }\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://api.sandbox.game/land/\\\",\\n                    uint2str(id),\\n                    \\\"/metadata.json\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n}\\n\",\"keccak256\":\"0x0b8243167c5fe78ba03c248bc164e895f83f43a40e11f701cf6652004a9a5441\"},\"src/Land/erc721/ERC721BaseToken.sol\":{\"content\":\"/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport \\\"../../../contracts_common/src/Libraries/AddressUtils.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC721TokenReceiver.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC721Events.sol\\\";\\nimport \\\"../../../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\nimport \\\"../../../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\nimport \\\"../../../contracts_common/src/Interfaces/ERC721MandatoryTokenReceiver.sol\\\";\\n\\ncontract ERC721BaseToken is ERC721Events, SuperOperators, MetaTransactionReceiver {\\n    using AddressUtils for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    mapping (address => uint256) public _numNFTPerAddress;\\n    mapping (uint256 => uint256) public _owners;\\n    mapping (address => mapping(address => bool)) public _operatorsForAll;\\n    mapping (uint256 => address) public _operators;\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin\\n    ) internal {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 id) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _owners[id] = uint256(to);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /**\\n     * @notice Return the number of Land owned by an address\\n     * @param owner The address to look for\\n     * @return The number of Land token owned by the address\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"owner is zero address\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        return address(_owners[id]);\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(data);\\n        operatorEnabled = (data / 2**255) == 1;\\n    }\\n\\n    /**\\n     * @notice Return the owner of a Land\\n     * @param id The id of the Land\\n     * @return The address of the owner\\n     */\\n    function ownerOf(uint256 id) external view returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n    }\\n\\n    function _approveFor(address owner, address operator, uint256 id) internal {\\n        if(operator == address(0)) {\\n            _owners[id] = uint256(owner); // no need to resset the operator, it will be overriden next time\\n        } else {\\n            _owners[id] = uint256(owner) + 2**255;\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        address owner = _ownerOf(id);\\n        require(sender != address(0), \\\"sender is zero address\\\");\\n        require(\\n            msg.sender == sender ||\\n            _metaTransactionContracts[msg.sender] ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[sender][msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        require(owner == sender, \\\"owner != sender\\\");\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Approve an operator to spend tokens on the sender behalf\\n     * @param operator The address receiving the approval\\n     * @param id The id of the token\\n     */\\n    function approve(address operator, uint256 id) external {\\n        address owner = _ownerOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(\\n            owner == msg.sender ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[owner][msg.sender],\\n            \\\"not authorized to approve\\\"\\n        );\\n        _approveFor(owner, operator, id);\\n    }\\n\\n    /**\\n     * @notice Get the approved operator for a specific token\\n     * @param id The id of the token\\n     * @return The address of the operator\\n     */\\n    function getApproved(uint256 id) external view returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkTransfer(address from, address to, uint256 id) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require(owner == from, \\\"not owner in _checkTransfer\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        isMetaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !isMetaTx) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender] ||\\n                (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"not approved to transfer\\\"\\n            );\\n        }\\n    }\\n\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success;\\n        bool result;\\n        bytes memory call_data = abi.encodeWithSelector(\\n            ERC165ID,\\n            interfaceId\\n        );\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, call_data)\\n            let call_size := mload(call_data)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(\\n                10000,\\n                _contract,\\n                call_ptr,\\n                call_size,\\n                output,\\n                0x20\\n            ) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n    */\\n    function transferFrom(address from, address to, uint256 id) external {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, \\\"\\\"),\\n                \\\"erc721 transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     * @param data Additional data\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data) public {\\n        bool metaTx = _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(\\n                _checkOnERC721Received(metaTx ? from : msg.sender, from, to, id, data),\\n                \\\"ERC721: transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer a token between 2 addresses letting the receiver knows of the transfer\\n     * @param from The send of the token\\n     * @param to The recipient of the token\\n     * @param id The id of the token\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id) external {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n    */\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    function _batchTransferFrom(address from, address to, uint256[] memory ids, bytes memory data, bool safe) internal {\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        bool authorized = msg.sender == from ||\\n            metaTx ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[from][msg.sender];\\n\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for(uint256 i = 0; i < numTokens; i ++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"not owner in batchTransferFrom\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msg.sender), \\\"not authorized\\\");\\n            _owners[id] = uint256(to);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer many tokens between 2 addresses ensuring the receiving contract has a receiver method\\n     * @param from The sender of the token\\n     * @param to The recipient of the token\\n     * @param ids The ids of the tokens\\n     * @param data additional data\\n    */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, bytes calldata data) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) external pure returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param sender The address giving the approval\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender ||\\n            _metaTransactionContracts[msg.sender] ||\\n            _superOperators[msg.sender],\\n            \\\"not authorized to approve for all\\\"\\n        );\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Set the approval for an operator to manage all the tokens of the sender\\n     * @param operator The address receiving the approval\\n     * @param approved The determination of the approval\\n     */\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(\\n            !_superOperators[operator],\\n            \\\"super operator can't have their approvalForAll changed\\\"\\n        );\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @notice Check if the sender approved the operator\\n     * @param owner The address of the owner\\n     * @param operator The address of the operator\\n     * @return The status of the approval\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool isOperator)\\n    {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function _burn(address from, address owner, uint256 id) public {\\n        require(from == owner, \\\"not owner\\\");\\n        _owners[id] = 2**160; // cannot mint it again\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id token which will be burnt.\\n    function burn(uint256 id) external {\\n        _burn(msg.sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token which will be burnt.\\n    function burnFrom(address from, uint256 id) external {\\n        require(from != address(0), \\\"Invalid sender address\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(\\n            msg.sender == from ||\\n            _metaTransactionContracts[msg.sender] ||\\n            (operatorEnabled && _operators[id] == from) ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[from][msg.sender],\\n            \\\"not authorized to burn\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    function _checkOnERC721Received(address operator, address from, address to, uint256 tokenId, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        bytes4 retval = ERC721TokenReceiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _checkOnERC721BatchReceived(address operator, address from, address to, uint256[] memory ids, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        bytes4 retval = ERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n}\\n\",\"keccak256\":\"0x4ed2366d9e73a981b8c2148e828080d6905f09ebab8dedcd6b7a5d9641b68ca0\"},\"src/Land/erc721/LandBaseToken.sol\":{\"content\":\"/* solhint-disable func-order, code-complexity */\\npragma solidity 0.5.9;\\n\\nimport \\\"./ERC721BaseToken.sol\\\";\\n\\ncontract LandBaseToken is ERC721BaseToken {\\n    // Our grid is 408 x 408 lands\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER =          0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 =      0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 =      0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 =      0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 =    0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 =    0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    mapping(address => bool) internal _minters;\\n    event Minter(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin is allowed to add minters\\\"\\n        );\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin\\n    ) public ERC721BaseToken(metaTransactionContract, admin) {\\n    }\\n\\n    /// @notice total width of the map\\n    /// @return width\\n    function width() external returns(uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice total height of the map\\n    /// @return height\\n    function height() external returns(uint256) {\\n        return GRID_SIZE;\\n    }\\n\\n    /// @notice x coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the x coordinates\\n    function x(uint256 id) external returns(uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id % GRID_SIZE;\\n    }\\n\\n    /// @notice y coordinate of Land token\\n    /// @param id tokenId\\n    /// @return the y coordinates\\n    function y(uint256 id) external returns(uint256) {\\n        require(_ownerOf(id) != address(0), \\\"token does not exist\\\");\\n        return id / GRID_SIZE;\\n    }\\n\\n    /**\\n     * @notice Mint a new quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n     * @param to The recipient of the new quad\\n     * @param size The size of the new quad\\n     * @param x The x coordinate of the new quad\\n     * @param y The y coordinate of the new quad\\n     */\\n    function mintQuad(address to, uint16 size, uint16 x, uint16 y) external {\\n        require(to != address(0), \\\"to is zero address\\\");\\n        require(\\n            isMinter(msg.sender),\\n            \\\"Only a minter can mint\\\"\\n        );\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        uint256 quadId;\\n        uint256 id = x + y * GRID_SIZE;\\n\\n        if (size == 1) {\\n            quadId = id;\\n        } else if (size == 3) {\\n            quadId = LAYER_3x3 + id;\\n        } else if (size == 6) {\\n            quadId = LAYER_6x6 + id;\\n        } else if (size == 12) {\\n            quadId = LAYER_12x12 + id;\\n        } else if (size == 24) {\\n            quadId = LAYER_24x24 + id;\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n\\n        require(_owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == 0, \\\"Already minted as 24x24\\\");\\n\\n        uint256 toX = x+size;\\n        uint256 toY = y+size;\\n        if (size <= 12) {\\n            require(\\n                _owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE] == 0,\\n                \\\"Already minted as 12x12\\\"\\n            );\\n        } else {\\n            for (uint16 x12i = x; x12i < toX; x12i += 12) {\\n                for (uint16 y12i = y; y12i < toY; y12i += 12) {\\n                    uint256 id12x12 = LAYER_12x12 + x12i + y12i * GRID_SIZE;\\n                    require(_owners[id12x12] == 0, \\\"Already minted as 12x12\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 6) {\\n            require(_owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE] == 0, \\\"Already minted as 6x6\\\");\\n        } else {\\n            for (uint16 x6i = x; x6i < toX; x6i += 6) {\\n                for (uint16 y6i = y; y6i < toY; y6i += 6) {\\n                    uint256 id6x6 = LAYER_6x6 + x6i + y6i * GRID_SIZE;\\n                    require(_owners[id6x6] == 0, \\\"Already minted as 6x6\\\");\\n                }\\n            }\\n        }\\n\\n        if (size <= 3) {\\n            require(_owners[LAYER_3x3 + (x/3) * 3 + ((y/3) * 3) * GRID_SIZE] == 0, \\\"Already minted as 3x3\\\");\\n        } else {\\n            for (uint16 x3i = x; x3i < toX; x3i += 3) {\\n                for (uint16 y3i = y; y3i < toY; y3i += 3) {\\n                    uint256 id3x3 = LAYER_3x3 + x3i + y3i * GRID_SIZE;\\n                    require(_owners[id3x3] == 0, \\\"Already minted as 3x3\\\");\\n                }\\n            }\\n        }\\n\\n        for (uint16 xi = x; xi < toX; xi++) {\\n            for (uint16 yi = y; yi < toY; yi++) {\\n                uint256 id1x1 = xi + yi * GRID_SIZE;\\n                require(_owners[id1x1] == 0, \\\"Already minted\\\");\\n                emit Transfer(address(0), to, id1x1);\\n            }\\n        }\\n\\n        _owners[quadId] = uint256(to);\\n        _numNFTPerAddress[to] += size * size;\\n    }\\n\\n    /// @notice transfer one quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param size size of the quad\\n    /// @param x x top coordinates of the quad\\n    /// @param y y top coordinates of the quad\\n    /// @param data additional data\\n    function transferQuad(address from, address to, uint16 size, uint16 x, uint16 y, bytes calldata data) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size*size);\\n            for (uint256 i = 0; i < size*size; i++) {\\n                if((i/size) % 2 == 0) { // alow ids to follow a path\\n                    ids[i] = (x + (i%size)) + ((y + (i/size)) * GRID_SIZE);\\n                } else {\\n                    ids[i] = ((x + size) - (1 + i%size)) + ((y + (i/size)) * GRID_SIZE);\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice transfer multiple quad (aligned to a quad tree with size 3, 6, 12 or 24 only)\\n    /// @param from current owner of the quad\\n    /// @param to destination\\n    /// @param sizes list of sizes for each quad\\n    /// @param xs list of x top coordinates for each quad\\n    /// @param ys list of y top coordinates for each quad\\n    /// @param data additional data\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint16[] calldata sizes,\\n        uint16[] calldata xs,\\n        uint16[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        bool metaTx = msg.sender != from && _metaTransactionContracts[msg.sender];\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint16 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint16 size = sizes[j];\\n                uint16 x = xs[j];\\n                uint16 y = ys[j];\\n                for (uint256 i = 0; i < size*size; i++) {\\n                    if((i/size) % 2 == 0) { // alow ids to follow a path\\n                        ids[counter] = (x + (i%size)) + ((y + (i/size)) * GRID_SIZE);\\n                    } else {\\n                        ids[counter] = ((x + size) - (1 + i%size)) + ((y + (i/size)) * GRID_SIZE);\\n                    }\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    function _transferQuad(address from, address to, uint16 size, uint16 x, uint16 y) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = x + y * GRID_SIZE;\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(to);\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size*size; i++) {\\n            if((i/size) % 2 == 0) { // alow ids to follow a path\\n                emit Transfer(from, to, (x + (i%size)) + ((y + (i/size)) * GRID_SIZE));\\n            } else {\\n                emit Transfer(from, to, ((x + size) - (1 + i%size)) + ((y + (i/size)) * GRID_SIZE));\\n            }\\n        }\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns(bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require(address(owner) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _regroup(address from, address to, uint16 size, uint16 x, uint16 y) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        if (size == 3) {\\n            _regroup3x3(from, to, x, y, true);\\n        } else if (size == 6) {\\n            _regroup6x6(from, to, x, y, true);\\n        } else if (size == 12) {\\n            _regroup12x12(from, to, x, y, true);\\n        } else if (size == 24) {\\n            _regroup24x24(from, to, x, y, true);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _regroup3x3(address from, address to, uint16 x, uint16 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_3x3 + id;\\n        bool ownerOfAll = true;\\n        for (uint16 xi = x; xi < x+3; xi++) {\\n            for (uint16 yi = y; yi < y+3; yi++) {\\n                ownerOfAll = _checkAndClear(from, xi + yi * GRID_SIZE) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from) ||\\n                    _owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE] == uint256(from) ||\\n                    _owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE] == uint256(from) ||\\n                    _owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == uint256(from),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n    function _regroup6x6(address from, address to,  uint16 x, uint16 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_6x6 + id;\\n        bool ownerOfAll = true;\\n        for (uint16 xi = x; xi < x+6; xi += 3) {\\n            for (uint16 yi = y; yi < y+6; yi += 3) {\\n                bool ownAllIndividual = _regroup3x3(from, to, xi, yi, false);\\n                uint256 id3x3 = LAYER_3x3 + xi + yi * GRID_SIZE;\\n                uint256 owner3x3 = _owners[id3x3];\\n                if (owner3x3 != 0) {\\n                    if(!ownAllIndividual) {\\n                        require(owner3x3 == uint256(from), \\\"not owner of 3x3 quad\\\");\\n                    }\\n                    _owners[id3x3] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner3x3 != 0) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from) ||\\n                    _owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE] == uint256(from) ||\\n                    _owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == uint256(from),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n    function _regroup12x12(address from, address to,  uint16 x, uint16 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_12x12 + id;\\n        bool ownerOfAll = true;\\n        for (uint16 xi = x; xi < x+12; xi += 6) {\\n            for (uint16 yi = y; yi < y+12; yi += 6) {\\n                bool ownAllIndividual = _regroup6x6(from, to, xi, yi, false);\\n                uint256 id6x6 = LAYER_6x6 + xi + yi * GRID_SIZE;\\n                uint256 owner6x6 = _owners[id6x6];\\n                if (owner6x6 != 0) {\\n                    if(!ownAllIndividual) {\\n                        require(owner6x6 == uint256(from), \\\"not owner of 6x6 quad\\\");\\n                    }\\n                    _owners[id6x6] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner6x6 != 0) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from) ||\\n                    _owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE] == uint256(from),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n    function _regroup24x24(address from, address to,  uint16 x, uint16 y, bool set) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_24x24 + id;\\n        bool ownerOfAll = true;\\n        for (uint16 xi = x; xi < x+24; xi += 12) {\\n            for (uint16 yi = y; yi < y+24; yi += 12) {\\n                bool ownAllIndividual = _regroup12x12(from, to, xi, yi, false);\\n                uint256 id12x12 = LAYER_12x12 + xi + yi * GRID_SIZE;\\n                uint256 owner12x12 = _owners[id12x12];\\n                if (owner12x12 != 0) {\\n                    if(!ownAllIndividual) {\\n                        require(owner12x12 == uint256(from), \\\"not owner of 12x12 quad\\\");\\n                    }\\n                    _owners[id12x12] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner12x12 != 0) && ownerOfAll;\\n            }\\n        }\\n        if(set) {\\n            if(!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(from),\\n                    \\\"not owner of all sub quads not parent quad\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(to);\\n            return true;\\n        }\\n        return ownerOfAll || _owners[quadId] == uint256(from);\\n    }\\n\\n    function _ownerOf(uint256 id) internal view returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            return address(owner1x1); // cast to zero\\n        } else {\\n            address owner3x3 = address(_owners[LAYER_3x3 + (x/3) * 3 + ((y/3) * 3) * GRID_SIZE]);\\n            if (owner3x3 != address(0)) {\\n                return owner3x3;\\n            } else {\\n                address owner6x6 = address(_owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE]);\\n                if (owner6x6 != address(0)) {\\n                    return owner6x6;\\n                } else {\\n                    address owner12x12 = address(_owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE]);\\n                    if (owner12x12 != address(0)) {\\n                        return owner12x12;\\n                    } else {\\n                        return address(_owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE]);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            owner = address(owner1x1);\\n            operatorEnabled = (owner1x1 / 2**255) == 1;\\n        } else {\\n            address owner3x3 = address(_owners[LAYER_3x3 + (x/3) * 3 + ((y/3) * 3) * GRID_SIZE]);\\n            if (owner3x3 != address(0)) {\\n                owner = owner3x3;\\n                operatorEnabled = false;\\n            } else {\\n                address owner6x6 = address(_owners[LAYER_6x6 + (x/6) * 6 + ((y/6) * 6) * GRID_SIZE]);\\n                if (owner6x6 != address(0)) {\\n                    owner = owner6x6;\\n                    operatorEnabled = false;\\n                } else {\\n                    address owner12x12 = address(_owners[LAYER_12x12 + (x/12) * 12 + ((y/12) * 12) * GRID_SIZE]);\\n                    if (owner12x12 != address(0)) {\\n                        owner = owner12x12;\\n                        operatorEnabled = false;\\n                    } else {\\n                        owner = address(_owners[LAYER_24x24 + (x/24) * 24 + ((y/24) * 24) * GRID_SIZE]);\\n                        operatorEnabled = false;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x69565e3c24a5b7e8bc5f65156f88005bd26d4a0f4189a84e67c782f78b83c07e\"},\"src/LandSale/LandSale.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"../Land.sol\\\";\\nimport \\\"../../contracts_common/src/Interfaces/ERC20.sol\\\";\\nimport \\\"../../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\n\\n\\n/**\\n * @title Land Sale contract\\n * @notice This contract mananges the sale of our lands\\n */\\ncontract LandSale is MetaTransactionReceiver {\\n\\n    uint256 internal constant GRID_SIZE = 408; // 408 is the size of the Land\\n\\n    Land internal _land;\\n    ERC20 internal _erc20;\\n    address payable internal _wallet;\\n    uint256 internal _expiryTime;\\n    bytes32 internal _merkleRoot;\\n\\n    event LandQuadPurchased(\\n        address indexed buyer,\\n        address indexed to,\\n        uint256 indexed topCornerId,\\n        uint16 size,\\n        uint256 price\\n    );\\n\\n    constructor(\\n        address landAddress,\\n        address erc20ContractAddress,\\n        address initialMetaTx,\\n        address admin,\\n        address payable initialWalletAddress,\\n        bytes32 merkleRoot,\\n        uint256 expiryTime\\n    ) public {\\n        _land = Land(landAddress);\\n        _erc20 = ERC20(erc20ContractAddress);\\n        _setMetaTransactionProcessor(initialMetaTx, true);\\n        _admin = admin;\\n        _wallet = initialWalletAddress;\\n        _merkleRoot = merkleRoot;\\n        _expiryTime = expiryTime;\\n    }\\n\\n    /// @notice set the wallet receiving the proceeds\\n    /// @param newWallet address of the new receiving wallet\\n    function setReceivingWallet(address payable newWallet) external{\\n        require(newWallet != address(0), \\\"receiving wallet cannot be zero address\\\");\\n        require(msg.sender == _admin, \\\"only admin can change the receiving wallet\\\");\\n        _wallet = newWallet;\\n    }\\n\\n    /**\\n     * @notice buy Land using the merkle proof associated with it\\n     * @param buyer address that perform the payment\\n     * @param to address that will own the purchased Land\\n     * @param reserved the reserved address (if any)\\n     * @param x x coordinate of the Land\\n     * @param y y coordinate of the Land\\n     * @param size size of the pack of Land to purchase\\n     * @param price amount of Sand to purchase that Land\\n     * @param proof merkleProof for that particular Land\\n     * @return The address of the operator\\n     */\\n    function buyLand(\\n        address buyer,\\n        address to,\\n        address reserved,\\n        uint16 x,\\n        uint16 y,\\n        uint16 size,\\n        uint256 price,\\n        bytes32 salt,\\n        bytes32[] calldata proof\\n    ) external {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(block.timestamp < _expiryTime, \\\"sale is over\\\");\\n        require(buyer == msg.sender || _metaTransactionContracts[msg.sender], \\\"not authorized\\\");\\n        require(reserved == address(0) || reserved == buyer, \\\"cannot buy reserved Land\\\");\\n        bytes32 leaf = _generateLandHash(x, y, size, price, reserved, salt);\\n\\n        require(\\n            _verify(proof, leaf),\\n            \\\"Invalid land provided\\\"\\n        );\\n\\n        require(\\n            _erc20.transferFrom(\\n                buyer,\\n                _wallet,\\n                price\\n            ),\\n            \\\"erc20 transfer failed\\\"\\n        );\\n\\n        _land.mintQuad(to, size, x, y);\\n        emit LandQuadPurchased(buyer, to, x + (y * GRID_SIZE), size, price);\\n    }\\n\\n    /**\\n     * @notice Gets the expiry time for the current sale\\n     * @return The expiry time, as a unix epoch\\n     */\\n    function getExpiryTime() external view returns(uint256) {\\n        return _expiryTime;\\n    }\\n\\n    /**\\n     * @notice Gets the Merkle root associated with the current sale\\n     * @return The Merkle root, as a bytes32 hash\\n     */\\n    function merkleRoot() external view returns(bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    function _generateLandHash(\\n        uint16 x,\\n        uint16 y,\\n        uint16 size,\\n        uint256 price,\\n        address reserved,\\n        bytes32 salt\\n    ) internal pure returns (\\n        bytes32\\n    ) {\\n        return keccak256(\\n            abi.encodePacked(\\n                x,\\n                y,\\n                size,\\n                price,\\n                reserved,\\n                salt\\n            )\\n        );\\n    }\\n\\n    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash < proofElement) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        return computedHash == _merkleRoot;\\n    }\\n}\\n\",\"keccak256\":\"0x21b7f46fbb065989cd22887f1472eeea5cdfb58e6b6d2892284b331017e44618\"}},\"version\":1}",
    "userdoc": {
      "methods": {
        "buyLand(address,address,address,uint16,uint16,uint16,uint256,bytes32,bytes32[])": {
          "notice": "buy Land using the merkle proof associated with it"
        },
        "changeAdmin(address)": {
          "notice": "change the administrator to be `newAdmin`."
        },
        "getAdmin()": {
          "notice": "gives the current administrator of this contract."
        },
        "getExpiryTime()": {
          "notice": "Gets the expiry time for the current sale"
        },
        "isMetaTransactionProcessor(address)": {
          "notice": "check whether address `who` is given meta-transaction execution rights."
        },
        "merkleRoot()": {
          "notice": "Gets the Merkle root associated with the current sale"
        },
        "setMetaTransactionProcessor(address,bool)": {
          "notice": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights)."
        },
        "setReceivingWallet(address)": {
          "notice": "set the wallet receiving the proceeds"
        }
      },
      "notice": "This contract mananges the sale of our lands"
    }
  },
  "args": [
    "0xaa209e1eCcC9e1E856c18BD8B8ce5f2dd25CecC0",
    "0xCc933a862fc15379E441F2A16Cb943D385a4695f",
    "0xCc933a862fc15379E441F2A16Cb943D385a4695f",
    "0xcbc70EcCd52bF3910CDC1455E6D2Bd45725F573D",
    "0xcbc70EcCd52bF3910CDC1455E6D2Bd45725F573D",
    "0xc447105b63f5eaf9e8be798534fa9f221e7d60ba55366786aaf9a75d81cd3d75",
    1576783207
  ],
  "address": "0xBe16165Ef49974c49863BB0fD8aE4A71C7E21Bc8",
  "transactionHash": "0x020ab7a2ef1c00b8e7f7f0424fd367fd36d8a4baeee3a12b28b250979bf05a41",
  "data": [
    {
      "x": 400,
      "y": 106,
      "size": 1,
      "price": "2000000000000000000000",
      "salt": "0x033e7a6d406d403b819e88d15be0f1bc505412a8963f2f5a841c3ea6bcf5b292"
    },
    {
      "x": 99,
      "y": 99,
      "size": 3,
      "price": "17100000000000000000000",
      "salt": "0x60d863ec6551d1d91d10979fc8e599e9eba46bfc69c2b695b42ca61306e0b7d3"
    },
    {
      "x": 120,
      "y": 144,
      "size": 12,
      "price": "244800000000000000000000",
      "salt": "0xcbe932c30c5a80da68e03feb2e5cf32f10d416a953801bba11396481b1a43e7c"
    },
    {
      "x": 288,
      "y": 144,
      "size": 12,
      "price": "244800000000000000000000",
      "salt": "0x05096f4e5205bfad94933468ea94fd378cab92d003d5c1222da03ca3945c04d4"
    },
    {
      "x": 36,
      "y": 114,
      "size": 6,
      "price": "64800000000000000000000",
      "salt": "0x1fd61209b57ec15b28cf2cbf51ca5c8026988b52ecb5ca1c6f5c724daf13b80b"
    },
    {
      "x": 308,
      "y": 282,
      "size": 1,
      "price": "2000000000000000000000",
      "salt": "0xcf82623bbeef9b3df8ebf562b2f0547c56ae13d88a472ead8190a9558baf5e23"
    },
    {
      "x": 308,
      "y": 281,
      "size": 1,
      "price": "2000000000000000000000",
      "salt": "0xcc0b538f95dbadbb45acfc00730b65d63c1e51aad71d517cbf31658aa94b8b59"
    }
  ]
}