{
  "contractInfo": {
    "abi": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_creator",
            "type": "address"
          },
          {
            "name": "_packId",
            "type": "uint48"
          },
          {
            "name": "_hash",
            "type": "bytes32"
          },
          {
            "name": "_supply",
            "type": "uint32"
          },
          {
            "name": "_rarity",
            "type": "uint8"
          },
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "mintFor",
        "outputs": [
          {
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0x28b75a2f"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_creator",
            "type": "address"
          },
          {
            "name": "_packId",
            "type": "uint48"
          },
          {
            "name": "_hash",
            "type": "bytes32"
          },
          {
            "name": "_supplies",
            "type": "uint256[]"
          },
          {
            "name": "_rarityPack",
            "type": "bytes"
          },
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "mintMultipleFor",
        "outputs": [
          {
            "name": "tokenIds",
            "type": "uint256[]"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0xd421e1aa"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "name": "_packId",
            "type": "uint48"
          },
          {
            "name": "_hash",
            "type": "bytes32"
          },
          {
            "name": "_newRarity",
            "type": "uint8"
          },
          {
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "updateERC721",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0xef4c2c3f"
      },
      {
        "inputs": [
          {
            "name": "_asset",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor",
        "signature": "constructor"
      }
    ],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b5060405161072f38038061072f8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556106ca806100656000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806328b75a2f14610046578063d421e1aa146100bc578063ef4c2c3f1461027f575b600080fd5b6100aa600480360360c081101561005c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169165ffffffffffff6020820135169160408201359163ffffffff6060820135169160ff6080830135169160a00135166102dd565b60408051918252519081900360200190f35b61022f600480360360c08110156100d257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169165ffffffffffff602082013516916040820135919081019060808101606082013564010000000081111561011e57600080fd5b82018360208201111561013057600080fd5b8035906020019184602083028401116401000000008311171561015257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101a257600080fd5b8201836020820111156101b457600080fd5b803590602001918460018302840111640100000000831117156101d657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903573ffffffffffffffffffffffffffffffffffffffff1691506103ca9050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561026b578181015183820152602001610253565b505050509050019250505060405180910390f35b6100aa600480360360c081101561029557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359165ffffffffffff6040830135169160608101359160ff6080830135169160a00135166105e4565b60008054604080517f7ef2e40c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015265ffffffffffff8a1660248301526044820189905263ffffffff8816606483015260ff8716608483015285811660a483015260e060c483015260e4820185905291519190921691637ef2e40c9161012480830192602092919082900301818787803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050506040513d60208110156103bd57600080fd5b5051979650505050505050565b600080546040517f7b43449400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830190815265ffffffffffff8a1660248401526044830189905285821660a484015260e060648401908152885160e485015288516060969390951694637b434494948d948d948d948d948d948d94608482019260c483019261010401916020808b019202908190849084905b8381101561049257818101518382015260200161047a565b50505050905001848103835286818151815260200191508051906020019080838360005b838110156104ce5781810151838201526020016104b6565b50505050905090810190601f1680156104fb5780820380516001836020036101000a031916815260200191505b508481038252600081526020016020019950505050505050505050600060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561058b57600080fd5b8101908080516401000000008111156105a357600080fd5b820160208101848111156105b657600080fd5b81518560208202830111640100000000821117156105d357600080fd5b50909b9a5050505050505050505050565b60008054604080517f0d4d284600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905265ffffffffffff891660448301526064820188905260ff8716608483015285811660a483015260e060c483015260e4820185905291519190921691630d4d28469161012480830192602092919082900301818787803b15801561039357600080fdfea265627a7a72305820c1ffe4b2a71a9e41b8a1cde61b28ec574567c9c5351702171005215adfe5be1364736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x72F CODESIZE SUB DUP1 PUSH2 0x72F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x6CA DUP1 PUSH2 0x65 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x28B75A2F EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xD421E1AA EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xEF4C2C3F EQ PUSH2 0x27F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH6 0xFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH4 0xFFFFFFFF PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0xFF PUSH1 0x80 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 ADD CALLDATALOAD AND PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x22F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD AND SWAP2 PUSH6 0xFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x80 DUP2 ADD PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP POP SWAP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x3CA SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x253 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xFF PUSH1 0x80 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 ADD CALLDATALOAD AND PUSH2 0x5E4 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x7EF2E40C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH6 0xFFFFFFFFFFFF DUP11 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP10 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP9 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x84 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0xA4 DUP4 ADD MSTORE PUSH1 0xE0 PUSH1 0xC4 DUP4 ADD MSTORE PUSH1 0xE4 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x7EF2E40C SWAP2 PUSH2 0x124 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7B43449400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD SWAP1 DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP11 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD DUP10 SWAP1 MSTORE DUP6 DUP3 AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0xE0 PUSH1 0x64 DUP5 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD PUSH1 0xE4 DUP6 ADD MSTORE DUP9 MLOAD PUSH1 0x60 SWAP7 SWAP4 SWAP1 SWAP6 AND SWAP5 PUSH4 0x7B434494 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 PUSH1 0x84 DUP3 ADD SWAP3 PUSH1 0xC4 DUP4 ADD SWAP3 PUSH2 0x104 ADD SWAP2 PUSH1 0x20 DUP1 DUP12 ADD SWAP3 MUL SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x492 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x47A JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4CE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4B6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4FB JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP5 DUP2 SUB DUP3 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x20 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x544 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x20 DUP2 ADD DUP5 DUP2 GT ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP6 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xD4D284600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP11 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP10 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x84 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0xA4 DUP4 ADD MSTORE PUSH1 0xE0 PUSH1 0xC4 DUP4 ADD MSTORE PUSH1 0xE4 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD4D2846 SWAP2 PUSH2 0x124 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xc1 SELFDESTRUCT 0xe4 0xb2 0xa7 BYTE SWAP15 COINBASE 0xb8 LOG1 0xcd 0xe6 SHL 0x28 0xec JUMPI GASLIMIT PUSH8 0xC9C5351702171005 0x21 GAS 0xdf 0xe5 0xbe SGT PUSH5 0x736F6C6343 STOP SDIV MULMOD STOP ORIGIN ",
        "sourceMap": "109:1389:74:-;;;178:84;8:9:-1;5:2;;;30:1;27;20:12;5:2;178:84:74;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;178:84:74;241:5;:14;;-1:-1:-1;;;;;241:14:74;;;-1:-1:-1;;;;;;241:14:74;;;;;;;;;109:1389;;;;;;"
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806328b75a2f14610046578063d421e1aa146100bc578063ef4c2c3f1461027f575b600080fd5b6100aa600480360360c081101561005c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169165ffffffffffff6020820135169160408201359163ffffffff6060820135169160ff6080830135169160a00135166102dd565b60408051918252519081900360200190f35b61022f600480360360c08110156100d257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169165ffffffffffff602082013516916040820135919081019060808101606082013564010000000081111561011e57600080fd5b82018360208201111561013057600080fd5b8035906020019184602083028401116401000000008311171561015257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101a257600080fd5b8201836020820111156101b457600080fd5b803590602001918460018302840111640100000000831117156101d657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903573ffffffffffffffffffffffffffffffffffffffff1691506103ca9050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561026b578181015183820152602001610253565b505050509050019250505060405180910390f35b6100aa600480360360c081101561029557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359165ffffffffffff6040830135169160608101359160ff6080830135169160a00135166105e4565b60008054604080517f7ef2e40c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015265ffffffffffff8a1660248301526044820189905263ffffffff8816606483015260ff8716608483015285811660a483015260e060c483015260e4820185905291519190921691637ef2e40c9161012480830192602092919082900301818787803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050506040513d60208110156103bd57600080fd5b5051979650505050505050565b600080546040517f7b43449400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830190815265ffffffffffff8a1660248401526044830189905285821660a484015260e060648401908152885160e485015288516060969390951694637b434494948d948d948d948d948d948d94608482019260c483019261010401916020808b019202908190849084905b8381101561049257818101518382015260200161047a565b50505050905001848103835286818151815260200191508051906020019080838360005b838110156104ce5781810151838201526020016104b6565b50505050905090810190601f1680156104fb5780820380516001836020036101000a031916815260200191505b508481038252600081526020016020019950505050505050505050600060405180830381600087803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561058b57600080fd5b8101908080516401000000008111156105a357600080fd5b820160208101848111156105b657600080fd5b81518560208202830111640100000000821117156105d357600080fd5b50909b9a5050505050505050505050565b60008054604080517f0d4d284600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905265ffffffffffff891660448301526064820188905260ff8716608483015285811660a483015260e060c483015260e4820185905291519190921691630d4d28469161012480830192602092919082900301818787803b15801561039357600080fdfea265627a7a72305820c1ffe4b2a71a9e41b8a1cde61b28ec574567c9c5351702171005215adfe5be1364736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x28B75A2F EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xD421E1AA EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xEF4C2C3F EQ PUSH2 0x27F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH6 0xFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH4 0xFFFFFFFF PUSH1 0x60 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0xFF PUSH1 0x80 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 ADD CALLDATALOAD AND PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x22F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD AND SWAP2 PUSH6 0xFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x80 DUP2 ADD PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x11E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP POP SWAP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x3CA SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x253 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH6 0xFFFFFFFFFFFF PUSH1 0x40 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0xFF PUSH1 0x80 DUP4 ADD CALLDATALOAD AND SWAP2 PUSH1 0xA0 ADD CALLDATALOAD AND PUSH2 0x5E4 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x7EF2E40C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH6 0xFFFFFFFFFFFF DUP11 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP10 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP9 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x84 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0xA4 DUP4 ADD MSTORE PUSH1 0xE0 PUSH1 0xC4 DUP4 ADD MSTORE PUSH1 0xE4 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x7EF2E40C SWAP2 PUSH2 0x124 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7B43449400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD SWAP1 DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP11 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD DUP10 SWAP1 MSTORE DUP6 DUP3 AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0xE0 PUSH1 0x64 DUP5 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD PUSH1 0xE4 DUP6 ADD MSTORE DUP9 MLOAD PUSH1 0x60 SWAP7 SWAP4 SWAP1 SWAP6 AND SWAP5 PUSH4 0x7B434494 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 DUP14 SWAP5 PUSH1 0x84 DUP3 ADD SWAP3 PUSH1 0xC4 DUP4 ADD SWAP3 PUSH2 0x104 ADD SWAP2 PUSH1 0x20 DUP1 DUP12 ADD SWAP3 MUL SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x492 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x47A JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4CE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4B6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x4FB JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP5 DUP2 SUB DUP3 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x20 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x544 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x20 DUP2 ADD DUP5 DUP2 GT ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP6 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xD4D284600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP11 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP10 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x84 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0xA4 DUP4 ADD MSTORE PUSH1 0xE0 PUSH1 0xC4 DUP4 ADD MSTORE PUSH1 0xE4 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD4D2846 SWAP2 PUSH2 0x124 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xc1 SELFDESTRUCT 0xe4 0xb2 0xa7 BYTE SWAP15 COINBASE 0xb8 LOG1 0xcd 0xe6 SHL 0x28 0xec JUMPI GASLIMIT PUSH8 0xC9C5351702171005 0x21 GAS 0xdf 0xe5 0xbe SGT PUSH5 0x736F6C6343 STOP SDIV MULMOD STOP ORIGIN ",
        "sourceMap": "109:1389:74:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;109:1389:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;268:302;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;268:302:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;576:483;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;576:483:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;576:483:74;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;576:483:74;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;576:483:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;576:483:74;;;;;;;;-1:-1:-1;576:483:74;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;576:483:74;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;576:483:74;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;576:483:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;576:483:74;;-1:-1:-1;;;576:483:74;;;;;-1:-1:-1;576:483:74;;-1:-1:-1;576:483:74:i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;576:483:74;;;;;;;;;;;;;;;;;1065:431;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;1065:431:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;268:302::-;451:15;497:5;;:66;;;;;;:5;:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:5;;;;;:10;;:66;;;;;;;;;;;;;;451:15;497:5;:66;;;5:2:-1;;;;30:1;27;20:12;5:2;497:66:74;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;497:66:74;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;497:66:74;;268:302;-1:-1:-1;;;;;;;268:302:74:o;576:483::-;846:5;;;:206;;;;;:5;:206;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;790:25;;846:5;;;;;:18;;882:8;;908:7;;933:5;;956:9;;983:11;;1012:6;;846:206;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;846:206:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;846:206:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;846:206:74;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;846:206:74;;;;;;39:16:-1;36:1;17:17;2:54;101:4;846:206:74;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;846:206:74;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;-1:-1;846:206:74;;576:483;-1:-1:-1;;;;;;;;;;;576:483:74:o;1065:431::-;1253:7;1291:5;;:198;;;;;;:5;:198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:5;;;;;:18;;:198;;;;;;;;;;;;;;1253:7;1291:5;:198;;;5:2:-1;;;;30:1;27;20:12"
      },
      "methodIdentifiers": {
        "mintFor(address,uint48,bytes32,uint32,uint8,address)": "28b75a2f",
        "mintMultipleFor(address,uint48,bytes32,uint256[],bytes,address)": "d421e1aa",
        "updateERC721(address,uint256,uint48,bytes32,uint8,address)": "ef4c2c3f"
      }
    },
    "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_packId\",\"type\":\"uint48\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_supply\",\"type\":\"uint32\"},{\"name\":\"_rarity\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintFor\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_packId\",\"type\":\"uint48\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_supplies\",\"type\":\"uint256[]\"},{\"name\":\"_rarityPack\",\"type\":\"bytes\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintMultipleFor\",\"outputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_packId\",\"type\":\"uint48\"},{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_newRarity\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"updateERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/Test/TestBouncer.sol\":\"TestBouncer\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts_common/src/BaseWithStorage/Admin.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract Admin {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0x74418caab05cca3fe5b9309ab069a9bfe327ff96f593a347e1f1cc0c02f25693\"},\"contracts_common/src/BaseWithStorage/SuperOperators.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract SuperOperators is Admin {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin is allowed to add super operators\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x22354cf60ccf77a6de61c13bdaf4e3094d115b960ae563b0527622c846a12abb\"},\"contracts_common/src/Interfaces/ERC1155.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n    @title ERC-1155 Multi Token Standard\\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\n */\\ninterface ERC1155 {\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n        @notice Transfers `value` amount of an `id` from  `from` to `to`  (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `to` is the zero address.\\n        MUST revert if balance of holder for token `id` is lower than the `value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param from    Source address\\n        @param to      Target address\\n        @param id      ID of the token type\\n        @param value   Transfer amount\\n        @param data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `to`\\n    */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `to` is the zero address.\\n        MUST revert if length of `ids` is not the same as length of `values`.\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `ids` is lower than the respective amount(s) in `values` sent to the recipient.\\n        MUST revert on any other error.\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param from    Source address\\n        @param to      Target address\\n        @param ids     IDs of each token type (order and length must match _values array)\\n        @param values  Transfer amounts per token type (order and length must match _ids array)\\n        @param data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `to`\\n    */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Get the balance of an account's tokens.\\n        @param owner  The address of the token holder\\n        @param id     ID of the token\\n        @return        The _owner's balance of the token type requested\\n     */\\n    function balanceOf(address owner, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @notice Get the balance of multiple account/token pairs\\n        @param owners The addresses of the token holders\\n        @param ids    ID of the tokens\\n        @return        The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n        @dev MUST emit the ApprovalForAll event on success.\\n        @param operator  Address to add to the set of authorized operators\\n        @param approved  True if the operator is approved, false to revoke approval\\n    */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n        @notice Queries the approval status of an operator for a given owner.\\n        @param owner     The owner of the tokens\\n        @param operator  Address of authorized operator\\n        @return           True if the operator is approved, false if not\\n    */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xadc315968f24479f9e6e5cbdfb32a3a8d6b83061afb0680ad3a73959e40e447f\"},\"contracts_common/src/Interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface ERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param from      The address which previously owned the token\\n        @param id        The ID of the token being transferred\\n        @param value     The amount of tokens being transferred\\n        @param data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from      The address which previously owned the token\\n        @param ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x915c81f5684876945b81020f620aa6261a7bf3a1bf0c07f1eada0e88200872de\"},\"contracts_common/src/Interfaces/ERC165.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC165\\n * @dev https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface ERC165 {\\n    /**\\n   * @notice Query if a contract implements interface `interfaceId`\\n   * @param interfaceId The interface identifier, as specified in ERC-165\\n   * @dev Interface identification is specified in ERC-165. This function\\n   * uses less than 30,000 gas.\\n   */\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x69a77aa77ec14f7bc3a1c40aff5bbe828548087ba23b2cc9c99ba6e24f2997c5\"},\"contracts_common/src/Interfaces/ERC721.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./ERC721Events.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\n/*interface*/\\ncontract ERC721 is ERC165, ERC721Events {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    //   function exists(uint256 tokenId) external view returns (bool exists);\\n\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 tokenId)\\n        external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\n        external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5dabbd4bf78518acf2f1f2fd431ad7d16526b0de409aa91010d02869fb3eb302\"},\"contracts_common/src/Interfaces/ERC721Events.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface ERC721Events {\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n}\\n\",\"keccak256\":\"0xdf0051d52413d5e853a9801d5745337e4040949b31568cc17ca50f8853e10567\"},\"contracts_common/src/Interfaces/ERC721TokenReceiver.sol\":{\"content\":\"/* This Source Code Form is subject to the terms of the Mozilla Public\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\\n *\\n * This code has not been reviewed.\\n * Do not use or deploy this code before reviewing it personally first.\\n */\\n// solhint-disable-next-line compiler-fixed\\npragma solidity ^0.5.2;\\n\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x94e7441c07cb2f97b9b5be8ca5a5f76623615963852aa5e20208b8cbcb33c1ce\"},\"contracts_common/src/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary AddressUtils {\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8eb19b2645f05d24a8b8f0c1a253acbef6c8b5d619b03b760405e27ec6546570\"},\"contracts_common/src/Libraries/ObjectLib32.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary ObjectLib32 {\\n    using SafeMath for uint256;\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /**\\n  * @dev Return the bin number and index within that bin where ID is\\n  * @param tokenId Object type\\n  * @return (Bin number, ID's index within that bin)\\n  */\\n    function getTokenBinIndex(uint256 tokenId)\\n        internal\\n        pure\\n        returns (uint256 bin, uint256 index)\\n    {\\n        bin = (tokenId * TYPES_BITS_SIZE) / 256;\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n  * @dev update the balance of a type provided in binBalances\\n  * @param binBalances Uint256 containing the balances of objects\\n  * @param index Index of the object in the provided bin\\n  * @param amount Value to update the type balance\\n  * @param operation Which operation to conduct :\\n  *     Operations.REPLACE : Replace type balance with amount\\n  *     Operations.ADD     : ADD amount to type balance\\n  *     Operations.SUB     : Substract amount from type balance\\n  */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(\\n                binBalances,\\n                index,\\n                objectBalance.add(amount)\\n            );\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(\\n                binBalances,\\n                index,\\n                objectBalance.sub(amount)\\n            );\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n    /*\\n  * @dev return value in binValue at position index\\n  * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n  * @param index index at which to retrieve value\\n  * @return Value at given index in bin\\n  */\\n    function getValueInBin(uint256 binValue, uint256 index)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n  * @dev return the updated binValue after writing amount at index\\n  * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n  * @param index Index at which to retrieve value\\n  * @param amount Value to store at index in bin\\n  * @return Value at given index in bin\\n  */\\n    function writeValueInBin(uint256 binValue, uint256 index, uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(\\n            amount < 2**TYPES_BITS_SIZE,\\n            \\\"Amount to write in bin is too large\\\"\\n        );\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1008eed28bf3c12b3d9f7e4136a2700cb34540a8bccf5295a16d5d48846ff02b\"},\"contracts_common/src/Libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x55d3e77e8ca8c1f47ed120ef7a1b288e999c2bdb7a508dfa533494f9b9849002\"},\"src/Asset/ERC1155ERC721.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"../../contracts_common/src/Interfaces/ERC1155.sol\\\";\\nimport \\\"../../contracts_common/src/Interfaces/ERC1155TokenReceiver.sol\\\";\\n\\nimport \\\"../../contracts_common/src/Libraries/AddressUtils.sol\\\";\\nimport \\\"../../contracts_common/src/Libraries/ObjectLib32.sol\\\";\\n\\nimport \\\"../../contracts_common/src/Interfaces/ERC721.sol\\\";\\nimport \\\"../../contracts_common/src/Interfaces/ERC721TokenReceiver.sol\\\";\\n\\nimport \\\"../../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\n\\ncontract ERC1155ERC721 is SuperOperators, ERC1155, ERC721 {\\n    // LIBRARIES /////////////////////////////////////////////////////////////////////////\\n    using AddressUtils for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    // CONSTANTS //////////////////////////////////////////////////////////////////////////////////\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\\n\\n    uint256 private constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 private constant IS_NFT_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1);\\n    uint256 private constant PACK_ID_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 1 - 32 - 48);\\n    uint256 private constant NFT_INDEX_OFFSET = 63;\\n\\n    uint256 private constant IS_NFT = 0x0000000000000000000000000000000000000000800000000000000000000000;\\n    uint256 private constant NOT_IS_NFT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 private constant NFT_INDEX = 0x00000000000000000000000000000000000000007FFFFFFF8000000000000000;\\n    uint256 private constant NOT_NFT_INDEX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000007FFFFFFFFFFFFFFF;\\n    uint256 private constant URI_ID = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000007FFFFFFFFFFF8000;\\n    uint256 private constant PACK_INDEX = 0x0000000000000000000000000000000000000000000000000000000000007FFF;\\n\\n    uint256 private constant MAX_SUPPLY = uint256(2)**32 - 1;\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    event CreatorshipTransfer(\\n        address indexed original,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    // STORAGE /////////////////////////////////////////////////////////////////////////////////////\\n    mapping(address => uint256) private _numNFTPerAddress; // erc721\\n    mapping(uint256 => address) private _owners; // erc721\\n    mapping(address => mapping(uint256 => uint256)) private _packedTokenBalance; // erc1155\\n    mapping(address => mapping(address => bool)) private _operatorsForAll; // erc721 and erc1155\\n    mapping(uint256 => address) private _erc721operators; // erc721\\n    mapping(uint256 => bytes32) private _metadataHash; // erc721 and erc1155\\n    mapping(uint256 => bytes) private _rarityPacks; // rarity configuration per packs (2 bits per Asset)\\n    mapping(uint256 => uint32) private _nextCollectionIndex; // extraction\\n\\n    mapping(address => address) private _creatorship; // creatorship transfer\\n\\n    mapping(address => bool) private _bouncers; // the contract allowed to mint\\n    mapping(address => bool) private _metaTransactionContracts; // native meta-transaction support\\n\\n    address private _bouncerAdmin;\\n    ///////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin,\\n        address bouncerAdmin\\n    ) public {\\n        _metaTransactionContracts[metaTransactionContract] = true;\\n        _admin = admin;\\n        _bouncerAdmin = bouncerAdmin;\\n        emit MetaTransactionProcessor(metaTransactionContract, true);\\n    }\\n\\n    event BouncerAdminChanged(address oldBouncerAdmin, address newBouncerAdmin);\\n\\n    /// @notice Returns the current administrator in charge of minting.\\n    /// @return the current minting administrator in charge of minting.\\n    function getBouncerAdmin() external view returns(address) {\\n        return _bouncerAdmin;\\n    }\\n\\n    /// @notice Change the minting administrator to be `newBouncerAdmin`.\\n    /// @param newBouncerAdmin address of the new minting administrator.\\n    function changeBouncerAdmin(address newBouncerAdmin) external {\\n        require(\\n            msg.sender == _bouncerAdmin,\\n            \\\"only bouncerAdmin can change itself\\\"\\n        );\\n        emit BouncerAdminChanged(_bouncerAdmin, newBouncerAdmin);\\n        _bouncerAdmin = newBouncerAdmin;\\n    }\\n\\n    event Bouncer(address bouncer, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `bouncer` to mint tokens (minting bouncer rights).\\n    /// @param bouncer address that will be given/removed minting bouncer rights.\\n    /// @param enabled set whether the address is enabled or disabled as a minting bouncer.\\n    function setBouncer(address bouncer, bool enabled) external {\\n        require(\\n            msg.sender == _bouncerAdmin,\\n            \\\"only bouncerAdmin can setup bouncers\\\"\\n        );\\n        _bouncers[bouncer] = enabled;\\n        emit Bouncer(bouncer, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given minting bouncer rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minting rights.\\n    function isBouncer(address who) external view returns(bool) {\\n        return _bouncers[who];\\n    }\\n\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin can setup metaTransactionProcessors\\\"\\n        );\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns(bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n\\n    /// @notice Mint a token type for `creator` on slot `packId`.\\n    /// @param creator address of the creator of the token.\\n    /// @param packId unique packId for that token.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of the token type in the file 0.json.\\n    /// @param supply number of tokens minted for that token type.\\n    /// @param rarity rarity power of the token.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return the id of the newly minted token type.\\n    function mint(\\n        address creator,\\n        uint48 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id) {\\n        require(hash != 0, \\\"invalid hash\\\");\\n        require(_bouncers[msg.sender], \\\"only bouncer allowed to mint\\\");\\n        require(owner != address(0), \\\"Invalid owner\\\");\\n        id = generateTokenId(creator, supply, packId, 0);\\n        _mint(\\n            hash,\\n            supply,\\n            rarity,\\n            msg.sender,\\n            owner,\\n            id,\\n            data,\\n            false\\n        );\\n    }\\n\\n    function generateTokenId(\\n        address creator,\\n        uint256 supply,\\n        uint48 packId,\\n        uint16 packIndex\\n    ) internal pure returns (uint256) {\\n        require(supply > 0 && supply <= MAX_SUPPLY, \\\"invalid supply\\\");\\n\\n        return\\n            uint256(creator) * CREATOR_OFFSET_MULTIPLIER + // CREATOR\\n            (supply == 1 ? uint256(1) * IS_NFT_OFFSET_MULTIPLIER : 0) + // minted as NFT (1) or FT (0) // IS_NFT\\n            uint256(packId) * PACK_ID_OFFSET_MULTIPLIER + // packId (unique pack) // PACk_ID\\n            packIndex; // packIndex (position in the pack) // PACK_INDEX\\n    }\\n\\n    function _mint(\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address operator,\\n        address owner,\\n        uint256 id,\\n        bytes memory data,\\n        bool extraction\\n    ) internal {\\n        uint256 uriId = id & URI_ID;\\n        if (!extraction) {\\n            require(uint256(_metadataHash[uriId]) == 0, \\\"id already used\\\");\\n            _metadataHash[uriId] = hash;\\n            require(rarity < 4, \\\"rarity >= 4\\\");\\n            bytes memory pack = new bytes(1);\\n            pack[0] = bytes1(rarity * 64);\\n            _rarityPacks[uriId] = pack;\\n        }\\n        if (supply == 1) {\\n            // ERC721\\n            _numNFTPerAddress[owner]++;\\n            _owners[id] = owner;\\n            emit Transfer(address(0), owner, id);\\n        } else {\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[owner][bin] = _packedTokenBalance[owner][bin]\\n                .updateTokenBalance(\\n                index,\\n                supply,\\n                ObjectLib32.Operations.REPLACE\\n            );\\n        }\\n\\n        emit TransferSingle(operator, address(0), owner, id, supply);\\n        require(\\n            _checkERC1155AndCallSafeTransfer(\\n                operator,\\n                address(0),\\n                owner,\\n                id,\\n                supply,\\n                data,\\n                false,\\n                false\\n            ),\\n            \\\"transfer rejected\\\"\\n        );\\n    }\\n\\n    /// @notice Mint multiple token types for `creator` on slot `packId`.\\n    /// @param creator address of the creator of the tokens.\\n    /// @param packId unique packId for the tokens.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of each token type in the files: 0.json, 1.json, 2.json, etc...\\n    /// @param supplies number of tokens minted for each token type.\\n    /// @param rarityPack rarity power of each token types packed into 2 bits each.\\n    /// @param owner address that will receive the tokens.\\n    /// @param data extra data to accompany the minting call.\\n    /// @return the ids of each newly minted token types.\\n    function mintMultiple(\\n        address creator,\\n        uint48 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids) {\\n        require(hash != 0, \\\"invalid hash\\\");\\n        require(_bouncers[msg.sender], \\\"only bouncer allowed to mint\\\");\\n        require(owner != address(0), \\\"Invalid owner\\\");\\n        uint16 numNFTs;\\n        (ids, numNFTs) = allocateIds(\\n            creator,\\n            supplies,\\n            rarityPack,\\n            packId,\\n            hash\\n        );\\n        _mintBatches(supplies, owner, ids, numNFTs);\\n        completeMultiMint(msg.sender, owner, ids, supplies, data);\\n    }\\n\\n    function allocateIds(\\n        address creator,\\n        uint256[] memory supplies,\\n        bytes memory rarityPack,\\n        uint48 packId,\\n        bytes32 hash\\n    ) internal returns (uint256[] memory ids, uint16 numNFTs) {\\n        require(supplies.length > 0, \\\"supplies.length == 0\\\");\\n        (ids, numNFTs) = generateTokenIds(creator, supplies, packId);\\n        uint256 uriId = ids[0] & URI_ID;\\n        require(uint256(_metadataHash[uriId]) == 0, \\\"id already used\\\");\\n        _metadataHash[uriId] = hash;\\n        _rarityPacks[uriId] = rarityPack;\\n    }\\n\\n    function generateTokenIds(\\n        address creator,\\n        uint256[] memory supplies,\\n        uint48 packId\\n    ) internal pure returns (uint256[] memory, uint16) {\\n        require(supplies.length < 2**15, \\\"too big batch\\\");\\n        uint256[] memory ids = new uint256[](supplies.length);\\n        uint16 numNFTs = 0;\\n        for (uint16 i = 0; i < supplies.length; i++) {\\n            if (numNFTs == 0) {\\n                if (supplies[i] == 1) {\\n                    numNFTs = uint16(supplies.length - i);\\n                }\\n            } else {\\n                require(supplies[i] == 1, \\\"nft need to be put at the end\\\");\\n            }\\n            ids[i] = generateTokenId(creator, supplies[i], packId, i);\\n        }\\n        return (ids, numNFTs);\\n    }\\n\\n    function completeMultiMint(\\n        address operator,\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory supplies,\\n        bytes memory data\\n    ) internal {\\n        emit TransferBatch(operator, address(0), owner, ids, supplies);\\n        require(\\n            _checkERC1155AndCallSafeBatchTransfer(\\n                operator,\\n                address(0),\\n                owner,\\n                ids,\\n                supplies,\\n                data\\n            ),\\n            \\\"transfer rejected\\\"\\n        );\\n    }\\n\\n    function _mintBatches(\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids,\\n        uint16 numNFTs\\n    ) internal {\\n        uint16 offset = 0;\\n        while (offset < supplies.length - numNFTs) {\\n            _mintBatch(offset, supplies, owner, ids);\\n            offset += 8;\\n        }\\n        // deal with NFT last. they do not care of balance packing\\n        if (numNFTs > 0) {\\n            _mintNFTs(\\n                uint16(supplies.length - numNFTs),\\n                numNFTs,\\n                owner,\\n                ids\\n            );\\n        }\\n    }\\n\\n    function _mintNFTs(\\n        uint16 offset,\\n        uint32 numNFTs,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        for (uint16 i = 0; i < numNFTs; i++) {\\n            uint256 id = ids[i + offset];\\n            _owners[id] = owner;\\n            emit Transfer(address(0), owner, id);\\n        }\\n        _numNFTPerAddress[owner] += numNFTs;\\n    }\\n\\n    function _mintBatch(\\n        uint16 offset,\\n        uint256[] memory supplies,\\n        address owner,\\n        uint256[] memory ids\\n    ) internal {\\n        uint256 firstId = ids[offset];\\n        (uint256 bin, uint256 index) = firstId.getTokenBinIndex();\\n        uint256 balances = _packedTokenBalance[owner][bin];\\n        for (uint256 i = 0; i < 8 && offset + i < supplies.length; i++) {\\n            uint256 j = offset + i;\\n            if (supplies[j] > 1) {\\n                balances = balances.updateTokenBalance(\\n                    index + i,\\n                    supplies[j],\\n                    ObjectLib32.Operations.REPLACE\\n                );\\n            } else {\\n                break;\\n            }\\n        }\\n        _packedTokenBalance[owner][bin] = balances;\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"Invalid to address\\\");\\n        require(from != address(0), \\\"Invalid from address\\\");\\n        if (from != msg.sender && !_metaTransactionContracts[msg.sender]) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                    _operatorsForAll[from][msg.sender] ||\\n                    _erc721operators[id] == msg.sender,\\n                \\\"Operator not approved\\\"\\n            );\\n        }\\n\\n        if (id & IS_NFT > 0) {\\n            require(_owners[id] == from, \\\"not owner\\\");\\n            require(value == 1, \\\"cannot transfer nft if amount not 1\\\");\\n            _numNFTPerAddress[from]--;\\n            _numNFTPerAddress[to]++;\\n            _owners[id] = to;\\n            _erc721operators[id] = address(0);\\n            emit Transfer(from, to, id);\\n        } else {\\n            // if different owners it will fails\\n            require(value > 0, \\\"cannot transfer 0 value\\\");\\n            (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n            _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin]\\n                .updateTokenBalance(index, value, ObjectLib32.Operations.SUB);\\n            _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin]\\n                .updateTokenBalance(index, value, ObjectLib32.Operations.ADD);\\n        }\\n\\n        emit TransferSingle(\\n            _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n            from,\\n            to,\\n            id,\\n            value\\n        );\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external {\\n        _transferFrom(from, to, id, value);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeTransfer(\\n                _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n                from,\\n                to,\\n                id,\\n                value,\\n                data,\\n                false,\\n                false\\n            ),\\n            \\\"failCheck\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, values);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeBatchTransfer(\\n                _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n                from,\\n                to,\\n                ids,\\n                values,\\n                data\\n            )\\n        );\\n    }\\n\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal {\\n        uint256 numItems = ids.length;\\n        require(numItems > 0, \\\"need at least one id\\\");\\n        require(\\n            numItems == values.length,\\n            \\\"Inconsistent array length between args\\\"\\n        );\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(from != address(0), \\\"Invalid from address\\\");\\n        bool authorized = from == msg.sender ||\\n            _superOperators[msg.sender] ||\\n            _operatorsForAll[from][msg.sender] ||\\n            _metaTransactionContracts[msg.sender]; // solium-disable-line max-len\\n\\n        uint256 bin;\\n        uint256 index;\\n        uint256 balFrom;\\n        uint256 balTo;\\n\\n        // Last bin updated\\n        uint256 lastBin;\\n        uint256 numNFTs = 0;\\n        for (uint256 i = 0; i < numItems; i++) {\\n            if (ids[i] & IS_NFT > 0) {\\n                require(\\n                    authorized || _erc721operators[ids[i]] == msg.sender,\\n                    \\\"Operator not approved\\\"\\n                );\\n                require(_owners[ids[i]] == from, \\\"not owner\\\");\\n                require(values[i] == 1, \\\"cannot transfer nft if amount not 1\\\");\\n                numNFTs++;\\n                _numNFTPerAddress[to]++;\\n                _owners[ids[i]] = to;\\n                _erc721operators[ids[i]] = address(0);\\n                emit Transfer(from, to, ids[i]);\\n            } else {\\n                require(authorized, \\\"Operator not approved\\\");\\n                require(values[i] > 0, \\\"cannot transfer 0 values\\\");\\n                (bin, index) = ids[i].getTokenBinIndex();\\n                // If first bin\\n                if (lastBin == 0) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[from][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = ObjectLib32.updateTokenBalance(\\n                        _packedTokenBalance[to][bin],\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                } else {\\n                    // If new bin\\n                    if (bin != lastBin) {\\n                        // ids need to be ordered appropriately to benefit for optimization\\n                        // Update storage balance of previous bin\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n\\n                        // Load current bin balance in memory\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n\\n                        // Bin will be the most recent bin\\n                        lastBin = bin;\\n                    }\\n\\n                    // Update memory balance\\n                    balFrom = balFrom.updateTokenBalance(\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.SUB\\n                    );\\n                    balTo = balTo.updateTokenBalance(\\n                        index,\\n                        values[i],\\n                        ObjectLib32.Operations.ADD\\n                    );\\n                }\\n            }\\n        }\\n        if (numNFTs > 0) {\\n            _numNFTPerAddress[from] -= numNFTs;\\n        }\\n\\n        if (bin != 0) { // if needed\\n            // Update storage of the last bin visited\\n            _packedTokenBalance[from][bin] = balFrom;\\n            _packedTokenBalance[to][bin] = balTo;\\n        }\\n\\n        emit TransferBatch(\\n            _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n            from,\\n            to,\\n            ids,\\n            values\\n        );\\n    }\\n\\n    /// @notice Get the balance of `owner` for the token type `id`.\\n    /// @param owner The address of the token holder.\\n    /// @param id the token type of which to get the balance of.\\n    /// @return the balance of `owner` for the token type `id`.\\n    function balanceOf(address owner, uint256 id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (id & IS_NFT > 0) {\\n            if (_owners[id] == owner) {\\n                return 1;\\n            } else {\\n                return 0;\\n            }\\n        }\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice Get the balance of `owners` for each token type `ids`.\\n    /// @param owners the addresses of the token holders queried.\\n    /// @param ids ids of each token type to query.\\n    /// @return the balance of each `owners` for each token type `ids`.\\n    function balanceOfBatch(\\n        address[] calldata owners,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory) {\\n        require(\\n            owners.length == ids.length,\\n            \\\"Inconsistent array length between args\\\"\\n        );\\n        uint256[] memory balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice Get the creator of the token type `id`.\\n    /// @dev cannot be used to test existence, will return a creator for non existing id.\\n    /// @param id the id of the token to get the creator of.\\n    /// @return the creator of the token type `id`.\\n    function creatorOf(uint256 id) external view returns (address) {\\n        address originalCreator = address(id / CREATOR_OFFSET_MULTIPLIER);\\n        address newCreator = _creatorship[originalCreator];\\n        if (newCreator != address(0)) {\\n            return newCreator;\\n        }\\n        return originalCreator;\\n    }\\n\\n    /// @notice Transfers creatorship of `original` from `sender` to `to`.\\n    /// @param sender address of current registered creator.\\n    /// @param original address of the original creator whose creation are saved in the ids themselves.\\n    /// @param to address which will be given creatorship for all tokens originally minted by `original`.\\n    function transferCreatorship(\\n        address sender,\\n        address original,\\n        address to\\n    ) external {\\n        require(\\n            msg.sender == sender ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"require meta approval\\\"\\n        );\\n        require(sender != address(0)); // solium-disable-line error-reason\\n        require(to != address(0)); // solium-disable-line error-reason\\n        address current = _creatorship[original];\\n        if (current == address(0)) {\\n            current = original;\\n        }\\n        require(current != to); // solium-disable-line error-reason\\n        require(current == sender); // solium-disable-line error-reason\\n        if (to == original) {\\n            _creatorship[original] = address(0);\\n        } else {\\n            _creatorship[original] = to;\\n        }\\n        emit CreatorshipTransfer(original, current, to);\\n    }\\n\\n    // Operators /////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Enable or disable approval for `operator` to manage all `sender`'s tokens.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender address which grant approval.\\n    /// @param operator address which will be granted rights to transfer all token owned by `sender`.\\n    /// @param approved whether to approve or revoke.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"require meta approval\\\"\\n        );\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(\\n            !_superOperators[operator],\\n            \\\"super operator can't have their approvalForAll changed\\\"\\n        );\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Queries the approval status of `operator` for owner `owner`.\\n    /// @param owner the owner of the tokens.\\n    /// @param operator address of authorized operator.\\n    /// @return true if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool isOperator)\\n    {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    // ERC721 ///////////////////////////////////////\\n\\n    /// @notice Count all NFTs assigned to `owner`.\\n    /// @param owner address for whom to query the balance.\\n    /// @return the number of NFTs owned by `owner`, possibly zero.\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        require(owner != address(0)); // solium-disable-line error-reason\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Find the owner of an NFT.\\n    /// @param id the identifier for an NFT.\\n    /// @return the address of the owner of the NFT.\\n    function ownerOf(uint256 id) external view returns (address owner) {\\n        owner = _owners[id];\\n        require(owner != address(0)); // solium-disable-line error-reason\\n    }\\n\\n    /// @notice Change or reaffirm the approved address for an NFT for `sender`.\\n    /// @dev used for Meta Transaction (from metaTransactionContract).\\n    /// @param sender the sender granting control.\\n    /// @param operator the address to approve as NFT controller.\\n    /// @param id the NFT to approve.\\n    function approveFor(address sender, address operator, uint256 id)\\n        external\\n    {\\n        address owner = _owners[id];\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        require(\\n            msg.sender == sender ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[sender][msg.sender],\\n            \\\"require operators\\\"\\n        ); // solium-disable-line max-len\\n        require(owner == sender); // solium-disable-line error-reason\\n        _erc721operators[id] = operator;\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @notice Change or reaffirm the approved address for an NFT.\\n    /// @param operator the address to approve as NFT controller.\\n    /// @param id the id of the NFT to approve.\\n    function approve(address operator, uint256 id) external {\\n        address owner = _owners[id];\\n        require(owner != address(0), \\\"token does not exist\\\");\\n        require( // solium-disable-line error-reason\\n            owner == msg.sender ||\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[owner][msg.sender]\\n        );\\n        _erc721operators[id] = operator;\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @notice Get the approved address for a single NFT.\\n    /// @param id the NFT to find the approved address for.\\n    /// @return the approved address for this NFT, or the zero address if there is none.\\n    function getApproved(uint256 id)\\n        external\\n        view\\n        returns (address operator)\\n    {\\n        require(_owners[id] != address(0)); // solium-disable-line error-reason\\n        return _erc721operators[id];\\n    }\\n\\n    /// @notice Transfers ownership of an NFT.\\n    /// @param from the current owner of the NFT.\\n    /// @param to the new owner.\\n    /// @param id the NFT to transfer.\\n    function transferFrom(address from, address to, uint256 id) external {\\n        require(to != address(0)); // solium-disable-line error-reason\\n        require(from != address(0), \\\"Invalid from address\\\");\\n        require(_owners[id] == from, \\\"not owned by from\\\"); // solium-disable-line error-reason\\n        if (msg.sender != from && !_metaTransactionContracts[msg.sender]) {\\n            require(\\n                _operatorsForAll[from][msg.sender] ||\\n                    _erc721operators[id] == msg.sender ||\\n                    _superOperators[msg.sender],\\n                \\\"Operator not approved\\\"\\n            );\\n        }\\n        _transferFrom(from, to, id, 1);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeTransfer(\\n                _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n                from,\\n                to,\\n                id,\\n                1,\\n                \\\"\\\",\\n                true,\\n                false\\n            )\\n        );\\n    }\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address.\\n    /// @param from the current owner of the NFT.\\n    /// @param to the new owner.\\n    /// @param id the NFT to transfer.\\n    function safeTransferFrom(address from, address to, uint256 id)\\n        external\\n    {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfers the ownership of an NFT from one address to another address.\\n    /// @param from the current owner of the NFT.\\n    /// @param to the new owner.\\n    /// @param id the NFT to transfer.\\n    /// @param data additional data with no specified format, sent in call to `to`.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public {\\n        require(to != address(0)); // solium-disable-line error-reason\\n        require(from != address(0), \\\"Invalid from address\\\");\\n        require(_owners[id] == from, \\\"not owned by from\\\"); // solium-disable-line error-reason\\n        if (msg.sender != from && !_metaTransactionContracts[msg.sender]) {\\n            require(\\n                _operatorsForAll[from][msg.sender] ||\\n                    _erc721operators[id] == msg.sender ||\\n                    _superOperators[msg.sender],\\n                \\\"Operator not approved\\\"\\n            );\\n        }\\n        _transferFrom(from, to, id, 1);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeTransfer(\\n                _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n                from,\\n                to,\\n                id,\\n                1,\\n                data,\\n                true,\\n                true\\n            )\\n        );\\n    }\\n\\n    /// @notice A descriptive name for the collection of tokens in this contract.\\n    /// @return the name of the tokens.\\n    function name() external pure returns (string memory _name) {\\n        return \\\"Sandbox's Asset\\\";\\n    }\\n\\n    /// @notice An abbreviated name for the collection of tokens in this contract.\\n    /// @return the symbol of the tokens.\\n    function symbol() external pure returns (string memory _symbol) {\\n        return \\\"ASSET\\\";\\n    }\\n\\n    /// @notice Gives the rarity power of a particular token type.\\n    /// @dev it cannot be used to test existence, will return a rarity for non existing id.\\n    /// @param id the token type to get the rarity of.\\n    /// @return the rarity power(between 0 and 3).\\n    function rarity(uint256 id) public view returns (uint256) {\\n        bytes storage rarityPack = _rarityPacks[id & URI_ID];\\n        uint256 packIndex = id & PACK_INDEX;\\n        if (packIndex / 4 >= rarityPack.length) {\\n            return 0;\\n        } else {\\n            uint8 pack = uint8(rarityPack[packIndex / 4]);\\n            uint8 i = (3 - uint8(packIndex % 4)) * 2;\\n            return (pack / (uint8(2)**i)) % 4;\\n        }\\n    }\\n\\n    /// @notice Gives the collection a specific token belongs to.\\n    /// @param id the token to get the collection of.\\n    /// @return the collection the NFT is part of.\\n    function collection(uint256 id) public view returns (uint256) {\\n        require(_owners[id] != address(0)); // solium-disable-line error-reason\\n        return id & NOT_NFT_INDEX & NOT_IS_NFT;\\n    }\\n\\n    /// @notice Gives the index at which an NFT was minted in a collection : first of a collection get the zero index.\\n    /// @param id the token to get the index of.\\n    /// @return the index/order at which the token `id` was minted in a collection.\\n    function collectionIndex(uint256 id) public view returns (uint256) {\\n        require(_owners[id] != address(0)); // solium-disable-line error-reason\\n        return uint32((id & NFT_INDEX) >> NFT_INDEX_OFFSET);\\n    }\\n\\n    function toFullURI(bytes32 hash, uint256 id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"ipfs://bafybei\\\",\\n                    hash2base32(hash),\\n                    \\\"/\\\",\\n                    uint2str(id & PACK_INDEX),\\n                    \\\".json\\\"\\n                )\\n            );\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n    /// @dev it cannot be used to test existence, will return a uri for non existing id.\\n    /// @param id token to get the uri of.\\n    /// @return URI string\\n    function uri(uint256 id) public view returns (string memory) {\\n        return toFullURI(_metadataHash[id & URI_ID], id);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @param id token to get the uri of.\\n    /// @return URI string\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_owners[id] != address(0)); // solium-disable-line error-reason\\n        return toFullURI(_metadataHash[id & URI_ID], id);\\n    }\\n\\n    bytes32 private constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n    // solium-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash)\\n        private\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i)\\n        private\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n\\n        return string(bstr);\\n    }\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id) external view returns (bool) {\\n        return\\n            id == 0x01ffc9a7 || //ERC165\\n            id == 0xd9b67a26 || // ERC1155\\n            id == 0x80ac58cd || // ERC721\\n            id == 0x5b5e139f || // ERC721 metadata\\n            id == 0x0e89341c; // ERC1155 metadata\\n    }\\n\\n    ///////////////////////////////////////// INTERNAL //////////////////////////////////////////////\\n    bytes4 constant ERC165ID = 0x01ffc9a7;\\n    function checkIsERC1155Receiver(address _contract)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success;\\n        bool result;\\n        bytes memory call_data = abi.encodeWithSelector(\\n            ERC165ID,\\n            ERC1155_IS_RECEIVER\\n        );\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, call_data)\\n            let call_size := mload(call_data)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(\\n                10000,\\n                _contract,\\n                call_ptr,\\n                call_size,\\n                output,\\n                0x20\\n            ) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n\\n    function _checkERC1155AndCallSafeTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data,\\n        bool erc721,\\n        bool erc721Safe\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        if (erc721) {\\n            if (!checkIsERC1155Receiver(to)) {\\n                if (erc721Safe) {\\n                    return\\n                        _checkERC721AndCallSafeTransfer(\\n                            operator,\\n                            from,\\n                            to,\\n                            id,\\n                            data\\n                        );\\n                } else {\\n                    return true;\\n                }\\n            }\\n        }\\n        return\\n            ERC1155TokenReceiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    value,\\n                    data\\n            ) == ERC1155_RECEIVED;\\n    }\\n\\n    function _checkERC1155AndCallSafeBatchTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = ERC1155TokenReceiver(to).onERC1155BatchReceived(\\n            operator,\\n            from,\\n            ids,\\n            values,\\n            data\\n        );\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n\\n    function _checkERC721AndCallSafeTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        // following not required as this function is always called as part of ERC1155 checks that include such check already\\n        // if (!to.isContract()) {\\n        //     return true;\\n        // }\\n        return (ERC721TokenReceiver(to).onERC721Received(\\n                operator,\\n                from,\\n                id,\\n                data\\n            ) ==\\n            ERC721_RECEIVED);\\n    }\\n\\n    ////////////////////////////// ERC721 EXTRACTION AND UPDATE ///////////////////////////////\\n\\n    event Extraction(uint256 indexed fromId, uint256 toId);\\n    event AssetUpdate(uint256 indexed fromId, uint256 toId);\\n\\n    function _burnERC1155(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint32 amount\\n    ) internal {\\n        (uint256 bin, uint256 index) = (id).getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin]\\n            .updateTokenBalance(index, amount, ObjectLib32.Operations.SUB);\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    function _burnERC721(address operator, address from, uint256 id)\\n        internal\\n    {\\n        require(from == _owners[id], \\\"not owner\\\");\\n        _owners[id] = address(0);\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n        emit TransferSingle(operator, from, address(0), id, 1);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id`.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burn(uint256 id, uint256 amount) external {\\n        _burn(msg.sender, id, amount);\\n    }\\n\\n    /// @notice Burns `amount` tokens of type `id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id token type which will be burnt.\\n    /// @param amount amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 amount) external {\\n        require(from != address(0), \\\"invalid from\\\");\\n        require(\\n            msg.sender == from ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n            \\\"require meta approval\\\"\\n        );\\n        _burn(from, id, amount);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 amount) internal {\\n        if ((id & IS_NFT) > 0) {\\n            require(amount == 1, \\\"can only burn one NFT\\\");\\n            _burnERC721(\\n                _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n                from,\\n                id\\n            );\\n        } else {\\n            require(amount > 0 && amount <= MAX_SUPPLY, \\\"invalid amount\\\");\\n            _burnERC1155(\\n                _metaTransactionContracts[msg.sender] ? from : msg.sender,\\n                from,\\n                id,\\n                uint32(amount)\\n            );\\n        }\\n    }\\n\\n    /// @notice Upgrades an NFT with new metadata and rarity.\\n    /// @param from address which own the NFT to be upgraded.\\n    /// @param id the NFT that will be burnt to be upgraded.\\n    /// @param packId unqiue packId for the token.\\n    /// @param hash hash of an IPFS cidv1 folder that contains the metadata of the new token type in the file 0.json.\\n    /// @param newRarity rarity power of the new NFT.\\n    /// @param to address which will receive the NFT.\\n    /// @param data bytes to be transmitted as part of the minted token.\\n    /// @return the id of the newly minted NFT.\\n    function updateERC721(\\n        address from,\\n        uint256 id,\\n        uint48 packId,\\n        bytes32 hash,\\n        uint8 newRarity,\\n        address to,\\n        bytes calldata data\\n    ) external returns(uint256) {\\n        require(hash != 0, \\\"invalid hash\\\");\\n        require(\\n            _bouncers[msg.sender],\\n            \\\"only bouncer allowed to mint via update\\\"\\n        );\\n        require(to != address(0), \\\"Invalid to\\\");\\n        require(from != address(0), \\\"invalid from\\\");\\n\\n        _burnERC721(msg.sender, from, id);\\n\\n        uint256 newId = generateTokenId(from, 1, packId, 0);\\n        _mint(hash, 1, newRarity, msg.sender, to, newId, data, false);\\n        emit AssetUpdate(id, newId);\\n        return newId;\\n    }\\n\\n    /// @notice Extracts an EIP-721 NFT from an EIP-1155 token.\\n    /// @param id the token type to extract from.\\n    /// @param to address which will receive the token.\\n    /// @return the id of the newly minted NFT.\\n    function extractERC721(uint256 id, address to)\\n        external\\n        returns (uint256 newId)\\n    {\\n        return _extractERC721From(msg.sender, msg.sender, id, to);\\n    }\\n\\n    /// @notice Extracts an EIP-721 NFT from an EIP-1155 token.\\n    /// @param sender address which own the token to be extracted.\\n    /// @param id the token type to extract from.\\n    /// @param to address which will receive the token.\\n    /// @return the id of the newly minted NFT.\\n    function extractERC721From(address sender, uint256 id, address to)\\n        external\\n        returns (uint256 newId)\\n    {\\n        require(\\n            msg.sender == sender ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[sender][msg.sender],\\n            \\\"require meta approval\\\"\\n        );\\n        address operator = _metaTransactionContracts[msg.sender]\\n            ? sender\\n            : msg.sender;\\n        return _extractERC721From(operator, sender, id, to);\\n    }\\n\\n    function _extractERC721From(address operator, address sender, uint256 id, address to)\\n        internal\\n        returns (uint256 newId)\\n    {\\n        require(to != address(0), \\\"Invalid to\\\");\\n        require(id & IS_NFT == 0, \\\"Not an ERC1155 Token\\\");\\n        uint32 tokenCollectionIndex = _nextCollectionIndex[id];\\n        newId = id +\\n            IS_NFT +\\n            (tokenCollectionIndex) *\\n            2**NFT_INDEX_OFFSET;\\n        _nextCollectionIndex[id] = tokenCollectionIndex + 1;\\n        _burnERC1155(operator, sender, id, 1);\\n        _mint(\\n            _metadataHash[id & URI_ID],\\n            1,\\n            0,\\n            operator,\\n            to,\\n            newId,\\n            \\\"\\\",\\n            true\\n        );\\n        emit Extraction(id, newId);\\n    }\\n}\\n\",\"keccak256\":\"0x2678952138c9ed46cc0f63b6503e77d7cb1adeb5956d83433a314d64597073dd\"},\"src/Asset/Interfaces/AssetBouncer.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\ncontract AssetBouncer {}\\n\",\"keccak256\":\"0xc2d12ab858b15805d5768cfc02f45ffa19c24d9fd739c760fb1f2f61011ce4be\"},\"src/Test/TestBouncer.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"../Asset/Interfaces/AssetBouncer.sol\\\";\\nimport \\\"../Asset/ERC1155ERC721.sol\\\";\\n\\ncontract TestBouncer is AssetBouncer {\\n    ERC1155ERC721 asset;\\n\\n    constructor(ERC1155ERC721 _asset)\\n        public\\n    {\\n        asset = _asset;\\n    }\\n\\n    function mintFor(\\n        address _creator,\\n        uint48 _packId,\\n        bytes32 _hash,\\n        uint32 _supply,\\n        uint8 _rarity,\\n        address _owner\\n    ) public returns (uint256 tokenId) {\\n        return\\n            asset.mint(_creator, _packId, _hash, _supply, _rarity, _owner, \\\"\\\");\\n    }\\n\\n    function mintMultipleFor(\\n        address _creator,\\n        uint48 _packId,\\n        bytes32 _hash,\\n        uint256[] memory _supplies,\\n        bytes memory _rarityPack,\\n        address _owner\\n    ) public returns (uint256[] memory tokenIds) {\\n        return\\n            asset.mintMultiple(\\n                _creator,\\n                _packId,\\n                _hash,\\n                _supplies,\\n                _rarityPack,\\n                _owner,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function updateERC721(\\n        address _from,\\n        uint256 _tokenId,\\n        uint48 _packId,\\n        bytes32 _hash,\\n        uint8 _newRarity,\\n        address _to\\n    ) external returns(uint256) {\\n        return\\n            asset.updateERC721(\\n                _from,\\n                _tokenId,\\n                _packId,\\n                _hash,\\n                _newRarity,\\n                _to,\\n                \\\"\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x90d01943f16dbf6c9b444ceaa6177b13a8cb6cc2fcc72dba0e1429f68ed73f06\"}},\"version\":1}"
  },
  "args": [
    "0x0fa806c8d24582BE5CE60E016C00A43a0f28A2eA"
  ],
  "address": "0xa62BF00a3aB440685356A02f7bd5798E415C2Af9",
  "transactionHash": "0x29589b51edd82c85b13518148f1341515397fde8ce967d9e06adb4213df73a57"
}