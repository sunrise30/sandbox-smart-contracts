{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMinter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minQuantity",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "maxQuantity",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sandMintingFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sandUpdateFee",
          "type": "uint256"
        }
      ],
      "name": "CatalystConfiguration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20SubToken",
          "name": "subToken",
          "type": "address"
        }
      ],
      "name": "SubToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20SubToken",
          "name": "catalyst",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint88",
              "name": "sandMintingFee",
              "type": "uint88"
            },
            {
              "internalType": "uint88",
              "name": "sandUpdateFee",
              "type": "uint88"
            },
            {
              "internalType": "uint16",
              "name": "minQuantity",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxQuantity",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxGems",
              "type": "uint16"
            }
          ],
          "internalType": "struct CatalystDataBase.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "contract CatalystValue",
          "name": "valueOverride",
          "type": "address"
        }
      ],
      "name": "addCatalyst",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20SubToken[]",
          "name": "catalysts",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint88",
              "name": "sandMintingFee",
              "type": "uint88"
            },
            {
              "internalType": "uint88",
              "name": "sandUpdateFee",
              "type": "uint88"
            },
            {
              "internalType": "uint16",
              "name": "minQuantity",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxQuantity",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxGems",
              "type": "uint16"
            }
          ],
          "internalType": "struct CatalystDataBase.MintData[]",
          "name": "mintData",
          "type": "tuple[]"
        },
        {
          "internalType": "contract CatalystValue[]",
          "name": "valueOverrides",
          "type": "address[]"
        }
      ],
      "name": "addCatalysts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "catalystId",
          "type": "uint256"
        }
      ],
      "name": "getMintData",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "maxGems",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "minQuantity",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxQuantity",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "sandMintingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sandUpdateFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "catalystId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint32[]",
          "name": "gemIds",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "blockHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "getValues",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "values",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAuthorizedToApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAuthorizedToTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "minQuantity",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxQuantity",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "sandMintingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sandUpdateFee",
          "type": "uint256"
        }
      ],
      "name": "setConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "singleTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "supplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x73937802d0961041B2BCb5982e5bB52dFf445B3E",
    "transactionIndex": 2,
    "gasUsed": "3011946",
    "logsBloom": "0x
    "blockHash": "0x9027b210fc4f44f4474b188a03de1a6edb3ab1f2adafa42f41a2a993378c792a",
    "transactionHash": "0x408bee3276d24447c3676b72fe0a8c2c9c94cc08410ef3b6b5a3ae3bb395885d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 6838586,
        "transactionHash": "0x408bee3276d24447c3676b72fe0a8c2c9c94cc08410ef3b6b5a3ae3bb395885d",
        "address": "0x73937802d0961041B2BCb5982e5bB52dFf445B3E",
        "topics": [
          "0xb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb"
        ],
        "data": "0x000000000000000000000000cc933a862fc15379e441f2a16cb943d385a4695f0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x9027b210fc4f44f4474b188a03de1a6edb3ab1f2adafa42f41a2a993378c792a"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 6838586,
        "transactionHash": "0x408bee3276d24447c3676b72fe0a8c2c9c94cc08410ef3b6b5a3ae3bb395885d",
        "address": "0x73937802d0961041B2BCb5982e5bB52dFf445B3E",
        "topics": [
          "0xff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60"
        ],
        "data": "0x000000000000000000000000cbc70eccd52bf3910cdc1455e6d2bd45725f573d0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0x9027b210fc4f44f4474b188a03de1a6edb3ab1f2adafa42f41a2a993378c792a"
      }
    ],
    "blockNumber": 6838586,
    "cumulativeGasUsed": "3234935",
    "status": 1,
    "byzantium": true
  },
  "address": "0x73937802d0961041B2BCb5982e5bB52dFf445B3E",
  "args": [
    "0xCc933a862fc15379E441F2A16Cb943D385a4695f",
    "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "0xcbc70EcCd52bF3910CDC1455E6D2Bd45725F573D"
  ],
  "solidityMetadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMinter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minQuantity\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxQuantity\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sandMintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sandUpdateFee\",\"type\":\"uint256\"}],\"name\":\"CatalystConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20SubToken\",\"name\":\"subToken\",\"type\":\"address\"}],\"name\":\"SubToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ERC20SubToken\",\"name\":\"catalyst\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint88\",\"name\":\"sandMintingFee\",\"type\":\"uint88\"},{\"internalType\":\"uint88\",\"name\":\"sandUpdateFee\",\"type\":\"uint88\"},{\"internalType\":\"uint16\",\"name\":\"minQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxGems\",\"type\":\"uint16\"}],\"internalType\":\"struct CatalystDataBase.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"contract CatalystValue\",\"name\":\"valueOverride\",\"type\":\"address\"}],\"name\":\"addCatalyst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20SubToken[]\",\"name\":\"catalysts\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint88\",\"name\":\"sandMintingFee\",\"type\":\"uint88\"},{\"internalType\":\"uint88\",\"name\":\"sandUpdateFee\",\"type\":\"uint88\"},{\"internalType\":\"uint16\",\"name\":\"minQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxGems\",\"type\":\"uint16\"}],\"internalType\":\"struct CatalystDataBase.MintData[]\",\"name\":\"mintData\",\"type\":\"tuple[]\"},{\"internalType\":\"contract CatalystValue[]\",\"name\":\"valueOverrides\",\"type\":\"address[]\"}],\"name\":\"addCatalysts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catalystId\",\"type\":\"uint256\"}],\"name\":\"getMintData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"maxGems\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"sandMintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sandUpdateFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"catalystId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"gemIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"blockHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"values\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedToApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedToTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxQuantity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"sandMintingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sandUpdateFee\",\"type\":\"uint256\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"singleTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"supplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"subToken id.\",\"owner\":\"whose balance it is of.\"},\"returns\":{\"balance\":\"of the owner\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"ids\":\"list of subTokens's addresses.\",\"owners\":\"list of addresses to which we want to know the balance.\"},\"returns\":{\"balances\":\"list of balances for each request.\"}},\"batchMint(address,uint256[],uint256[])\":{\"details\":\"mint more tokens of a several subToken .\",\"params\":{\"amounts\":\"for each token minted.\",\"ids\":\"subToken ids (also the index at which it was added).\",\"to\":\"address receiving the tokens.\"}},\"batchTransferFrom(address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"owner to transfer from.\",\"ids\":\"list of subToken ids to transfer.\",\"to\":\"destination address that will receive the tokens.\",\"values\":\"list of amount for eacg subTokens to transfer.\"}},\"burn(uint256,uint256)\":{\"params\":{\"id\":\"subToken id.\",\"value\":\"amount of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"from\":\"fron which address the token are burned from.\",\"id\":\"subToken id.\",\"value\":\"amount of tokens to burn.\"}},\"changeAdmin(address)\":{\"details\":\"change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"getAdmin()\":{\"details\":\"gives the current administrator of this contract.\",\"returns\":{\"_0\":\"the current administrator of this contract.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"address being given the ability to transfer.\",\"owner\":\"address who would have granted the rights.\"},\"returns\":{\"isOperator\":\"whether the operator has approval rigths or not.\"}},\"isMetaTransactionProcessor(address)\":{\"details\":\"check whether address `who` is given meta-transaction execution rights.\",\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has meta-transaction execution rights.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mint(address,uint256,uint256)\":{\"details\":\"mint more tokens of a specific subToken .\",\"params\":{\"amount\":\"of token minted.\",\"id\":\"subToken id (also the index at which it was added).\",\"to\":\"address receiving the tokens.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether the operator is revoked or approved.\",\"operator\":\"address being granted/revoked ability to transfer.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"whether the operator is revoked or approved.\",\"operator\":\"address being granted/revoked ability to transfer.\",\"sender\":\"address granting/revoking the approval.\"}},\"setMetaTransactionProcessor(address,bool)\":{\"details\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\",\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"singleTransferFrom(address,address,uint256,uint256)\":{\"params\":{\"from\":\"owner to transfer from.\",\"id\":\"subToken id.\",\"to\":\"destination address that will receive the tokens.\",\"value\":\"amount of tokens to transfer.\"}},\"supplyOf(uint256)\":{\"params\":{\"id\":\"subToken id.\"},\"returns\":{\"supply\":\"current total number of tokens.\"}}}},\"userdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"return the balance of a particular owner for a particular subToken.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"return the balances of a list of owners / subTokens.\"},\"batchTransferFrom(address,address,uint256[],uint256[])\":{\"notice\":\"transfer a number of different subTokens from one address to another.\"},\"burn(uint256,uint256)\":{\"notice\":\"burn token for a specific subToken.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"burn token for a specific owner and subToken.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"return whether an oeprator has the ability to transfer on behalf of another address.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant or revoke the ability for an address to transfer token on your behalf.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"grant or revoke the ability for an address to transfer token on behalf of another address.\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to mint tokens\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"singleTransferFrom(address,address,uint256,uint256)\":{\"notice\":\"transfer a number of subToken from one address to another.\"},\"supplyOf(uint256)\":{\"notice\":\"return the current total supply of a specific subToken.\"}}}},\"settings\":{\"compilationTarget\":{\"src/Catalyst/ERC20GroupCatalyst.sol\":\"ERC20GroupCatalyst\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/BaseWithStorage/ERC20Group.sol\":{\"content\":\"pragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC20SubToken.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/SafeMath.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/AddressUtils.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/BytesUtil.sol\\\";\\n\\nimport \\\"../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\nimport \\\"../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\n\\n\\ncontract ERC20Group is SuperOperators, MetaTransactionReceiver {\\n    /// @notice emitted when a new Token is added to the group.\\n    /// @param subToken the token added, its id will be its index in the array.\\n    event SubToken(ERC20SubToken subToken);\\n\\n    /// @notice emitted when `owner` is allowing or disallowing `operator` to transfer tokens on its behalf.\\n    /// @param owner the address approving.\\n    /// @param operator the address being granted (or revoked) permission to transfer.\\n    /// @param approved whether the operator is granted transfer right or not.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event Minter(address minter, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        _setMinter(minter, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @dev mint more tokens of a specific subToken .\\n    /// @param to address receiving the tokens.\\n    /// @param id subToken id (also the index at which it was added).\\n    /// @param amount of token minted.\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(_minters[msg.sender], \\\"NOT_AUTHORIZED_MINTER\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(index, amount, ObjectLib32.Operations.ADD);\\n        _packedSupplies[bin] = _packedSupplies[bin].updateTokenBalance(index, amount, ObjectLib32.Operations.ADD);\\n        _erc20s[id].emitTransferEvent(address(0), to, amount);\\n    }\\n\\n    /// @dev mint more tokens of a several subToken .\\n    /// @param to address receiving the tokens.\\n    /// @param ids subToken ids (also the index at which it was added).\\n    /// @param amounts for each token minted.\\n    function batchMint(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(_minters[msg.sender], \\\"NOT_AUTHORIZED_MINTER\\\");\\n        require(ids.length == amounts.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        _batchMint(to, ids, amounts);\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256 lastBin = ~uint256(0);\\n        uint256 bal = 0;\\n        uint256 supply = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (amounts[i] != 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                if (lastBin == ~uint256(0)) {\\n                    lastBin = bin;\\n                    bal = _packedTokenBalance[to][bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                    supply = _packedSupplies[bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[to][lastBin] = bal;\\n                        bal = _packedTokenBalance[to][bin];\\n                        _packedSupplies[lastBin] = supply;\\n                        supply = _packedSupplies[bin];\\n                        lastBin = bin;\\n                    }\\n                    bal = bal.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                    supply = supply.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                }\\n                _erc20s[ids[i]].emitTransferEvent(address(0), to, amounts[i]);\\n            }\\n        }\\n        if (lastBin != ~uint256(0)) {\\n            _packedTokenBalance[to][lastBin] = bal;\\n            _packedSupplies[lastBin] = supply;\\n        }\\n    }\\n\\n    /// @notice return the current total supply of a specific subToken.\\n    /// @param id subToken id.\\n    /// @return supply current total number of tokens.\\n    function supplyOf(uint256 id) external view returns (uint256 supply) {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedSupplies[bin].getValueInBin(index);\\n    }\\n\\n    /// @notice return the balance of a particular owner for a particular subToken.\\n    /// @param owner whose balance it is of.\\n    /// @param id subToken id.\\n    /// @return balance of the owner\\n    function balanceOf(address owner, uint256 id) public view returns (uint256 balance) {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice return the balances of a list of owners / subTokens.\\n    /// @param owners list of addresses to which we want to know the balance.\\n    /// @param ids list of subTokens's addresses.\\n    /// @return balances list of balances for each request.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances) {\\n        require(owners.length == ids.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice transfer a number of subToken from one address to another.\\n    /// @param from owner to transfer from.\\n    /// @param to destination address that will receive the tokens.\\n    /// @param id subToken id.\\n    /// @param value amount of tokens to transfer.\\n    function singleTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) external {\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        ERC20SubToken erc20 = _erc20s[id];\\n        require(\\n            from == msg.sender ||\\n                msg.sender == address(erc20) ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(index, value, ObjectLib32.Operations.SUB);\\n        _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(index, value, ObjectLib32.Operations.ADD);\\n        erc20.emitTransferEvent(from, to, value);\\n    }\\n\\n    /// @notice transfer a number of different subTokens from one address to another.\\n    /// @param from owner to transfer from.\\n    /// @param to destination address that will receive the tokens.\\n    /// @param ids list of subToken ids to transfer.\\n    /// @param values list of amount for eacg subTokens to transfer.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) external {\\n        require(ids.length == values.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(\\n            from == msg.sender || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender] || _metaTransactionContracts[msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        uint256 lastBin = ~uint256(0);\\n        uint256 balFrom;\\n        uint256 balTo;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] != 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                if (lastBin == ~uint256(0)) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(_packedTokenBalance[from][bin], index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = ObjectLib32.updateTokenBalance(_packedTokenBalance[to][bin], index, values[i], ObjectLib32.Operations.ADD);\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n                ERC20SubToken erc20 = _erc20s[ids[i]];\\n                erc20.emitTransferEvent(from, to, values[i]);\\n            }\\n        }\\n        if (lastBin != ~uint256(0)) {\\n            _packedTokenBalance[from][lastBin] = balFrom;\\n            _packedTokenBalance[to][lastBin] = balTo;\\n        }\\n    }\\n\\n    /// @notice grant or revoke the ability for an address to transfer token on behalf of another address.\\n    /// @param sender address granting/revoking the approval.\\n    /// @param operator address being granted/revoked ability to transfer.\\n    /// @param approved whether the operator is revoked or approved.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(msg.sender == sender || _metaTransactionContracts[msg.sender] || _superOperators[msg.sender], \\\"NOT_AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice grant or revoke the ability for an address to transfer token on your behalf.\\n    /// @param operator address being granted/revoked ability to transfer.\\n    /// @param approved whether the operator is revoked or approved.\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice return whether an oeprator has the ability to transfer on behalf of another address.\\n    /// @param owner address who would have granted the rights.\\n    /// @param operator address being given the ability to transfer.\\n    /// @return isOperator whether the operator has approval rigths or not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function isAuthorizedToTransfer(address owner, address sender) external view returns (bool) {\\n        return _metaTransactionContracts[sender] || _superOperators[sender] || _operatorsForAll[owner][sender];\\n    }\\n\\n    function isAuthorizedToApprove(address sender) external view returns (bool) {\\n        return _metaTransactionContracts[sender] || _superOperators[sender];\\n    }\\n\\n    function batchBurnFrom(\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(from != address(0), \\\"INVALID_FROM_ZERO_ADDRESS\\\");\\n        require(\\n            from == msg.sender || _metaTransactionContracts[msg.sender] || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        _batchBurnFrom(from, ids, amounts);\\n    }\\n\\n    /// @notice burn token for a specific owner and subToken.\\n    /// @param from fron which address the token are burned from.\\n    /// @param id subToken id.\\n    /// @param value amount of tokens to burn.\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) external {\\n        require(\\n            from == msg.sender || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender] || _metaTransactionContracts[msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n        _burn(from, id, value);\\n    }\\n\\n    /// @notice burn token for a specific subToken.\\n    /// @param id subToken id.\\n    /// @param value amount of tokens to burn.\\n    function burn(uint256 id, uint256 value) external {\\n        _burn(msg.sender, id, value);\\n    }\\n\\n    // ///////////////// INTERNAL //////////////////////////\\n\\n    function _batchBurnFrom(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256 balFrom = 0;\\n        uint256 supply = 0;\\n        uint256 lastBin = ~uint256(0);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (amounts[i] != 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                if (lastBin == ~uint256(0)) {\\n                    lastBin = bin;\\n                    balFrom = _packedTokenBalance[from][bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                    supply = _packedSupplies[bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        _packedSupplies[lastBin] = supply;\\n                        supply = _packedSupplies[bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                    supply = supply.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                }\\n                _erc20s[ids[i]].emitTransferEvent(from, address(0), amounts[i]);\\n            }\\n        }\\n        if (lastBin != ~uint256(0)) {\\n            _packedTokenBalance[from][lastBin] = balFrom;\\n            _packedSupplies[lastBin] = supply;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        ERC20SubToken erc20 = _erc20s[id];\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = ObjectLib32.updateTokenBalance(_packedTokenBalance[from][bin], index, value, ObjectLib32.Operations.SUB);\\n        _packedSupplies[bin] = ObjectLib32.updateTokenBalance(_packedSupplies[bin], index, value, ObjectLib32.Operations.SUB);\\n        erc20.emitTransferEvent(from, address(0), value);\\n    }\\n\\n    function _addSubToken(ERC20SubToken subToken) internal returns (uint256 id) {\\n        id = _erc20s.length;\\n        require(subToken.groupAddress() == address(this), \\\"INVALID_GROUP\\\");\\n        require(subToken.groupTokenId() == id, \\\"INVALID_ID\\\");\\n        _erc20s.push(subToken);\\n        emit SubToken(subToken);\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_SUPER_OPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    function _setMinter(address minter, bool enabled) internal {\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    // ///////////////// UTILITIES /////////////////////////\\n    using AddressUtils for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n    using SafeMath for uint256;\\n\\n    // ////////////////// DATA ///////////////////////////////\\n    mapping(uint256 => uint256) internal _packedSupplies;\\n    mapping(address => mapping(uint256 => uint256)) internal _packedTokenBalance;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    ERC20SubToken[] internal _erc20s;\\n    mapping(address => bool) internal _minters;\\n\\n    // ////////////// CONSTRUCTOR ////////////////////////////\\n\\n    struct SubTokenData {\\n        string name;\\n        string symbol;\\n    }\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin,\\n        address initialMinter\\n    ) internal {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n        _setMinter(initialMinter, true);\\n    }\\n}\\n\",\"keccak256\":\"0x640cba5e8b544f8bf8420d7eda75f42bedbff153ce377160bae751e7b70520c8\"},\"src/BaseWithStorage/ERC20SubToken.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../contracts_common/src/Libraries/SafeMathWithRequire.sol\\\";\\nimport \\\"../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\nimport \\\"../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\n\\nimport \\\"./ERC20Group.sol\\\";\\n\\n\\ncontract ERC20SubToken {\\n    // TODO add natspec, currently blocked by solidity compiler issue\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // TODO add natspec, currently blocked by solidity compiler issue\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice A descriptive name for the tokens\\n    /// @return name of the tokens\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @notice An abbreviated name for the tokens\\n    /// @return symbol of the tokens\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice the tokenId in ERC20Group\\n    /// @return the tokenId in ERC20Group\\n    function groupTokenId() external view returns (uint256) {\\n        return _index;\\n    }\\n\\n    /// @notice the ERC20Group address\\n    /// @return the address of the group\\n    function groupAddress() external view returns (address) {\\n        return address(_group);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _group.supplyOf(_index);\\n    }\\n\\n    function balanceOf(address who) external view returns (uint256) {\\n        return _group.balanceOf(who, _index);\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return uint8(0);\\n    }\\n\\n    function transfer(address to, uint256 amount) external returns (bool success) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool success) {\\n        if (msg.sender != from && !_group.isAuthorizedToTransfer(from, msg.sender)) {\\n            uint256 allowance = _mAllowed[from][msg.sender];\\n            if (allowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(allowance >= amount, \\\"NOT_AUTHOIZED_ALLOWANCE\\\");\\n                _mAllowed[from][msg.sender] = allowance.sub(amount);\\n            }\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool success) {\\n        _approveFor(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveFor(\\n        address from,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success) {\\n        require(msg.sender == from || _group.isAuthorizedToApprove(msg.sender), \\\"NOT_AUTHORIZED\\\");\\n        _approveFor(from, spender, amount);\\n        return true;\\n    }\\n\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(msg.sender == address(_group), \\\"NOT_AUTHORIZED_GROUP_ONLY\\\");\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    // /////////////////// INTERNAL ////////////////////////\\n\\n    function _approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0) && spender != address(0), \\\"INVALID_FROM_OR_SPENDER\\\");\\n        _mAllowed[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function allowance(address owner, address spender) external view returns (uint256 remaining) {\\n        return _mAllowed[owner][spender];\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        _group.singleTransferFrom(from, to, _index, amount);\\n    }\\n\\n    function _firstBytes32(bytes memory src) public pure returns (bytes32 output) {\\n        assembly {\\n            output := mload(add(src, 32))\\n        }\\n    }\\n\\n    // ///////////////////// UTILITIES ///////////////////////\\n    using SafeMathWithRequire for uint256;\\n\\n    // //////////////////// CONSTRUCTOR /////////////////////\\n    constructor(\\n        ERC20Group group,\\n        uint256 index,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) public {\\n        _group = group;\\n        _index = index;\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    // ////////////////////// DATA ///////////////////////////\\n    ERC20Group immutable _group;\\n    uint256 immutable _index;\\n    mapping(address => mapping(address => uint256)) internal _mAllowed;\\n    string internal _name;\\n    string internal _symbol;\\n}\\n\",\"keccak256\":\"0x40f3242dab2e9dd9d7fe24e1cf4f2a741667094f1604c8e11dc8312507fdeade\"},\"src/Catalyst/CatalystDataBase.sol\":{\"content\":\"pragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./CatalystValue.sol\\\";\\n\\n\\ncontract CatalystDataBase is CatalystValue {\\n    event CatalystConfiguration(uint256 indexed id, uint16 minQuantity, uint16 maxQuantity, uint256 sandMintingFee, uint256 sandUpdateFee);\\n\\n    function _setMintData(uint256 id, MintData memory data) internal {\\n        _data[id] = data;\\n        _emitConfiguration(id, data.minQuantity, data.maxQuantity, data.sandMintingFee, data.sandUpdateFee);\\n    }\\n\\n    function _setValueOverride(uint256 id, CatalystValue valueOverride) internal {\\n        _valueOverrides[id] = valueOverride;\\n    }\\n\\n    function _setConfiguration(\\n        uint256 id,\\n        uint16 minQuantity,\\n        uint16 maxQuantity,\\n        uint256 sandMintingFee,\\n        uint256 sandUpdateFee\\n    ) internal {\\n        _data[id].minQuantity = minQuantity;\\n        _data[id].maxQuantity = maxQuantity;\\n        _data[id].sandMintingFee = uint88(sandMintingFee);\\n        _data[id].sandUpdateFee = uint88(sandUpdateFee);\\n        _emitConfiguration(id, minQuantity, maxQuantity, sandMintingFee, sandUpdateFee);\\n    }\\n\\n    function _emitConfiguration(\\n        uint256 id,\\n        uint16 minQuantity,\\n        uint16 maxQuantity,\\n        uint256 sandMintingFee,\\n        uint256 sandUpdateFee\\n    ) internal {\\n        emit CatalystConfiguration(id, minQuantity, maxQuantity, sandMintingFee, sandUpdateFee);\\n    }\\n\\n    function _computeValue(\\n        uint256 seed,\\n        uint32 gemId,\\n        bytes32 blockHash,\\n        uint256 slotIndex\\n    ) internal pure returns (uint32) {\\n        return 1 + uint16(uint256(keccak256(abi.encodePacked(gemId, seed, blockHash, slotIndex))) % 25);\\n    }\\n\\n    function getValues(\\n        uint256 catalystId,\\n        uint256 seed,\\n        uint32[] calldata gemIds,\\n        bytes32[] calldata blockHashes\\n    ) external override view returns (uint32[] memory values) {\\n        require(gemIds.length == blockHashes.length, \\\"inconsisten length\\\");\\n        CatalystValue valueOverride = _valueOverrides[catalystId];\\n        if (address(valueOverride) != address(0)) {\\n            return valueOverride.getValues(catalystId, seed, gemIds, blockHashes);\\n        }\\n        values = new uint32[](gemIds.length);\\n        if (gemIds.length == 0) {\\n            return values;\\n        }\\n\\n        uint32 maxGemIds = 0;\\n        for (uint256 i = gemIds.length; i > 0; i--) {\\n            if (gemIds[i - 1] > maxGemIds) {\\n                maxGemIds = gemIds[i - 1];\\n            }\\n        }\\n        uint32[] memory valuesPerGemIds = new uint32[](maxGemIds + 1);\\n        for (uint256 i = gemIds.length; i > 0; i--) {\\n            uint32 gemId = gemIds[i - 1];\\n            if (valuesPerGemIds[gemId] == 0) {\\n                uint32 randomValue = _computeValue(seed, gemId, blockHashes[i - 1], i);\\n                valuesPerGemIds[gemId] = randomValue;\\n                values[i - 1] = randomValue;\\n            } else {\\n                values[i - 1] = 25; // 25 ensure multiple of the same gem will add up. so 2 Power gem will at least have a value of 26 (always more than a single gem which can only be between 1 and 25 by itself)\\n            }\\n        }\\n    }\\n\\n    function getMintData(uint256 catalystId)\\n        external\\n        view\\n        returns (\\n            uint16 maxGems,\\n            uint16 minQuantity,\\n            uint16 maxQuantity,\\n            uint256 sandMintingFee,\\n            uint256 sandUpdateFee\\n        )\\n    {\\n        maxGems = _data[catalystId].maxGems;\\n        minQuantity = _data[catalystId].minQuantity;\\n        maxQuantity = _data[catalystId].maxQuantity;\\n        sandMintingFee = _data[catalystId].sandMintingFee;\\n        sandUpdateFee = _data[catalystId].sandUpdateFee;\\n    }\\n\\n    struct MintData {\\n        uint88 sandMintingFee;\\n        uint88 sandUpdateFee;\\n        uint16 minQuantity;\\n        uint16 maxQuantity;\\n        uint16 maxGems;\\n    }\\n\\n    mapping(uint256 => MintData) _data;\\n    mapping(uint256 => CatalystValue) _valueOverrides;\\n}\\n\",\"keccak256\":\"0x0f6ade70aff940fd0845a4f439ead791b4aef295ab0220b50063cfc794fb2047\"},\"src/Catalyst/CatalystValue.sol\":{\"content\":\"pragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\ninterface CatalystValue {\\n    function getValues(\\n        uint256 catalystId,\\n        uint256 seed,\\n        uint32[] calldata gemIds,\\n        bytes32[] calldata blockHashes\\n    ) external view returns (uint32[] memory);\\n}\\n\",\"keccak256\":\"0xeab608116b6f5dd9e2b82702431ae93f7a3dda67c9e8f4c89cc570ef34d6d6f9\"},\"src/Catalyst/ERC20GroupCatalyst.sol\":{\"content\":\"pragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseWithStorage/ERC20Group.sol\\\";\\nimport \\\"./CatalystDataBase.sol\\\";\\nimport \\\"../BaseWithStorage/ERC20SubToken.sol\\\";\\nimport \\\"./CatalystValue.sol\\\";\\n\\n\\ncontract ERC20GroupCatalyst is CatalystDataBase, ERC20Group {\\n    function addCatalysts(\\n        ERC20SubToken[] memory catalysts,\\n        MintData[] memory mintData,\\n        CatalystValue[] memory valueOverrides\\n    ) public {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        require(catalysts.length == mintData.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        for (uint256 i = 0; i < mintData.length; i++) {\\n            uint256 id = _addSubToken(catalysts[i]);\\n            _setMintData(id, mintData[i]);\\n            if (valueOverrides.length > i) {\\n                _setValueOverride(id, valueOverrides[i]);\\n            }\\n        }\\n    }\\n\\n    function addCatalyst(\\n        ERC20SubToken catalyst,\\n        MintData memory mintData,\\n        CatalystValue valueOverride\\n    ) public {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        uint256 id = _addSubToken(catalyst);\\n        _setMintData(id, mintData);\\n        _setValueOverride(id, valueOverride);\\n    }\\n\\n    function setConfiguration(\\n        uint256 id,\\n        uint16 minQuantity,\\n        uint16 maxQuantity,\\n        uint256 sandMintingFee,\\n        uint256 sandUpdateFee\\n    ) external {\\n        // CatalystMinter hardcode the value for efficiency purpose, so a change here would require a new deployment of CatalystMinter\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        _setConfiguration(id, minQuantity, maxQuantity, sandMintingFee, sandUpdateFee);\\n    }\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin,\\n        address initialMinter\\n    ) public ERC20Group(metaTransactionContract, admin, initialMinter) {}\\n}\\n\",\"keccak256\":\"0x587ef61ab2f1e174f619217ea2bf0af7e86aa6a3487bee3959d57035e9302837\"},\"src/contracts_common/src/BaseWithStorage/Admin.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\ncontract Admin {\\n    address internal _admin;\\n\\n    /// @dev emitted when the contract administrator is changed.\\n    /// @param oldAdmin address of the previous administrator.\\n    /// @param newAdmin address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @dev gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe5606264fdcdb48191f172743be4fac889f183ce97e907dba4cc5b3fe41b7f9a\"},\"src/contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./Admin.sol\\\";\\n\\n\\ncontract MetaTransactionReceiver is Admin {\\n    mapping(address => bool) internal _metaTransactionContracts;\\n\\n    /// @dev emiited when a meta transaction processor is enabled/disabled\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @dev Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public {\\n        require(msg.sender == _admin, \\\"only admin can setup metaTransactionProcessors\\\");\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @dev check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns (bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0x3103cbc4f6bf91e2866014622a693c9562f8341b22f1bd2891210b4d4cec468f\"},\"src/contracts_common/src/BaseWithStorage/SuperOperators.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./Admin.sol\\\";\\n\\n\\ncontract SuperOperators is Admin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x226c0f78303ffa5d40f3517fbaff34775519e499ab1365bfc4997a86707ff2af\"},\"src/contracts_common/src/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\nlibrary AddressUtils {\\n    function toPayable(address _address) internal pure returns (address payable _payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0x52ed5ebe95a057d4f41b5f44711588816059c18c7f7e48aa0b6f4078812e80de\"},\"src/contracts_common/src/Libraries/BytesUtil.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\nlibrary BytesUtil {\\n    function memcpy(\\n        uint256 dest,\\n        uint256 src,\\n        uint256 len\\n    ) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    function pointerToBytes(uint256 src, uint256 len) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(len);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        memcpy(retptr, src, len);\\n        return ret;\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, a))\\n            mstore(0x40, add(m, 52))\\n            b := m\\n        }\\n    }\\n\\n    function uint256ToBytes(uint256 a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 32), a)\\n            mstore(0x40, add(m, 64))\\n            b := m\\n        }\\n    }\\n\\n    function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) {\\n        if (data.length < (36 + 32)) {\\n            return false;\\n        }\\n        uint256 value;\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value == uint256(_address);\\n    }\\n\\n    function doParamEqualsUInt256(\\n        bytes memory data,\\n        uint256 i,\\n        uint256 value\\n    ) internal pure returns (bool) {\\n        if (data.length < (36 + (i + 1) * 32)) {\\n            return false;\\n        }\\n        uint256 offset = 36 + i * 32;\\n        uint256 valuePresent;\\n        assembly {\\n            valuePresent := mload(add(data, offset))\\n        }\\n        return valuePresent == value;\\n    }\\n\\n    function overrideFirst32BytesWithAddress(bytes memory data, address _address) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n\\n        bytes memory addressBytes = addressToBytes(_address);\\n        uint256 src;\\n        assembly {\\n            src := add(addressBytes, 32)\\n        }\\n\\n        memcpy(dest, src, 20);\\n        return data;\\n    }\\n\\n    function overrideFirstTwo32BytesWithAddressAndInt(\\n        bytes memory data,\\n        address _address,\\n        uint256 _value\\n    ) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n        bytes memory bbytes = addressToBytes(_address);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 20);\\n\\n        assembly {\\n            dest := add(data, 68)\\n        } // 48 = 32 (offset) + 4 (func sig) + 32 (next slot)\\n        bbytes = uint256ToBytes(_value);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 32);\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xe6deec26a5bb00520a8025fb2b7b0155e3cad78349934bbd24e8d524c54114db\"},\"src/contracts_common/src/Libraries/ObjectLib32.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMathWithRequire.sol\\\";\\n\\n\\nlibrary ObjectLib32 {\\n    using SafeMathWithRequire for uint256;\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /**\\n     * @dev Return the bin number and index within that bin where ID is\\n     * @param tokenId Object type\\n     * @return bin Bin number\\n     * @return index ID's index within that bin\\n     */\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        bin = (tokenId * TYPES_BITS_SIZE) / 256;\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance.add(amount));\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance.sub(amount));\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0xc2b73b8a4e836615ee9cb570406c532233a293024dad944ddb87f8957fce8b25\"},\"src/contracts_common/src/Libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xdd13b563f215fd558bab94e03eb5a96e0cb30e7e156198bf448514876d1fa1bd\"},\"src/contracts_common/src/Libraries/SafeMathWithRequire.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        require(c / a == b, \\\"overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"divbyzero\\\");\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"undeflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c >= a, \\\"overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x3ed5e25131dfcd07b3b11cb45b33dc24d0721acc0a034c85c2f17914fcea2dcd\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80638f283970116100f9578063b390c0ab11610097578063e985e9c511610071578063e985e9c5146103d5578063eaa51251146103e8578063eeb5a5d1146103fb578063ffaa8b811461040e576101c3565b8063b390c0ab1461039c578063cf456ae7146103af578063dc5074af146103c2576101c3565b8063a531e0fa116100d3578063a531e0fa14610350578063aa271e1a14610363578063ac9fe42114610376578063b155af6f14610389576101c3565b80638f28397014610317578063a22cb4651461032a578063a4cb552b1461033d576101c3565b8063654b748a1161016657806376b756411161014057806376b75641146102cb57806380534934146102de5780638806792f146102f15780638a04af6a14610304576101c3565b8063654b748a1461027f5780636e9960c31461029257806373f16425146102a7576101c3565b8063124d91e5116101a2578063124d91e514610226578063156e29f61461023957806317fad7fc1461024c5780634e1273f41461025f576101c3565b8062fdd58e146101c85780630ca83480146101f15780630d70e29c14610206575b600080fd5b6101db6101d6366004612971565b61042e565b6040516101e891906132f5565b60405180910390f35b6102046101ff3660046128c0565b610480565b005b610219610214366004612763565b61054c565b6040516101e89190612e21565b61020461023436600461299c565b6105c2565b61020461024736600461299c565b61065c565b61020461025a36600461279b565b6107a8565b61027261026d3660046129d0565b610b1a565b6040516101e89190612d9f565b61021961028d36600461272b565b610bee565b61029a610c0c565b6040516101e89190612d32565b6102ba6102b5366004612bf7565b610c1b565b6040516101e89594939291906132a2565b6102046102d9366004612a39565b610c9a565b6102046102ec3660046128c0565b610d63565b6101db6102ff366004612bf7565b610e81565b610204610312366004612940565b610ebb565b61020461032536600461272b565b610ef3565b610204610338366004612940565b610f93565b61020461034b366004612bb9565b610f9e565b61020461035e36600461287b565b610fe9565b61021961037136600461272b565b6111f0565b610204610384366004612940565b61120e565b610204610397366004612c27565b61129a565b6102046103aa366004612c76565b6112d1565b6102046103bd366004612940565b6112dc565b6102196103d036600461272b565b611310565b6102196103e3366004612763565b61132e565b6102196103f636600461272b565b611380565b61020461040936600461282d565b6113c1565b61042161041c366004612c97565b611428565b6040516101e89190612de3565b600080600061043c8461175f565b6001600160a01b03871660009081526006602090815260408083208584529091529020549193509150610475908263ffffffff61177016565b925050505b92915050565b3360009081526009602052604090205460ff166104b85760405162461bcd60e51b81526004016104af90613234565b60405180910390fd5b8281146104d75760405162461bcd60e51b81526004016104af90612e63565b610545858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061178a92505050565b5050505050565b6001600160a01b03811660009081526004602052604081205460ff168061058b57506001600160a01b03821660009081526003602052604090205460ff165b806105bb57506001600160a01b0380841660009081526007602090815260408083209386168352929052205460ff165b9392505050565b6001600160a01b0383163314806105e857503360009081526003602052604090205460ff165b8061061657506001600160a01b038316600090815260076020908152604080832033845290915290205460ff165b8061063057503360009081526004602052604090205460ff165b61064c5760405162461bcd60e51b81526004016104af906131fd565b610657838383611a11565b505050565b3360009081526009602052604090205460ff1661068b5760405162461bcd60e51b81526004016104af90613234565b6000806106978461175f565b6001600160a01b03871660009081526006602090815260408083208584529091528120549294509092506106d591908390869063ffffffff611b2a16565b6001600160a01b03861660009081526006602090815260408083208684528252808320939093556005905290812054610717918390869063ffffffff611b2a16565b600083815260056020526040902055600880548590811061073457fe5b600091825260208220015460405163536a4ee560e11b81526001600160a01b039091169163a6d49dca9161076f919089908890600401612d46565b600060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050505050505050565b8281146107c75760405162461bcd60e51b81526004016104af90612e63565b6001600160a01b0385166107ed5760405162461bcd60e51b81526004016104af90612ed1565b6001600160a01b03861633148061081357503360009081526003602052604090205460ff165b8061084157506001600160a01b038616600090815260076020908152604080832033845290915290205460ff165b8061085b57503360009081526004602052604090205460ff165b6108775760405162461bcd60e51b81526004016104af906131fd565b600019600080805b86811015610aca5785858281811061089357fe5b90506020020135600014610ac2576000806108bf8a8a858181106108b357fe5b9050602002013561175f565b91509150600019861415610962576001600160a01b038c166000908152600660209081526040808320858452909152902054919550859161091590828a8a8781811061090757fe5b905060200201356001611b2a565b6001600160a01b038c16600090815260066020908152604080832086845290915290205490955061095b90828a8a8781811061094d57fe5b905060200201356000611b2a565b9350610a1b565b8582146109c4576001600160a01b038c811660009081526006602081815260408084208b85528083528185209a909a55938f16835290815282822098825288815282822096909655838152958552808620549690945292909320549293929184905b6109ed818989868181106109d457fe5b899392602090910201359050600163ffffffff611b2a16565b9450610a18818989868181106109ff57fe5b889392602090910201359050600063ffffffff611b2a16565b93505b600060088b8b86818110610a2b57fe5b9050602002013581548110610a3c57fe5b6000918252602090912001546001600160a01b031690508063a6d49dca8e8e8c8c89818110610a6757fe5b905060200201356040518463ffffffff1660e01b8152600401610a8c93929190612d46565b600060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b505050505050505b60010161087f565b50600019831461079d576001600160a01b03808a1660009081526006602081815260408084208885528252808420879055938c168352908152828220868352905220819055505050505050505050565b6060838214610b3b5760405162461bcd60e51b81526004016104af90612e63565b8167ffffffffffffffff81118015610b5257600080fd5b50604051908082528060200260200182016040528015610b7c578160200160208202803683370190505b50905060005b82811015610be557610bc6868683818110610b9957fe5b9050602002016020810190610bae919061272b565b858584818110610bba57fe5b9050602002013561042e565b828281518110610bd257fe5b6020908102919091010152600101610b82565b50949350505050565b6001600160a01b031660009081526003602052604090205460ff1690565b6002546001600160a01b031690565b60009081526020819052604090205461ffff7a01000000000000000000000000000000000000000000000000000082048116927601000000000000000000000000000000000000000000008304821692600160c01b8104909216916affffffffffffffffffffff808216926b0100000000000000000000009092041690565b6002546001600160a01b03163314610cc45760405162461bcd60e51b81526004016104af90612fd3565b8151835114610ce55760405162461bcd60e51b81526004016104af90612e63565b60005b8251811015610d5d576000610d0f858381518110610d0257fe5b6020026020010151611bf9565b9050610d2e81858481518110610d2157fe5b6020026020010151611dc8565b8183511115610d5457610d5481848481518110610d4757fe5b6020026020010151611f14565b50600101610ce8565b50505050565b6001600160a01b038516610d895760405162461bcd60e51b81526004016104af9061300a565b6001600160a01b038516331480610daf57503360009081526004602052604090205460ff165b80610dc957503360009081526003602052604090205460ff165b80610df757506001600160a01b038516600090815260076020908152604080832033845290915290205460ff165b610e135760405162461bcd60e51b81526004016104af906131fd565b6105458585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250611f4f92505050565b6000806000610e8f8461175f565b6000828152600560205260409020549193509150610eb3908263ffffffff61177016565b949350505050565b6002546001600160a01b03163314610ee55760405162461bcd60e51b81526004016104af90613132565b610eef82826121d4565b5050565b6002546001600160a01b03163314610f1d5760405162461bcd60e51b81526004016104af9061318f565b6002546040517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91610f5c916001600160a01b03909116908490612d6a565b60405180910390a16002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610eef33838361222a565b6002546001600160a01b03163314610fc85760405162461bcd60e51b81526004016104af90612fd3565b6000610fd384611bf9565b9050610fdf8184611dc8565b610d5d8183611f14565b6001600160a01b03831661100f5760405162461bcd60e51b81526004016104af90612ed1565b60006008838154811061101e57fe5b6000918252602090912001546001600160a01b039081169150851633148061104e5750336001600160a01b038216145b8061106857503360009081526004602052604090205460ff165b8061108257503360009081526003602052604090205460ff165b806110b057506001600160a01b038516600090815260076020908152604080832033845290915290205460ff165b6110cc5760405162461bcd60e51b81526004016104af906131fd565b6000806110d88561175f565b6001600160a01b03891660009081526006602090815260408083208584529091529020549193509150611114908286600163ffffffff611b2a16565b6001600160a01b038089166000908152600660208181526040808420888552825280842095909555928a168252825282812085825290915290812054611163918390879063ffffffff611b2a16565b6001600160a01b0380881660009081526006602090815260408083208784529091529081902092909255905163536a4ee560e11b81529084169063a6d49dca906111b5908a908a908990600401612d46565b600060405180830381600087803b1580156111cf57600080fd5b505af11580156111e3573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b031660009081526009602052604090205460ff1690565b6002546001600160a01b031633146112385760405162461bcd60e51b81526004016104af90613041565b6001600160a01b03821660009081526003602052604090819020805460ff1916831515179055517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d89061128e9084908490612d84565b60405180910390a15050565b6002546001600160a01b031633146112c45760405162461bcd60e51b81526004016104af90612fd3565b61054585858585856122d4565b610eef338383611a11565b6002546001600160a01b031633146113065760405162461bcd60e51b81526004016104af90612fd3565b610eef82826123c1565b6001600160a01b031660009081526004602052604090205460ff1690565b6001600160a01b03808316600090815260076020908152604080832093851683529290529081205460ff16806105bb5750506001600160a01b031660009081526003602052604090205460ff16919050565b6001600160a01b03811660009081526004602052604081205460ff168061047a5750506001600160a01b031660009081526003602052604090205460ff1690565b336001600160a01b03841614806113e757503360009081526004602052604090205460ff165b8061140157503360009081526003602052604090205460ff165b61141d5760405162461bcd60e51b81526004016104af906131fd565b61065783838361222a565b60608382146114495760405162461bcd60e51b81526004016104af9061326b565b6000878152600160205260409020546001600160a01b03168015611530576040517fffaa8b810000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063ffaa8b81906114b6908b908b908b908b908b908b906004016132fe565b60006040518083038186803b1580156114ce57600080fd5b505afa1580156114e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115289190810190612b1e565b915050611755565b8467ffffffffffffffff8111801561154757600080fd5b50604051908082528060200260200182016040528015611571578160200160208202803683370190505b5091508461157f5750611755565b6000855b80156115f0578163ffffffff1688886001840381811061159f57fe5b90506020020160208101906115b49190612cd4565b63ffffffff1611156115e7578787600183038181106115cf57fe5b90506020020160208101906115e49190612cd4565b91505b60001901611583565b5060608160010163ffffffff1667ffffffffffffffff8111801561161357600080fd5b5060405190808252806020026020018201604052801561163d578160200160208202803683370190505b509050865b801561175057600089896001840381811061165957fe5b905060200201602081019061166e9190612cd4565b9050828163ffffffff168151811061168257fe5b602002602001015163ffffffff166000141561171a5760006116bb8c838b8b600188038181106116ae57fe5b9050602002013586612417565b905080848363ffffffff16815181106116d057fe5b602002602001019063ffffffff16908163ffffffff1681525050808760018503815181106116fa57fe5b602002602001019063ffffffff16908163ffffffff168152505050611746565b601986600184038151811061172b57fe5b602002602001019063ffffffff16908163ffffffff16815250505b5060001901611642565b505050505b9695505050505050565b610100602082020491600790911690565b600181016020026101000382901c63ffffffff1692915050565b600019600080805b85518110156119ce578481815181106117a757fe5b60200260200101516000146119c6576000806117d58884815181106117c857fe5b602002602001015161175f565b9150915060001986141561187257819550611831818885815181106117f657fe5b6020908102919091018101516001600160a01b038d16600090815260068352604080822088835290935291822054929163ffffffff611b2a16565b945061186b8188858151811061184357fe5b602090810291909101810151600086815260059092526040822054929163ffffffff611b2a16565b935061191e565b8582146118c3576001600160a01b0389166000908152600660209081526040808320898452825280832097909755838252868220549782526005905285812094909455818452939092205491939284905b6118ee818885815181106118d357fe5b6020026020010151600088611b2a909392919063ffffffff16565b945061191b8188858151811061190057fe5b6020026020010151600087611b2a909392919063ffffffff16565b93505b600888848151811061192c57fe5b60200260200101518154811061193e57fe5b600091825260208220015488516001600160a01b039091169163a6d49dca918c908b908890811061196b57fe5b60200260200101516040518463ffffffff1660e01b815260040161199193929190612d46565b600060405180830381600087803b1580156119ab57600080fd5b505af11580156119bf573d6000803e3d6000fd5b5050505050505b600101611792565b506000198314611a09576001600160a01b03861660009081526006602090815260408083208684528252808320859055600590915290208190555b505050505050565b600060088381548110611a2057fe5b60009182526020822001546001600160a01b0316915080611a408561175f565b6001600160a01b03881660009081526006602090815260408083208584529091529020549193509150611a769082866001611b2a565b6001600160a01b0387166000908152600660209081526040808320868452825280832093909355600590522054611ab09082866001611b2a565b60008381526005602052604080822092909255905163536a4ee560e11b81526001600160a01b0385169163a6d49dca91611af0918a918990600401612d46565b600060405180830381600087803b158015611b0a57600080fd5b505af1158015611b1e573d6000803e3d6000fd5b50505050505050505050565b60008080836002811115611b3a57fe5b1415611b6d57611b4a8686611770565b9050611b668686611b61848863ffffffff61246416565b612487565b9150610be5565b6001836002811115611b7b57fe5b1415611bc257611b8b8686611770565b905083811015611bad5760405162461bcd60e51b81526004016104af906130d5565b611b668686611b61848863ffffffff6124d016565b6002836002811115611bd057fe5b1415611be157611b66868686612487565b60405162461bcd60e51b81526004016104af90612f9c565b60006008805490509050306001600160a01b0316826001600160a01b0316638b7b59d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4657600080fd5b505afa158015611c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7e9190612747565b6001600160a01b031614611ca45760405162461bcd60e51b81526004016104af90612e2c565b80826001600160a01b031663b8f9260b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d169190612c0f565b14611d335760405162461bcd60e51b81526004016104af9061309e565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556040517f2f334d8c412c0143e93911652cc34f5fcaae2f287a574eae9736d648f9b4363190611dbb908490612d32565b60405180910390a1919050565b60008281526020818152604091829020835181549285015193850151606086015160808701516affffffffffffffffffffff199095166affffffffffffffffffffff9384169081177fffffffffffffffffffff0000000000000000000000ffffffffffffffffffffff166b01000000000000000000000094909716938402969096177fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000061ffff80851691909102919091177fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b82841602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a010000000000000000000000000000000000000000000000000000919096160294909417909255610eef938693916124f8565b600091825260016020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b600080600019815b855181101561219257848181518110611f6c57fe5b602002602001015160001461218a57600080611f8d8884815181106117c857fe5b9150915060001984141561203357819350611fec81888581518110611fae57fe5b6020908102919091018101516001600160a01b038d16600090815260068352604080822088835290935291909120549190600163ffffffff611b2a16565b955061202c81888581518110611ffe57fe5b602002602001015160016005600087815260200190815260200160002054611b2a909392919063ffffffff16565b94506120e1565b838214612086576001600160a01b03891660009081526006602090815260408083208784528252808320989098558382528782205495825260059052868120959095558185529490932054919391929182905b6120b18188858151811061209657fe5b6020026020010151600189611b2a909392919063ffffffff16565b95506120de818885815181106120c357fe5b6020026020010151600188611b2a909392919063ffffffff16565b94505b60088884815181106120ef57fe5b60200260200101518154811061210157fe5b600091825260208220015488516001600160a01b039091169163a6d49dca918c91908b908890811061212f57fe5b60200260200101516040518463ffffffff1660e01b815260040161215593929190612d46565b600060405180830381600087803b15801561216f57600080fd5b505af1158015612183573d6000803e3d6000fd5b5050505050505b600101611f57565b506000198114611a09576001600160a01b0386166000908152600660209081526040808320848452825280832086905560059091529020829055505050505050565b6001600160a01b03821660009081526004602052604090819020805460ff1916831515179055517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb9061128e9084908490612d84565b6001600160a01b03821660009081526003602052604090205460ff16156122635760405162461bcd60e51b81526004016104af90612e9a565b6001600160a01b0383811660008181526007602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31906122c7908590612e21565b60405180910390a3505050565b600085815260208190526040902080546affffffffffffffffffffff8381166b010000000000000000000000027fffffffffffffffffffff0000000000000000000000ffffffffffffffffffffff9186166affffffffffffffffffffff1961ffff898116600160c01b027fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff918c16760100000000000000000000000000000000000000000000027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff90971696909617169490941793909316929092171617905561054585858585856124f8565b6001600160a01b03821660009081526009602052604090819020805460ff1916831515179055517fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb609061128e9084908490612d84565b60006019848685856040516020016124329493929190612cf0565b6040516020818303038152906040528051906020012060001c8161245257fe5b0660010161ffff169050949350505050565b8181018281101561047a5760405162461bcd60e51b81526004016104af906131c6565b600064010000000082106124ad5760405162461bcd60e51b81526004016104af90612f08565b5063ffffffff600183016020026101000390811b1984169082901b179392505050565b6000828211156124f25760405162461bcd60e51b81526004016104af90612f65565b50900390565b847fb1df053d0fe1c3de4fe1b9235b36fd01de0941e459f189464c91c9ae26b177788585858560405161252e94939291906132d1565b60405180910390a25050505050565b60008083601f84011261254e578182fd5b50813567ffffffffffffffff811115612565578182fd5b602083019150836020808302850101111561257f57600080fd5b9250929050565b600082601f830112612596578081fd5b81356125a96125a4826133c9565b6133a2565b8181529150602080830190848101818402860182018710156125ca57600080fd5b60005b848110156125f25781356125e0816133e9565b845292820192908201906001016125cd565b505050505092915050565b600082601f83011261260d578081fd5b813561261b6125a4826133c9565b818152915060208083019084810160a08085028701830188101561263e57600080fd5b60005b8581101561266557612653898461267c565b85529383019391810191600101612641565b50505050505092915050565b803561047a816133e9565b600060a0828403121561268d578081fd5b61269760a06133a2565b90506126a38383612710565b81526126b28360208401612710565b60208201526126c483604084016126f3565b60408201526126d683606084016126f3565b60608201526126e883608084016126f3565b608082015292915050565b803561ffff8116811461047a57600080fd5b805161047a81613401565b80356affffffffffffffffffffff8116811461047a57600080fd5b60006020828403121561273c578081fd5b81356105bb816133e9565b600060208284031215612758578081fd5b81516105bb816133e9565b60008060408385031215612775578081fd5b8235612780816133e9565b91506020830135612790816133e9565b809150509250929050565b600080600080600080608087890312156127b3578182fd5b86356127be816133e9565b955060208701356127ce816133e9565b9450604087013567ffffffffffffffff808211156127ea578384fd5b6127f68a838b0161253d565b9096509450606089013591508082111561280e578384fd5b5061281b89828a0161253d565b979a9699509497509295939492505050565b600080600060608486031215612841578081fd5b833561284c816133e9565b9250602084013561285c816133e9565b915060408401358015158114612870578182fd5b809150509250925092565b60008060008060808587031215612890578182fd5b843561289b816133e9565b935060208501356128ab816133e9565b93969395505050506040820135916060013590565b6000806000806000606086880312156128d7578283fd5b85356128e2816133e9565b9450602086013567ffffffffffffffff808211156128fe578485fd5b61290a89838a0161253d565b90965094506040880135915080821115612922578283fd5b5061292f8882890161253d565b969995985093965092949392505050565b60008060408385031215612952578182fd5b823561295d816133e9565b915060208301358015158114612790578182fd5b60008060408385031215612983578182fd5b823561298e816133e9565b946020939093013593505050565b6000806000606084860312156129b0578081fd5b83356129bb816133e9565b95602085013595506040909401359392505050565b600080600080604085870312156129e5578182fd5b843567ffffffffffffffff808211156129fc578384fd5b612a088883890161253d565b90965094506020870135915080821115612a20578384fd5b50612a2d8782880161253d565b95989497509550505050565b600080600060608486031215612a4d578081fd5b833567ffffffffffffffff80821115612a64578283fd5b81860187601f820112612a75578384fd5b80359250612a856125a4846133c9565b80848252602080830192508084018b828389028701011115612aa5578788fd5b8794505b86851015612acf57612abb8c82612671565b845260019490940193928101928101612aa9565b509097508801359350505080821115612ae6578283fd5b612af2878388016125fd565b93506040860135915080821115612b07578283fd5b50612b1486828701612586565b9150509250925092565b60006020808385031215612b30578182fd5b825167ffffffffffffffff811115612b46578283fd5b80840185601f820112612b57578384fd5b80519150612b676125a4836133c9565b8281528381019082850185850284018601891015612b83578687fd5b8693505b84841015612bad57612b998982612705565b835260019390930192918501918501612b87565b50979650505050505050565b600080600060e08486031215612bcd578081fd5b8335612bd8816133e9565b9250612be7856020860161267c565b915060c0840135612870816133e9565b600060208284031215612c08578081fd5b5035919050565b600060208284031215612c20578081fd5b5051919050565b600080600080600060a08688031215612c3e578283fd5b85359450612c4f87602088016126f3565b9350612c5e87604088016126f3565b94979396509394606081013594506080013592915050565b60008060408385031215612c88578182fd5b50508035926020909101359150565b60008060008060008060808789031215612caf578384fd5b8635955060208701359450604087013567ffffffffffffffff808211156127ea578586fd5b600060208284031215612ce5578081fd5b81356105bb81613401565b60e09490941b7fffffffff0000000000000000000000000000000000000000000000000000000016845260048401929092526024830152604482015260640190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039290921682521515602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612dd757835183529284019291840191600101612dbb565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612dd757835163ffffffff1683529284019291840191600101612dff565b901515815260200190565b6020808252600d908201527f494e56414c49445f47524f555000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f494e434f4e53495354454e545f4c454e4754480000000000604082015260600190565b60208082526016908201527f494e56414c49445f53555045525f4f50455241544f5200000000000000000000604082015260600190565b60208082526017908201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604082015260600190565b60208082526023908201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160408201527f7267650000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526008908201527f756e6465666c6f77000000000000000000000000000000000000000000000000604082015260600190565b60208082526011908201527f496e76616c6964206f7065726174696f6e000000000000000000000000000000604082015260600190565b60208082526014908201527f4e4f545f415554484f52495a45445f41444d494e000000000000000000000000604082015260600190565b60208082526019908201527f494e56414c49445f46524f4d5f5a45524f5f4144445245535300000000000000604082015260600190565b6020808252602c908201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060408201527f6572206f70657261746f72730000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f494e56414c49445f494400000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060408201527f6973000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f6f6e6c792061646d696e2063616e207365747570206d6574615472616e73616360408201527f74696f6e50726f636573736f7273000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604082015260600190565b60208082526008908201527f6f766572666c6f77000000000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4e4f545f415554484f52495a45445f4d494e5445520000000000000000000000604082015260600190565b60208082526012908201527f696e636f6e73697374656e206c656e6774680000000000000000000000000000604082015260600190565b61ffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b61ffff94851681529290931660208301526040820152606081019190915260800190565b90815260200190565b86815260208082018790526080604083018190528201859052600090869060a08401835b8881101561334d57833561333581613401565b63ffffffff1682529282019290820190600101613322565b5084810360608601528581527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861115613385578384fd5b818602925082878383013790910101908152979650505050505050565b60405181810167ffffffffffffffff811182821017156133c157600080fd5b604052919050565b600067ffffffffffffffff8211156133df578081fd5b5060209081020190565b6001600160a01b03811681146133fe57600080fd5b50565b63ffffffff811681146133fe57600080fdfea2646970667358221220e40708530631ba4cfa393bf9b03651c9f877dc1ecb97127dd2a3175d75e22b0964736f6c63430006050033",
  "userdoc": {
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "return the balance of a particular owner for a particular subToken."
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "return the balances of a list of owners / subTokens."
      },
      "batchTransferFrom(address,address,uint256[],uint256[])": {
        "notice": "transfer a number of different subTokens from one address to another."
      },
      "burn(uint256,uint256)": {
        "notice": "burn token for a specific subToken."
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "burn token for a specific owner and subToken."
      },
      "isApprovedForAll(address,address)": {
        "notice": "return whether an oeprator has the ability to transfer on behalf of another address."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant or revoke the ability for an address to transfer token on your behalf."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "grant or revoke the ability for an address to transfer token on behalf of another address."
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to mint tokens"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "singleTransferFrom(address,address,uint256,uint256)": {
        "notice": "transfer a number of subToken from one address to another."
      },
      "supplyOf(uint256)": {
        "notice": "return the current total supply of a specific subToken."
      }
    }
  },
  "devdoc": {
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "id": "subToken id.",
          "owner": "whose balance it is of."
        },
        "returns": {
          "balance": "of the owner"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "ids": "list of subTokens's addresses.",
          "owners": "list of addresses to which we want to know the balance."
        },
        "returns": {
          "balances": "list of balances for each request."
        }
      },
      "batchMint(address,uint256[],uint256[])": {
        "details": "mint more tokens of a several subToken .",
        "params": {
          "amounts": "for each token minted.",
          "ids": "subToken ids (also the index at which it was added).",
          "to": "address receiving the tokens."
        }
      },
      "batchTransferFrom(address,address,uint256[],uint256[])": {
        "params": {
          "from": "owner to transfer from.",
          "ids": "list of subToken ids to transfer.",
          "to": "destination address that will receive the tokens.",
          "values": "list of amount for eacg subTokens to transfer."
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "id": "subToken id.",
          "value": "amount of tokens to burn."
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "from": "fron which address the token are burned from.",
          "id": "subToken id.",
          "value": "amount of tokens to burn."
        }
      },
      "changeAdmin(address)": {
        "details": "change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "getAdmin()": {
        "details": "gives the current administrator of this contract.",
        "returns": {
          "_0": "the current administrator of this contract."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "address being given the ability to transfer.",
          "owner": "address who would have granted the rights."
        },
        "returns": {
          "isOperator": "whether the operator has approval rigths or not."
        }
      },
      "isMetaTransactionProcessor(address)": {
        "details": "check whether address `who` is given meta-transaction execution rights.",
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has meta-transaction execution rights."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mint(address,uint256,uint256)": {
        "details": "mint more tokens of a specific subToken .",
        "params": {
          "amount": "of token minted.",
          "id": "subToken id (also the index at which it was added).",
          "to": "address receiving the tokens."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether the operator is revoked or approved.",
          "operator": "address being granted/revoked ability to transfer."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "whether the operator is revoked or approved.",
          "operator": "address being granted/revoked ability to transfer.",
          "sender": "address granting/revoking the approval."
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "details": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).",
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "singleTransferFrom(address,address,uint256,uint256)": {
        "params": {
          "from": "owner to transfer from.",
          "id": "subToken id.",
          "to": "destination address that will receive the tokens.",
          "value": "amount of tokens to transfer."
        }
      },
      "supplyOf(uint256)": {
        "params": {
          "id": "subToken id."
        },
        "returns": {
          "supply": "current total number of tokens."
        }
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5995,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_data",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(MintData)5991_storage)"
      },
      {
        "astId": 5999,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_valueOverrides",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(CatalystValue)6075)"
      },
      {
        "astId": 13069,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13454,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_superOperators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13131,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1533,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_packedSupplies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1539,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_packedTokenBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1545,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1548,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_erc20s",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_contract(ERC20SubToken)1980)dyn_storage"
      },
      {
        "astId": 1552,
        "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
        "label": "_minters",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(ERC20SubToken)1980)dyn_storage": {
        "base": "t_contract(ERC20SubToken)1980",
        "encoding": "dynamic_array",
        "label": "contract ERC20SubToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CatalystValue)6075": {
        "encoding": "inplace",
        "label": "contract CatalystValue",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20SubToken)1980": {
        "encoding": "inplace",
        "label": "contract ERC20SubToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_contract(CatalystValue)6075)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract CatalystValue)",
        "numberOfBytes": "32",
        "value": "t_contract(CatalystValue)6075"
      },
      "t_mapping(t_uint256,t_struct(MintData)5991_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CatalystDataBase.MintData)",
        "numberOfBytes": "32",
        "value": "t_struct(MintData)5991_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MintData)5991_storage": {
        "encoding": "inplace",
        "label": "struct CatalystDataBase.MintData",
        "members": [
          {
            "astId": 5982,
            "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
            "label": "sandMintingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint88"
          },
          {
            "astId": 5984,
            "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
            "label": "sandUpdateFee",
            "offset": 11,
            "slot": "0",
            "type": "t_uint88"
          },
          {
            "astId": 5986,
            "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
            "label": "minQuantity",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5988,
            "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
            "label": "maxQuantity",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5990,
            "contract": "src/Catalyst/ERC20GroupCatalyst.sol:ERC20GroupCatalyst",
            "label": "maxGems",
            "offset": 26,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}