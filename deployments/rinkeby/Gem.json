{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMinter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MetaTransactionProcessor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Minter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20SubToken",
          "name": "subToken",
          "type": "address"
        }
      ],
      "name": "SubToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20SubToken[]",
          "name": "catalysts",
          "type": "address[]"
        }
      ],
      "name": "addGems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAuthorizedToApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAuthorizedToTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMetaTransactionProcessor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metaTransactionProcessor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMetaTransactionProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "singleTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "supplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x61078E7f38e0e1498ECc182808301FCD1862004B",
    "transactionIndex": 2,
    "gasUsed": "2242792",
    "logsBloom": "0x
    "blockHash": "0x879727175213d651b546f5f71bc72c1fb6127b11132d8ad83971b576c54115c2",
    "transactionHash": "0x21bbff9b5182d17d00e801190e90fba7bc232cc69e6c01e29761af415e9a0297",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 6838567,
        "transactionHash": "0x21bbff9b5182d17d00e801190e90fba7bc232cc69e6c01e29761af415e9a0297",
        "address": "0x61078E7f38e0e1498ECc182808301FCD1862004B",
        "topics": [
          "0xb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb"
        ],
        "data": "0x000000000000000000000000cc933a862fc15379e441f2a16cb943d385a4695f0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 5,
        "blockHash": "0x879727175213d651b546f5f71bc72c1fb6127b11132d8ad83971b576c54115c2"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 6838567,
        "transactionHash": "0x21bbff9b5182d17d00e801190e90fba7bc232cc69e6c01e29761af415e9a0297",
        "address": "0x61078E7f38e0e1498ECc182808301FCD1862004B",
        "topics": [
          "0xff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60"
        ],
        "data": "0x000000000000000000000000cbc70eccd52bf3910cdc1455e6d2bd45725f573d0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0x879727175213d651b546f5f71bc72c1fb6127b11132d8ad83971b576c54115c2"
      }
    ],
    "blockNumber": 6838567,
    "cumulativeGasUsed": "2356775",
    "status": 1,
    "byzantium": true
  },
  "address": "0x61078E7f38e0e1498ECc182808301FCD1862004B",
  "args": [
    "0xCc933a862fc15379E441F2A16Cb943D385a4695f",
    "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "0xcbc70EcCd52bF3910CDC1455E6D2Bd45725F573D"
  ],
  "solidityMetadata": "{\"compiler\":{\"version\":\"0.6.5+commit.f956cc89\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMinter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MetaTransactionProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Minter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20SubToken\",\"name\":\"subToken\",\"type\":\"address\"}],\"name\":\"SubToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ERC20SubToken[]\",\"name\":\"catalysts\",\"type\":\"address[]\"}],\"name\":\"addGems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedToApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedToTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMetaTransactionProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metaTransactionProcessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMetaTransactionProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"singleTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"supplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"subToken id.\",\"owner\":\"whose balance it is of.\"},\"returns\":{\"balance\":\"of the owner\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"ids\":\"list of subTokens's addresses.\",\"owners\":\"list of addresses to which we want to know the balance.\"},\"returns\":{\"balances\":\"list of balances for each request.\"}},\"batchMint(address,uint256[],uint256[])\":{\"details\":\"mint more tokens of a several subToken .\",\"params\":{\"amounts\":\"for each token minted.\",\"ids\":\"subToken ids (also the index at which it was added).\",\"to\":\"address receiving the tokens.\"}},\"batchTransferFrom(address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"owner to transfer from.\",\"ids\":\"list of subToken ids to transfer.\",\"to\":\"destination address that will receive the tokens.\",\"values\":\"list of amount for eacg subTokens to transfer.\"}},\"burn(uint256,uint256)\":{\"params\":{\"id\":\"subToken id.\",\"value\":\"amount of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"from\":\"fron which address the token are burned from.\",\"id\":\"subToken id.\",\"value\":\"amount of tokens to burn.\"}},\"changeAdmin(address)\":{\"details\":\"change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"getAdmin()\":{\"details\":\"gives the current administrator of this contract.\",\"returns\":{\"_0\":\"the current administrator of this contract.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"address being given the ability to transfer.\",\"owner\":\"address who would have granted the rights.\"},\"returns\":{\"isOperator\":\"whether the operator has approval rigths or not.\"}},\"isMetaTransactionProcessor(address)\":{\"details\":\"check whether address `who` is given meta-transaction execution rights.\",\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has meta-transaction execution rights.\"}},\"isMinter(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has minter rights.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"mint(address,uint256,uint256)\":{\"details\":\"mint more tokens of a specific subToken .\",\"params\":{\"amount\":\"of token minted.\",\"id\":\"subToken id (also the index at which it was added).\",\"to\":\"address receiving the tokens.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether the operator is revoked or approved.\",\"operator\":\"address being granted/revoked ability to transfer.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"whether the operator is revoked or approved.\",\"operator\":\"address being granted/revoked ability to transfer.\",\"sender\":\"address granting/revoking the approval.\"}},\"setMetaTransactionProcessor(address,bool)\":{\"details\":\"Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\",\"params\":{\"enabled\":\"set whether the metaTransactionProcessor is enabled or disabled.\",\"metaTransactionProcessor\":\"address that will be given/removed metaTransactionProcessor rights.\"}},\"setMinter(address,bool)\":{\"params\":{\"enabled\":\"set whether the minter is enabled or disabled.\",\"minter\":\"address that will be given/removed minter right.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"singleTransferFrom(address,address,uint256,uint256)\":{\"params\":{\"from\":\"owner to transfer from.\",\"id\":\"subToken id.\",\"to\":\"destination address that will receive the tokens.\",\"value\":\"amount of tokens to transfer.\"}},\"supplyOf(uint256)\":{\"params\":{\"id\":\"subToken id.\"},\"returns\":{\"supply\":\"current total number of tokens.\"}}}},\"userdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"return the balance of a particular owner for a particular subToken.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"return the balances of a list of owners / subTokens.\"},\"batchTransferFrom(address,address,uint256[],uint256[])\":{\"notice\":\"transfer a number of different subTokens from one address to another.\"},\"burn(uint256,uint256)\":{\"notice\":\"burn token for a specific subToken.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"burn token for a specific owner and subToken.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"return whether an oeprator has the ability to transfer on behalf of another address.\"},\"isMinter(address)\":{\"notice\":\"check whether address `who` is given minter rights.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant or revoke the ability for an address to transfer token on your behalf.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"grant or revoke the ability for an address to transfer token on behalf of another address.\"},\"setMinter(address,bool)\":{\"notice\":\"Enable or disable the ability of `minter` to mint tokens\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"singleTransferFrom(address,address,uint256,uint256)\":{\"notice\":\"transfer a number of subToken from one address to another.\"},\"supplyOf(uint256)\":{\"notice\":\"return the current total supply of a specific subToken.\"}}}},\"settings\":{\"compilationTarget\":{\"src/Catalyst/ERC20GroupGem.sol\":\"ERC20GroupGem\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/BaseWithStorage/ERC20Group.sol\":{\"content\":\"pragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC20SubToken.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/SafeMath.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/AddressUtils.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/ObjectLib32.sol\\\";\\nimport \\\"../contracts_common/src/Libraries/BytesUtil.sol\\\";\\n\\nimport \\\"../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\nimport \\\"../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\n\\n\\ncontract ERC20Group is SuperOperators, MetaTransactionReceiver {\\n    /// @notice emitted when a new Token is added to the group.\\n    /// @param subToken the token added, its id will be its index in the array.\\n    event SubToken(ERC20SubToken subToken);\\n\\n    /// @notice emitted when `owner` is allowing or disallowing `operator` to transfer tokens on its behalf.\\n    /// @param owner the address approving.\\n    /// @param operator the address being granted (or revoked) permission to transfer.\\n    /// @param approved whether the operator is granted transfer right or not.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event Minter(address minter, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `minter` to mint tokens\\n    /// @param minter address that will be given/removed minter right.\\n    /// @param enabled set whether the minter is enabled or disabled.\\n    function setMinter(address minter, bool enabled) external {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        _setMinter(minter, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given minter rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has minter rights.\\n    function isMinter(address who) public view returns (bool) {\\n        return _minters[who];\\n    }\\n\\n    /// @dev mint more tokens of a specific subToken .\\n    /// @param to address receiving the tokens.\\n    /// @param id subToken id (also the index at which it was added).\\n    /// @param amount of token minted.\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(_minters[msg.sender], \\\"NOT_AUTHORIZED_MINTER\\\");\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(index, amount, ObjectLib32.Operations.ADD);\\n        _packedSupplies[bin] = _packedSupplies[bin].updateTokenBalance(index, amount, ObjectLib32.Operations.ADD);\\n        _erc20s[id].emitTransferEvent(address(0), to, amount);\\n    }\\n\\n    /// @dev mint more tokens of a several subToken .\\n    /// @param to address receiving the tokens.\\n    /// @param ids subToken ids (also the index at which it was added).\\n    /// @param amounts for each token minted.\\n    function batchMint(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(_minters[msg.sender], \\\"NOT_AUTHORIZED_MINTER\\\");\\n        require(ids.length == amounts.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        _batchMint(to, ids, amounts);\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256 lastBin = ~uint256(0);\\n        uint256 bal = 0;\\n        uint256 supply = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (amounts[i] != 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                if (lastBin == ~uint256(0)) {\\n                    lastBin = bin;\\n                    bal = _packedTokenBalance[to][bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                    supply = _packedSupplies[bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[to][lastBin] = bal;\\n                        bal = _packedTokenBalance[to][bin];\\n                        _packedSupplies[lastBin] = supply;\\n                        supply = _packedSupplies[bin];\\n                        lastBin = bin;\\n                    }\\n                    bal = bal.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                    supply = supply.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.ADD);\\n                }\\n                _erc20s[ids[i]].emitTransferEvent(address(0), to, amounts[i]);\\n            }\\n        }\\n        if (lastBin != ~uint256(0)) {\\n            _packedTokenBalance[to][lastBin] = bal;\\n            _packedSupplies[lastBin] = supply;\\n        }\\n    }\\n\\n    /// @notice return the current total supply of a specific subToken.\\n    /// @param id subToken id.\\n    /// @return supply current total number of tokens.\\n    function supplyOf(uint256 id) external view returns (uint256 supply) {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedSupplies[bin].getValueInBin(index);\\n    }\\n\\n    /// @notice return the balance of a particular owner for a particular subToken.\\n    /// @param owner whose balance it is of.\\n    /// @param id subToken id.\\n    /// @return balance of the owner\\n    function balanceOf(address owner, uint256 id) public view returns (uint256 balance) {\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        return _packedTokenBalance[owner][bin].getValueInBin(index);\\n    }\\n\\n    /// @notice return the balances of a list of owners / subTokens.\\n    /// @param owners list of addresses to which we want to know the balance.\\n    /// @param ids list of subTokens's addresses.\\n    /// @return balances list of balances for each request.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances) {\\n        require(owners.length == ids.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        balances = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balances[i] = balanceOf(owners[i], ids[i]);\\n        }\\n        return balances;\\n    }\\n\\n    /// @notice transfer a number of subToken from one address to another.\\n    /// @param from owner to transfer from.\\n    /// @param to destination address that will receive the tokens.\\n    /// @param id subToken id.\\n    /// @param value amount of tokens to transfer.\\n    function singleTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) external {\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        ERC20SubToken erc20 = _erc20s[id];\\n        require(\\n            from == msg.sender ||\\n                msg.sender == address(erc20) ||\\n                _metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender] ||\\n                _operatorsForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = _packedTokenBalance[from][bin].updateTokenBalance(index, value, ObjectLib32.Operations.SUB);\\n        _packedTokenBalance[to][bin] = _packedTokenBalance[to][bin].updateTokenBalance(index, value, ObjectLib32.Operations.ADD);\\n        erc20.emitTransferEvent(from, to, value);\\n    }\\n\\n    /// @notice transfer a number of different subTokens from one address to another.\\n    /// @param from owner to transfer from.\\n    /// @param to destination address that will receive the tokens.\\n    /// @param ids list of subToken ids to transfer.\\n    /// @param values list of amount for eacg subTokens to transfer.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) external {\\n        require(ids.length == values.length, \\\"INVALID_INCONSISTENT_LENGTH\\\");\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(\\n            from == msg.sender || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender] || _metaTransactionContracts[msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        uint256 lastBin = ~uint256(0);\\n        uint256 balFrom;\\n        uint256 balTo;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] != 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                if (lastBin == ~uint256(0)) {\\n                    lastBin = bin;\\n                    balFrom = ObjectLib32.updateTokenBalance(_packedTokenBalance[from][bin], index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = ObjectLib32.updateTokenBalance(_packedTokenBalance[to][bin], index, values[i], ObjectLib32.Operations.ADD);\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        _packedTokenBalance[to][lastBin] = balTo;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        balTo = _packedTokenBalance[to][bin];\\n                        lastBin = bin;\\n                    }\\n                    balFrom = balFrom.updateTokenBalance(index, values[i], ObjectLib32.Operations.SUB);\\n                    balTo = balTo.updateTokenBalance(index, values[i], ObjectLib32.Operations.ADD);\\n                }\\n                ERC20SubToken erc20 = _erc20s[ids[i]];\\n                erc20.emitTransferEvent(from, to, values[i]);\\n            }\\n        }\\n        if (lastBin != ~uint256(0)) {\\n            _packedTokenBalance[from][lastBin] = balFrom;\\n            _packedTokenBalance[to][lastBin] = balTo;\\n        }\\n    }\\n\\n    /// @notice grant or revoke the ability for an address to transfer token on behalf of another address.\\n    /// @param sender address granting/revoking the approval.\\n    /// @param operator address being granted/revoked ability to transfer.\\n    /// @param approved whether the operator is revoked or approved.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(msg.sender == sender || _metaTransactionContracts[msg.sender] || _superOperators[msg.sender], \\\"NOT_AUTHORIZED\\\");\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice grant or revoke the ability for an address to transfer token on your behalf.\\n    /// @param operator address being granted/revoked ability to transfer.\\n    /// @param approved whether the operator is revoked or approved.\\n    function setApprovalForAll(address operator, bool approved) external {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice return whether an oeprator has the ability to transfer on behalf of another address.\\n    /// @param owner address who would have granted the rights.\\n    /// @param operator address being given the ability to transfer.\\n    /// @return isOperator whether the operator has approval rigths or not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    function isAuthorizedToTransfer(address owner, address sender) external view returns (bool) {\\n        return _metaTransactionContracts[sender] || _superOperators[sender] || _operatorsForAll[owner][sender];\\n    }\\n\\n    function isAuthorizedToApprove(address sender) external view returns (bool) {\\n        return _metaTransactionContracts[sender] || _superOperators[sender];\\n    }\\n\\n    function batchBurnFrom(\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(from != address(0), \\\"INVALID_FROM_ZERO_ADDRESS\\\");\\n        require(\\n            from == msg.sender || _metaTransactionContracts[msg.sender] || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        _batchBurnFrom(from, ids, amounts);\\n    }\\n\\n    /// @notice burn token for a specific owner and subToken.\\n    /// @param from fron which address the token are burned from.\\n    /// @param id subToken id.\\n    /// @param value amount of tokens to burn.\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) external {\\n        require(\\n            from == msg.sender || _superOperators[msg.sender] || _operatorsForAll[from][msg.sender] || _metaTransactionContracts[msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n        _burn(from, id, value);\\n    }\\n\\n    /// @notice burn token for a specific subToken.\\n    /// @param id subToken id.\\n    /// @param value amount of tokens to burn.\\n    function burn(uint256 id, uint256 value) external {\\n        _burn(msg.sender, id, value);\\n    }\\n\\n    // ///////////////// INTERNAL //////////////////////////\\n\\n    function _batchBurnFrom(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256 balFrom = 0;\\n        uint256 supply = 0;\\n        uint256 lastBin = ~uint256(0);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (amounts[i] != 0) {\\n                (uint256 bin, uint256 index) = ids[i].getTokenBinIndex();\\n                if (lastBin == ~uint256(0)) {\\n                    lastBin = bin;\\n                    balFrom = _packedTokenBalance[from][bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                    supply = _packedSupplies[bin].updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                } else {\\n                    if (bin != lastBin) {\\n                        _packedTokenBalance[from][lastBin] = balFrom;\\n                        balFrom = _packedTokenBalance[from][bin];\\n                        _packedSupplies[lastBin] = supply;\\n                        supply = _packedSupplies[bin];\\n                        lastBin = bin;\\n                    }\\n\\n                    balFrom = balFrom.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                    supply = supply.updateTokenBalance(index, amounts[i], ObjectLib32.Operations.SUB);\\n                }\\n                _erc20s[ids[i]].emitTransferEvent(from, address(0), amounts[i]);\\n            }\\n        }\\n        if (lastBin != ~uint256(0)) {\\n            _packedTokenBalance[from][lastBin] = balFrom;\\n            _packedSupplies[lastBin] = supply;\\n        }\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) internal {\\n        ERC20SubToken erc20 = _erc20s[id];\\n        (uint256 bin, uint256 index) = id.getTokenBinIndex();\\n        _packedTokenBalance[from][bin] = ObjectLib32.updateTokenBalance(_packedTokenBalance[from][bin], index, value, ObjectLib32.Operations.SUB);\\n        _packedSupplies[bin] = ObjectLib32.updateTokenBalance(_packedSupplies[bin], index, value, ObjectLib32.Operations.SUB);\\n        erc20.emitTransferEvent(from, address(0), value);\\n    }\\n\\n    function _addSubToken(ERC20SubToken subToken) internal returns (uint256 id) {\\n        id = _erc20s.length;\\n        require(subToken.groupAddress() == address(this), \\\"INVALID_GROUP\\\");\\n        require(subToken.groupTokenId() == id, \\\"INVALID_ID\\\");\\n        _erc20s.push(subToken);\\n        emit SubToken(subToken);\\n    }\\n\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_SUPER_OPERATOR\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    function _setMinter(address minter, bool enabled) internal {\\n        _minters[minter] = enabled;\\n        emit Minter(minter, enabled);\\n    }\\n\\n    // ///////////////// UTILITIES /////////////////////////\\n    using AddressUtils for address;\\n    using ObjectLib32 for ObjectLib32.Operations;\\n    using ObjectLib32 for uint256;\\n    using SafeMath for uint256;\\n\\n    // ////////////////// DATA ///////////////////////////////\\n    mapping(uint256 => uint256) internal _packedSupplies;\\n    mapping(address => mapping(uint256 => uint256)) internal _packedTokenBalance;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    ERC20SubToken[] internal _erc20s;\\n    mapping(address => bool) internal _minters;\\n\\n    // ////////////// CONSTRUCTOR ////////////////////////////\\n\\n    struct SubTokenData {\\n        string name;\\n        string symbol;\\n    }\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin,\\n        address initialMinter\\n    ) internal {\\n        _admin = admin;\\n        _setMetaTransactionProcessor(metaTransactionContract, true);\\n        _setMinter(initialMinter, true);\\n    }\\n}\\n\",\"keccak256\":\"0x640cba5e8b544f8bf8420d7eda75f42bedbff153ce377160bae751e7b70520c8\"},\"src/BaseWithStorage/ERC20SubToken.sol\":{\"content\":\"pragma solidity 0.6.5;\\n\\nimport \\\"../contracts_common/src/Libraries/SafeMathWithRequire.sol\\\";\\nimport \\\"../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\nimport \\\"../contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\\\";\\n\\nimport \\\"./ERC20Group.sol\\\";\\n\\n\\ncontract ERC20SubToken {\\n    // TODO add natspec, currently blocked by solidity compiler issue\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // TODO add natspec, currently blocked by solidity compiler issue\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice A descriptive name for the tokens\\n    /// @return name of the tokens\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @notice An abbreviated name for the tokens\\n    /// @return symbol of the tokens\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice the tokenId in ERC20Group\\n    /// @return the tokenId in ERC20Group\\n    function groupTokenId() external view returns (uint256) {\\n        return _index;\\n    }\\n\\n    /// @notice the ERC20Group address\\n    /// @return the address of the group\\n    function groupAddress() external view returns (address) {\\n        return address(_group);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _group.supplyOf(_index);\\n    }\\n\\n    function balanceOf(address who) external view returns (uint256) {\\n        return _group.balanceOf(who, _index);\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return uint8(0);\\n    }\\n\\n    function transfer(address to, uint256 amount) external returns (bool success) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool success) {\\n        if (msg.sender != from && !_group.isAuthorizedToTransfer(from, msg.sender)) {\\n            uint256 allowance = _mAllowed[from][msg.sender];\\n            if (allowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(allowance >= amount, \\\"NOT_AUTHOIZED_ALLOWANCE\\\");\\n                _mAllowed[from][msg.sender] = allowance.sub(amount);\\n            }\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool success) {\\n        _approveFor(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveFor(\\n        address from,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success) {\\n        require(msg.sender == from || _group.isAuthorizedToApprove(msg.sender), \\\"NOT_AUTHORIZED\\\");\\n        _approveFor(from, spender, amount);\\n        return true;\\n    }\\n\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(msg.sender == address(_group), \\\"NOT_AUTHORIZED_GROUP_ONLY\\\");\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    // /////////////////// INTERNAL ////////////////////////\\n\\n    function _approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0) && spender != address(0), \\\"INVALID_FROM_OR_SPENDER\\\");\\n        _mAllowed[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function allowance(address owner, address spender) external view returns (uint256 remaining) {\\n        return _mAllowed[owner][spender];\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        _group.singleTransferFrom(from, to, _index, amount);\\n    }\\n\\n    function _firstBytes32(bytes memory src) public pure returns (bytes32 output) {\\n        assembly {\\n            output := mload(add(src, 32))\\n        }\\n    }\\n\\n    // ///////////////////// UTILITIES ///////////////////////\\n    using SafeMathWithRequire for uint256;\\n\\n    // //////////////////// CONSTRUCTOR /////////////////////\\n    constructor(\\n        ERC20Group group,\\n        uint256 index,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) public {\\n        _group = group;\\n        _index = index;\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    // ////////////////////// DATA ///////////////////////////\\n    ERC20Group immutable _group;\\n    uint256 immutable _index;\\n    mapping(address => mapping(address => uint256)) internal _mAllowed;\\n    string internal _name;\\n    string internal _symbol;\\n}\\n\",\"keccak256\":\"0x40f3242dab2e9dd9d7fe24e1cf4f2a741667094f1604c8e11dc8312507fdeade\"},\"src/Catalyst/ERC20GroupGem.sol\":{\"content\":\"pragma solidity 0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseWithStorage/ERC20Group.sol\\\";\\n\\n\\ncontract ERC20GroupGem is ERC20Group {\\n    function addGems(ERC20SubToken[] calldata catalysts) external {\\n        require(msg.sender == _admin, \\\"NOT_AUTHORIZED_ADMIN\\\");\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            _addSubToken(catalysts[i]);\\n        }\\n    }\\n\\n    constructor(\\n        address metaTransactionContract,\\n        address admin,\\n        address initialMinter\\n    ) public ERC20Group(metaTransactionContract, admin, initialMinter) {}\\n}\\n\",\"keccak256\":\"0xe79b10720d9371b4da49155e99788f46bf5407b14879bca13b69655952da9f92\"},\"src/contracts_common/src/BaseWithStorage/Admin.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\ncontract Admin {\\n    address internal _admin;\\n\\n    /// @dev emitted when the contract administrator is changed.\\n    /// @param oldAdmin address of the previous administrator.\\n    /// @param newAdmin address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @dev gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe5606264fdcdb48191f172743be4fac889f183ce97e907dba4cc5b3fe41b7f9a\"},\"src/contracts_common/src/BaseWithStorage/MetaTransactionReceiver.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./Admin.sol\\\";\\n\\n\\ncontract MetaTransactionReceiver is Admin {\\n    mapping(address => bool) internal _metaTransactionContracts;\\n\\n    /// @dev emiited when a meta transaction processor is enabled/disabled\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);\\n\\n    /// @dev Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).\\n    /// @param metaTransactionProcessor address that will be given/removed metaTransactionProcessor rights.\\n    /// @param enabled set whether the metaTransactionProcessor is enabled or disabled.\\n    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public {\\n        require(msg.sender == _admin, \\\"only admin can setup metaTransactionProcessors\\\");\\n        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {\\n        _metaTransactionContracts[metaTransactionProcessor] = enabled;\\n        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);\\n    }\\n\\n    /// @dev check whether address `who` is given meta-transaction execution rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has meta-transaction execution rights.\\n    function isMetaTransactionProcessor(address who) external view returns (bool) {\\n        return _metaTransactionContracts[who];\\n    }\\n}\\n\",\"keccak256\":\"0x3103cbc4f6bf91e2866014622a693c9562f8341b22f1bd2891210b4d4cec468f\"},\"src/contracts_common/src/BaseWithStorage/SuperOperators.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./Admin.sol\\\";\\n\\n\\ncontract SuperOperators is Admin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x226c0f78303ffa5d40f3517fbaff34775519e499ab1365bfc4997a86707ff2af\"},\"src/contracts_common/src/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\nlibrary AddressUtils {\\n    function toPayable(address _address) internal pure returns (address payable _payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0x52ed5ebe95a057d4f41b5f44711588816059c18c7f7e48aa0b6f4078812e80de\"},\"src/contracts_common/src/Libraries/BytesUtil.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\nlibrary BytesUtil {\\n    function memcpy(\\n        uint256 dest,\\n        uint256 src,\\n        uint256 len\\n    ) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    function pointerToBytes(uint256 src, uint256 len) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(len);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        memcpy(retptr, src, len);\\n        return ret;\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, a))\\n            mstore(0x40, add(m, 52))\\n            b := m\\n        }\\n    }\\n\\n    function uint256ToBytes(uint256 a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 32), a)\\n            mstore(0x40, add(m, 64))\\n            b := m\\n        }\\n    }\\n\\n    function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) {\\n        if (data.length < (36 + 32)) {\\n            return false;\\n        }\\n        uint256 value;\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value == uint256(_address);\\n    }\\n\\n    function doParamEqualsUInt256(\\n        bytes memory data,\\n        uint256 i,\\n        uint256 value\\n    ) internal pure returns (bool) {\\n        if (data.length < (36 + (i + 1) * 32)) {\\n            return false;\\n        }\\n        uint256 offset = 36 + i * 32;\\n        uint256 valuePresent;\\n        assembly {\\n            valuePresent := mload(add(data, offset))\\n        }\\n        return valuePresent == value;\\n    }\\n\\n    function overrideFirst32BytesWithAddress(bytes memory data, address _address) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n\\n        bytes memory addressBytes = addressToBytes(_address);\\n        uint256 src;\\n        assembly {\\n            src := add(addressBytes, 32)\\n        }\\n\\n        memcpy(dest, src, 20);\\n        return data;\\n    }\\n\\n    function overrideFirstTwo32BytesWithAddressAndInt(\\n        bytes memory data,\\n        address _address,\\n        uint256 _value\\n    ) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n        bytes memory bbytes = addressToBytes(_address);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 20);\\n\\n        assembly {\\n            dest := add(data, 68)\\n        } // 48 = 32 (offset) + 4 (func sig) + 32 (next slot)\\n        bbytes = uint256ToBytes(_value);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 32);\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xe6deec26a5bb00520a8025fb2b7b0155e3cad78349934bbd24e8d524c54114db\"},\"src/contracts_common/src/Libraries/ObjectLib32.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMathWithRequire.sol\\\";\\n\\n\\nlibrary ObjectLib32 {\\n    using SafeMathWithRequire for uint256;\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 constant TYPES_BITS_SIZE = 32; // Max size of each object\\n    uint256 constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /**\\n     * @dev Return the bin number and index within that bin where ID is\\n     * @param tokenId Object type\\n     * @return bin Bin number\\n     * @return index ID's index within that bin\\n     */\\n    function getTokenBinIndex(uint256 tokenId) internal pure returns (uint256 bin, uint256 index) {\\n        bin = (tokenId * TYPES_BITS_SIZE) / 256;\\n        index = tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n     * @dev update the balance of a type provided in binBalances\\n     * @param binBalances Uint256 containing the balances of objects\\n     * @param index Index of the object in the provided bin\\n     * @param amount Value to update the type balance\\n     * @param operation Which operation to conduct :\\n     *     Operations.REPLACE : Replace type balance with amount\\n     *     Operations.ADD     : ADD amount to type balance\\n     *     Operations.SUB     : Substract amount from type balance\\n     */\\n    function updateTokenBalance(\\n        uint256 binBalances,\\n        uint256 index,\\n        uint256 amount,\\n        Operations operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (operation == Operations.ADD) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance.add(amount));\\n        } else if (operation == Operations.SUB) {\\n            objectBalance = getValueInBin(binBalances, index);\\n            require(objectBalance >= amount, \\\"can't substract more than there is\\\");\\n            newBinBalance = writeValueInBin(binBalances, index, objectBalance.sub(amount));\\n        } else if (operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(binBalances, index, amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n\\n    /*\\n     * @dev return value in binValue at position index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index index at which to retrieve value\\n     * @return Value at given index in bin\\n     */\\n    function getValueInBin(uint256 binValue, uint256 index) internal pure returns (uint256) {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n     * @dev return the updated binValue after writing amount at index\\n     * @param binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n     * @param index Index at which to retrieve value\\n     * @param amount Value to store at index in bin\\n     * @return Value at given index in bin\\n     */\\n    function writeValueInBin(\\n        uint256 binValue,\\n        uint256 index,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        require(amount < 2**TYPES_BITS_SIZE, \\\"Amount to write in bin is too large\\\");\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (index + 1);\\n        return (binValue & ~(mask << leftShift)) | (amount << leftShift);\\n    }\\n}\\n\",\"keccak256\":\"0xc2b73b8a4e836615ee9cb570406c532233a293024dad944ddb87f8957fce8b25\"},\"src/contracts_common/src/Libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xdd13b563f215fd558bab94e03eb5a96e0cb30e7e156198bf448514876d1fa1bd\"},\"src/contracts_common/src/Libraries/SafeMathWithRequire.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        require(c / a == b, \\\"overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"divbyzero\\\");\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"undeflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c >= a, \\\"overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x3ed5e25131dfcd07b3b11cb45b33dc24d0721acc0a034c85c2f17914fcea2dcd\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200282a3803806200282a83398101604081905262000034916200013d565b600080546001600160a01b0319166001600160a01b0384161790558282826200005f83600162000081565b620000758160016001600160e01b03620000e516565b505050505050620001c4565b6001600160a01b03821660009081526002602052604090819020805460ff1916831515179055517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb90620000d9908490849062000190565b60405180910390a15050565b6001600160a01b03821660009081526007602052604090819020805460ff1916831515179055517fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb6090620000d9908490849062000190565b60008060006060848603121562000152578283fd5b83516200015f81620001ab565b60208501519093506200017281620001ab565b60408501519092506200018581620001ab565b809150509250925092565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b0381168114620001c157600080fd5b50565b61265680620001d46000396000f3fe608060405234801561001057600080fd5b50600436106101975760003560e01c80638f283970116100e3578063b390c0ab1161008c578063e985e9c511610066578063e985e9c51461035f578063eaa5125114610372578063eeb5a5d11461038557610197565b8063b390c0ab14610326578063cf456ae714610339578063dc5074af1461034c57610197565b8063aa271e1a116100bd578063aa271e1a146102ed578063ab1c2cf314610300578063ac9fe4211461031357610197565b80638f283970146102b4578063a22cb465146102c7578063a531e0fa146102da57610197565b80634e1273f411610145578063805349341161011f578063805349341461027b5780638806792f1461028e5780638a04af6a146102a157610197565b80634e1273f414610233578063654b748a146102535780636e9960c31461026657610197565b8063124d91e511610176578063124d91e5146101fa578063156e29f61461020d57806317fad7fc1461022057610197565b8062fdd58e1461019c5780630ca83480146101c55780630d70e29c146101da575b600080fd5b6101af6101aa366004611fab565b610398565b6040516101bc91906125ff565b60405180910390f35b6101d86101d3366004611efa565b6103e8565b005b6101ed6101e8366004611d9d565b6104b4565b6040516101bc91906121b5565b6101d8610208366004611fd6565b61052a565b6101d861021b366004611fd6565b6105c4565b6101d861022e366004611dd5565b610710565b61024661024136600461200a565b610a82565b6040516101bc9190612171565b6101ed610261366004611d65565b610b56565b61026e610b74565b6040516101bc9190612104565b6101d8610289366004611efa565b610b83565b6101af61029c3660046120b3565b610ca1565b6101d86102af366004611f7a565b610cdb565b6101d86102c2366004611d65565b610d13565b6101d86102d5366004611f7a565b610dbe565b6101d86102e8366004611eb5565b610dc9565b6101ed6102fb366004611d65565b610fcd565b6101d861030e366004612073565b610feb565b6101d8610321366004611f7a565b611052565b6101d86103343660046120e3565b6110de565b6101d8610347366004611f7a565b6110e9565b6101ed61035a366004611d65565b61111d565b6101ed61036d366004611d9d565b61113b565b6101ed610380366004611d65565b61118d565b6101d8610393366004611e67565b6111d2565b60008060006103a684611239565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506103df908263ffffffff61124a16565b95945050505050565b3360009081526007602052604090205460ff166104205760405162461bcd60e51b8152600401610417906125c8565b60405180910390fd5b82811461043f5760405162461bcd60e51b8152600401610417906121f7565b6104ad858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061126492505050565b5050505050565b6001600160a01b03811660009081526002602052604081205460ff16806104f357506001600160a01b03821660009081526001602052604090205460ff165b8061052357506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b6001600160a01b03831633148061055057503360009081526001602052604090205460ff165b8061057e57506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061059857503360009081526002602052604090205460ff165b6105b45760405162461bcd60e51b815260040161041790612591565b6105bf8383836114eb565b505050565b3360009081526007602052604090205460ff166105f35760405162461bcd60e51b8152600401610417906125c8565b6000806105ff84611239565b6001600160a01b038716600090815260046020908152604080832085845290915281205492945090925061063d91908390869063ffffffff61160416565b6001600160a01b0386166000908152600460209081526040808320868452825280832093909355600390529081205461067f918390869063ffffffff61160416565b600083815260036020526040902055600680548590811061069c57fe5b600091825260208220015460405163536a4ee560e11b81526001600160a01b039091169163a6d49dca916106d7919089908890600401612118565b600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b505050505050505050565b82811461072f5760405162461bcd60e51b8152600401610417906121f7565b6001600160a01b0385166107555760405162461bcd60e51b815260040161041790612265565b6001600160a01b03861633148061077b57503360009081526001602052604090205460ff165b806107a957506001600160a01b038616600090815260056020908152604080832033845290915290205460ff165b806107c357503360009081526002602052604090205460ff165b6107df5760405162461bcd60e51b815260040161041790612591565b600019600080805b86811015610a32578585828181106107fb57fe5b90506020020135600014610a2a576000806108278a8a8581811061081b57fe5b90506020020135611239565b915091506000198614156108ca576001600160a01b038c166000908152600460209081526040808320858452909152902054919550859161087d90828a8a8781811061086f57fe5b905060200201356001611604565b6001600160a01b038c1660009081526004602090815260408083208684529091529020549095506108c390828a8a878181106108b557fe5b905060200201356000611604565b9350610983565b85821461092c576001600160a01b038c811660009081526004602081815260408084208b85528083528185209a909a55938f16835290815282822098825288815282822096909655838152958552808620549690945292909320549293929184905b6109558189898681811061093c57fe5b899392602090910201359050600163ffffffff61160416565b94506109808189898681811061096757fe5b889392602090910201359050600063ffffffff61160416565b93505b600060068b8b8681811061099357fe5b90506020020135815481106109a457fe5b6000918252602090912001546001600160a01b031690508063a6d49dca8e8e8c8c898181106109cf57fe5b905060200201356040518463ffffffff1660e01b81526004016109f493929190612118565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b505050505050505b6001016107e7565b506000198314610705576001600160a01b03808a1660009081526004602081815260408084208885528252808420879055938c168352908152828220868352905220819055505050505050505050565b6060838214610aa35760405162461bcd60e51b8152600401610417906121f7565b8167ffffffffffffffff81118015610aba57600080fd5b50604051908082528060200260200182016040528015610ae4578160200160208202803683370190505b50905060005b82811015610b4d57610b2e868683818110610b0157fe5b9050602002016020810190610b169190611d65565b858584818110610b2257fe5b90506020020135610398565b828281518110610b3a57fe5b6020908102919091010152600101610aea565b50949350505050565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031690565b6001600160a01b038516610ba95760405162461bcd60e51b81526004016104179061239e565b6001600160a01b038516331480610bcf57503360009081526002602052604090205460ff165b80610be957503360009081526001602052604090205460ff165b80610c1757506001600160a01b038516600090815260056020908152604080832033845290915290205460ff165b610c335760405162461bcd60e51b815260040161041790612591565b6104ad85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506116d392505050565b6000806000610caf84611239565b6000828152600360205260409020549193509150610cd3908263ffffffff61124a16565b949350505050565b6000546001600160a01b03163314610d055760405162461bcd60e51b8152600401610417906124c6565b610d0f8282611958565b5050565b6000546001600160a01b03163314610d3d5760405162461bcd60e51b815260040161041790612523565b6000546040517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91610d7c916001600160a01b0390911690849061213c565b60405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d0f3383836119ae565b6001600160a01b038316610def5760405162461bcd60e51b815260040161041790612265565b600060068381548110610dfe57fe5b6000918252602090912001546001600160a01b0390811691508516331480610e2e5750336001600160a01b038216145b80610e4857503360009081526002602052604090205460ff165b80610e6257503360009081526001602052604090205460ff165b80610e9057506001600160a01b038516600090815260056020908152604080832033845290915290205460ff165b610eac5760405162461bcd60e51b815260040161041790612591565b600080610eb885611239565b6001600160a01b03891660009081526004602090815260408083208584529091529020549193509150610ef4908286600163ffffffff61160416565b6001600160a01b038089166000908152600460208181526040808420888552825280842095909555928a168252825282812085825290915290812054610f43918390879063ffffffff61160416565b6001600160a01b03808816600090815260046020818152604080842088855290915291829020939093555163536a4ee560e11b81529085169163a6d49dca91610f92918b918b918a9101612118565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b031660009081526007602052604090205460ff1690565b6000546001600160a01b031633146110155760405162461bcd60e51b815260040161041790612367565b60005b818110156105bf5761104983838381811061102f57fe5b90506020020160208101906110449190611d65565b611a58565b50600101611018565b6000546001600160a01b0316331461107c5760405162461bcd60e51b8152600401610417906123d5565b6001600160a01b03821660009081526001602052604090819020805460ff1916831515179055517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8906110d29084908490612156565b60405180910390a15050565b610d0f3383836114eb565b6000546001600160a01b031633146111135760405162461bcd60e51b815260040161041790612367565b610d0f8282611c32565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff16806105235750506001600160a01b031660009081526001602052604090205460ff16919050565b6001600160a01b03811660009081526002602052604081205460ff16806111cc57506001600160a01b03821660009081526001602052604090205460ff165b92915050565b336001600160a01b03841614806111f857503360009081526002602052604090205460ff165b8061121257503360009081526001602052604090205460ff165b61122e5760405162461bcd60e51b815260040161041790612591565b6105bf8383836119ae565b610100602082020491600790911690565b600181016020026101000382901c63ffffffff1692915050565b600019600080805b85518110156114a85784818151811061128157fe5b60200260200101516000146114a0576000806112af8884815181106112a257fe5b6020026020010151611239565b9150915060001986141561134c5781955061130b818885815181106112d057fe5b6020908102919091018101516001600160a01b038d16600090815260048352604080822088835290935291822054929163ffffffff61160416565b94506113458188858151811061131d57fe5b602090810291909101810151600086815260039092526040822054929163ffffffff61160416565b93506113f8565b85821461139d576001600160a01b0389166000908152600460209081526040808320898452825280832097909755838252868220549782526003905285812094909455818452939092205491939284905b6113c8818885815181106113ad57fe5b6020026020010151600088611604909392919063ffffffff16565b94506113f5818885815181106113da57fe5b6020026020010151600087611604909392919063ffffffff16565b93505b600688848151811061140657fe5b60200260200101518154811061141857fe5b600091825260208220015488516001600160a01b039091169163a6d49dca918c908b908890811061144557fe5b60200260200101516040518463ffffffff1660e01b815260040161146b93929190612118565b600060405180830381600087803b15801561148557600080fd5b505af1158015611499573d6000803e3d6000fd5b5050505050505b60010161126c565b5060001983146114e3576001600160a01b03861660009081526004602090815260408083208684528252808320859055600390915290208190555b505050505050565b6000600683815481106114fa57fe5b60009182526020822001546001600160a01b031691508061151a85611239565b6001600160a01b038816600090815260046020908152604080832085845290915290205491935091506115509082866001611604565b6001600160a01b038716600090815260046020908152604080832086845282528083209390935560039052205461158a9082866001611604565b60008381526003602052604080822092909255905163536a4ee560e11b81526001600160a01b0385169163a6d49dca916115ca918a918990600401612118565b600060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b50505050505050505050565b6000808083600281111561161457fe5b141561164757611624868661124a565b9050611640868661163b848863ffffffff611c8816565b611cab565b9150610b4d565b600183600281111561165557fe5b141561169c57611665868661124a565b9050838110156116875760405162461bcd60e51b815260040161041790612469565b611640868661163b848863ffffffff611cf416565b60028360028111156116aa57fe5b14156116bb57611640868686611cab565b60405162461bcd60e51b815260040161041790612330565b600080600019815b8551811015611916578481815181106116f057fe5b602002602001015160001461190e576000806117118884815181106112a257fe5b915091506000198414156117b7578193506117708188858151811061173257fe5b6020908102919091018101516001600160a01b038d16600090815260048352604080822088835290935291909120549190600163ffffffff61160416565b95506117b08188858151811061178257fe5b602002602001015160016003600087815260200190815260200160002054611604909392919063ffffffff16565b9450611865565b83821461180a576001600160a01b03891660009081526004602090815260408083208784528252808320989098558382528782205495825260039052868120959095558185529490932054919391929182905b6118358188858151811061181a57fe5b6020026020010151600189611604909392919063ffffffff16565b95506118628188858151811061184757fe5b6020026020010151600188611604909392919063ffffffff16565b94505b600688848151811061187357fe5b60200260200101518154811061188557fe5b600091825260208220015488516001600160a01b039091169163a6d49dca918c91908b90889081106118b357fe5b60200260200101516040518463ffffffff1660e01b81526004016118d993929190612118565b600060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b5050505050505b6001016116db565b5060001981146114e3576001600160a01b0386166000908152600460209081526040808320848452825280832086905560039091529020829055505050505050565b6001600160a01b03821660009081526002602052604090819020805460ff1916831515179055517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb906110d29084908490612156565b6001600160a01b03821660009081526001602052604090205460ff16156119e75760405162461bcd60e51b81526004016104179061222e565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611a4b9085906121b5565b60405180910390a3505050565b60006006805490509050306001600160a01b0316826001600160a01b0316638b7b59d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa557600080fd5b505afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190611d81565b6001600160a01b031614611b035760405162461bcd60e51b8152600401610417906121c0565b80826001600160a01b031663b8f9260b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3d57600080fd5b505afa158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7591906120cb565b14611b925760405162461bcd60e51b815260040161041790612432565b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556040517f2f334d8c412c0143e93911652cc34f5fcaae2f287a574eae9736d648f9b4363190611c25908490612104565b60405180910390a1919050565b6001600160a01b03821660009081526007602052604090819020805460ff1916831515179055517fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60906110d29084908490612156565b818101828110156111cc5760405162461bcd60e51b81526004016104179061255a565b60006401000000008210611cd15760405162461bcd60e51b81526004016104179061229c565b5063ffffffff600183016020026101000390811b1984169082901b179392505050565b600082821115611d165760405162461bcd60e51b8152600401610417906122f9565b50900390565b60008083601f840112611d2d578182fd5b50813567ffffffffffffffff811115611d44578182fd5b6020830191508360208083028501011115611d5e57600080fd5b9250929050565b600060208284031215611d76578081fd5b813561052381612608565b600060208284031215611d92578081fd5b815161052381612608565b60008060408385031215611daf578081fd5b8235611dba81612608565b91506020830135611dca81612608565b809150509250929050565b60008060008060008060808789031215611ded578182fd5b8635611df881612608565b95506020870135611e0881612608565b9450604087013567ffffffffffffffff80821115611e24578384fd5b611e308a838b01611d1c565b90965094506060890135915080821115611e48578384fd5b50611e5589828a01611d1c565b979a9699509497509295939492505050565b600080600060608486031215611e7b578283fd5b8335611e8681612608565b92506020840135611e9681612608565b915060408401358015158114611eaa578182fd5b809150509250925092565b60008060008060808587031215611eca578384fd5b8435611ed581612608565b93506020850135611ee581612608565b93969395505050506040820135916060013590565b600080600080600060608688031215611f11578081fd5b8535611f1c81612608565b9450602086013567ffffffffffffffff80821115611f38578283fd5b611f4489838a01611d1c565b90965094506040880135915080821115611f5c578283fd5b50611f6988828901611d1c565b969995985093965092949392505050565b60008060408385031215611f8c578182fd5b8235611f9781612608565b915060208301358015158114611dca578182fd5b60008060408385031215611fbd578182fd5b8235611fc881612608565b946020939093013593505050565b600080600060608486031215611fea578283fd5b8335611ff581612608565b95602085013595506040909401359392505050565b6000806000806040858703121561201f578384fd5b843567ffffffffffffffff80821115612036578586fd5b61204288838901611d1c565b9096509450602087013591508082111561205a578384fd5b5061206787828801611d1c565b95989497509550505050565b60008060208385031215612085578182fd5b823567ffffffffffffffff81111561209b578283fd5b6120a785828601611d1c565b90969095509350505050565b6000602082840312156120c4578081fd5b5035919050565b6000602082840312156120dc578081fd5b5051919050565b600080604083850312156120f5578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039290921682521515602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156121a95783518352928401929184019160010161218d565b50909695505050505050565b901515815260200190565b6020808252600d908201527f494e56414c49445f47524f555000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f494e434f4e53495354454e545f4c454e4754480000000000604082015260600190565b60208082526016908201527f494e56414c49445f53555045525f4f50455241544f5200000000000000000000604082015260600190565b60208082526017908201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604082015260600190565b60208082526023908201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160408201527f7267650000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526008908201527f756e6465666c6f77000000000000000000000000000000000000000000000000604082015260600190565b60208082526011908201527f496e76616c6964206f7065726174696f6e000000000000000000000000000000604082015260600190565b60208082526014908201527f4e4f545f415554484f52495a45445f41444d494e000000000000000000000000604082015260600190565b60208082526019908201527f494e56414c49445f46524f4d5f5a45524f5f4144445245535300000000000000604082015260600190565b6020808252602c908201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060408201527f6572206f70657261746f72730000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f494e56414c49445f494400000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060408201527f6973000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f6f6e6c792061646d696e2063616e207365747570206d6574615472616e73616360408201527f74696f6e50726f636573736f7273000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604082015260600190565b60208082526008908201527f6f766572666c6f77000000000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4e4f545f415554484f52495a45445f4d494e5445520000000000000000000000604082015260600190565b90815260200190565b6001600160a01b038116811461261d57600080fd5b5056fea2646970667358221220a5e7a0e28642b43f01ff64e9ccab02b3c77129cf7c15bab23d76242a499f8cc064736f6c63430006050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101975760003560e01c80638f283970116100e3578063b390c0ab1161008c578063e985e9c511610066578063e985e9c51461035f578063eaa5125114610372578063eeb5a5d11461038557610197565b8063b390c0ab14610326578063cf456ae714610339578063dc5074af1461034c57610197565b8063aa271e1a116100bd578063aa271e1a146102ed578063ab1c2cf314610300578063ac9fe4211461031357610197565b80638f283970146102b4578063a22cb465146102c7578063a531e0fa146102da57610197565b80634e1273f411610145578063805349341161011f578063805349341461027b5780638806792f1461028e5780638a04af6a146102a157610197565b80634e1273f414610233578063654b748a146102535780636e9960c31461026657610197565b8063124d91e511610176578063124d91e5146101fa578063156e29f61461020d57806317fad7fc1461022057610197565b8062fdd58e1461019c5780630ca83480146101c55780630d70e29c146101da575b600080fd5b6101af6101aa366004611fab565b610398565b6040516101bc91906125ff565b60405180910390f35b6101d86101d3366004611efa565b6103e8565b005b6101ed6101e8366004611d9d565b6104b4565b6040516101bc91906121b5565b6101d8610208366004611fd6565b61052a565b6101d861021b366004611fd6565b6105c4565b6101d861022e366004611dd5565b610710565b61024661024136600461200a565b610a82565b6040516101bc9190612171565b6101ed610261366004611d65565b610b56565b61026e610b74565b6040516101bc9190612104565b6101d8610289366004611efa565b610b83565b6101af61029c3660046120b3565b610ca1565b6101d86102af366004611f7a565b610cdb565b6101d86102c2366004611d65565b610d13565b6101d86102d5366004611f7a565b610dbe565b6101d86102e8366004611eb5565b610dc9565b6101ed6102fb366004611d65565b610fcd565b6101d861030e366004612073565b610feb565b6101d8610321366004611f7a565b611052565b6101d86103343660046120e3565b6110de565b6101d8610347366004611f7a565b6110e9565b6101ed61035a366004611d65565b61111d565b6101ed61036d366004611d9d565b61113b565b6101ed610380366004611d65565b61118d565b6101d8610393366004611e67565b6111d2565b60008060006103a684611239565b6001600160a01b038716600090815260046020908152604080832085845290915290205491935091506103df908263ffffffff61124a16565b95945050505050565b3360009081526007602052604090205460ff166104205760405162461bcd60e51b8152600401610417906125c8565b60405180910390fd5b82811461043f5760405162461bcd60e51b8152600401610417906121f7565b6104ad858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061126492505050565b5050505050565b6001600160a01b03811660009081526002602052604081205460ff16806104f357506001600160a01b03821660009081526001602052604090205460ff165b8061052357506001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff165b9392505050565b6001600160a01b03831633148061055057503360009081526001602052604090205460ff165b8061057e57506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061059857503360009081526002602052604090205460ff165b6105b45760405162461bcd60e51b815260040161041790612591565b6105bf8383836114eb565b505050565b3360009081526007602052604090205460ff166105f35760405162461bcd60e51b8152600401610417906125c8565b6000806105ff84611239565b6001600160a01b038716600090815260046020908152604080832085845290915281205492945090925061063d91908390869063ffffffff61160416565b6001600160a01b0386166000908152600460209081526040808320868452825280832093909355600390529081205461067f918390869063ffffffff61160416565b600083815260036020526040902055600680548590811061069c57fe5b600091825260208220015460405163536a4ee560e11b81526001600160a01b039091169163a6d49dca916106d7919089908890600401612118565b600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b505050505050505050565b82811461072f5760405162461bcd60e51b8152600401610417906121f7565b6001600160a01b0385166107555760405162461bcd60e51b815260040161041790612265565b6001600160a01b03861633148061077b57503360009081526001602052604090205460ff165b806107a957506001600160a01b038616600090815260056020908152604080832033845290915290205460ff165b806107c357503360009081526002602052604090205460ff165b6107df5760405162461bcd60e51b815260040161041790612591565b600019600080805b86811015610a32578585828181106107fb57fe5b90506020020135600014610a2a576000806108278a8a8581811061081b57fe5b90506020020135611239565b915091506000198614156108ca576001600160a01b038c166000908152600460209081526040808320858452909152902054919550859161087d90828a8a8781811061086f57fe5b905060200201356001611604565b6001600160a01b038c1660009081526004602090815260408083208684529091529020549095506108c390828a8a878181106108b557fe5b905060200201356000611604565b9350610983565b85821461092c576001600160a01b038c811660009081526004602081815260408084208b85528083528185209a909a55938f16835290815282822098825288815282822096909655838152958552808620549690945292909320549293929184905b6109558189898681811061093c57fe5b899392602090910201359050600163ffffffff61160416565b94506109808189898681811061096757fe5b889392602090910201359050600063ffffffff61160416565b93505b600060068b8b8681811061099357fe5b90506020020135815481106109a457fe5b6000918252602090912001546001600160a01b031690508063a6d49dca8e8e8c8c898181106109cf57fe5b905060200201356040518463ffffffff1660e01b81526004016109f493929190612118565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b505050505050505b6001016107e7565b506000198314610705576001600160a01b03808a1660009081526004602081815260408084208885528252808420879055938c168352908152828220868352905220819055505050505050505050565b6060838214610aa35760405162461bcd60e51b8152600401610417906121f7565b8167ffffffffffffffff81118015610aba57600080fd5b50604051908082528060200260200182016040528015610ae4578160200160208202803683370190505b50905060005b82811015610b4d57610b2e868683818110610b0157fe5b9050602002016020810190610b169190611d65565b858584818110610b2257fe5b90506020020135610398565b828281518110610b3a57fe5b6020908102919091010152600101610aea565b50949350505050565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031690565b6001600160a01b038516610ba95760405162461bcd60e51b81526004016104179061239e565b6001600160a01b038516331480610bcf57503360009081526002602052604090205460ff165b80610be957503360009081526001602052604090205460ff165b80610c1757506001600160a01b038516600090815260056020908152604080832033845290915290205460ff165b610c335760405162461bcd60e51b815260040161041790612591565b6104ad85858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506116d392505050565b6000806000610caf84611239565b6000828152600360205260409020549193509150610cd3908263ffffffff61124a16565b949350505050565b6000546001600160a01b03163314610d055760405162461bcd60e51b8152600401610417906124c6565b610d0f8282611958565b5050565b6000546001600160a01b03163314610d3d5760405162461bcd60e51b815260040161041790612523565b6000546040517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91610d7c916001600160a01b0390911690849061213c565b60405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610d0f3383836119ae565b6001600160a01b038316610def5760405162461bcd60e51b815260040161041790612265565b600060068381548110610dfe57fe5b6000918252602090912001546001600160a01b0390811691508516331480610e2e5750336001600160a01b038216145b80610e4857503360009081526002602052604090205460ff165b80610e6257503360009081526001602052604090205460ff165b80610e9057506001600160a01b038516600090815260056020908152604080832033845290915290205460ff165b610eac5760405162461bcd60e51b815260040161041790612591565b600080610eb885611239565b6001600160a01b03891660009081526004602090815260408083208584529091529020549193509150610ef4908286600163ffffffff61160416565b6001600160a01b038089166000908152600460208181526040808420888552825280842095909555928a168252825282812085825290915290812054610f43918390879063ffffffff61160416565b6001600160a01b03808816600090815260046020818152604080842088855290915291829020939093555163536a4ee560e11b81529085169163a6d49dca91610f92918b918b918a9101612118565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b031660009081526007602052604090205460ff1690565b6000546001600160a01b031633146110155760405162461bcd60e51b815260040161041790612367565b60005b818110156105bf5761104983838381811061102f57fe5b90506020020160208101906110449190611d65565b611a58565b50600101611018565b6000546001600160a01b0316331461107c5760405162461bcd60e51b8152600401610417906123d5565b6001600160a01b03821660009081526001602052604090819020805460ff1916831515179055517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8906110d29084908490612156565b60405180910390a15050565b610d0f3383836114eb565b6000546001600160a01b031633146111135760405162461bcd60e51b815260040161041790612367565b610d0f8282611c32565b6001600160a01b031660009081526002602052604090205460ff1690565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff16806105235750506001600160a01b031660009081526001602052604090205460ff16919050565b6001600160a01b03811660009081526002602052604081205460ff16806111cc57506001600160a01b03821660009081526001602052604090205460ff165b92915050565b336001600160a01b03841614806111f857503360009081526002602052604090205460ff165b8061121257503360009081526001602052604090205460ff165b61122e5760405162461bcd60e51b815260040161041790612591565b6105bf8383836119ae565b610100602082020491600790911690565b600181016020026101000382901c63ffffffff1692915050565b600019600080805b85518110156114a85784818151811061128157fe5b60200260200101516000146114a0576000806112af8884815181106112a257fe5b6020026020010151611239565b9150915060001986141561134c5781955061130b818885815181106112d057fe5b6020908102919091018101516001600160a01b038d16600090815260048352604080822088835290935291822054929163ffffffff61160416565b94506113458188858151811061131d57fe5b602090810291909101810151600086815260039092526040822054929163ffffffff61160416565b93506113f8565b85821461139d576001600160a01b0389166000908152600460209081526040808320898452825280832097909755838252868220549782526003905285812094909455818452939092205491939284905b6113c8818885815181106113ad57fe5b6020026020010151600088611604909392919063ffffffff16565b94506113f5818885815181106113da57fe5b6020026020010151600087611604909392919063ffffffff16565b93505b600688848151811061140657fe5b60200260200101518154811061141857fe5b600091825260208220015488516001600160a01b039091169163a6d49dca918c908b908890811061144557fe5b60200260200101516040518463ffffffff1660e01b815260040161146b93929190612118565b600060405180830381600087803b15801561148557600080fd5b505af1158015611499573d6000803e3d6000fd5b5050505050505b60010161126c565b5060001983146114e3576001600160a01b03861660009081526004602090815260408083208684528252808320859055600390915290208190555b505050505050565b6000600683815481106114fa57fe5b60009182526020822001546001600160a01b031691508061151a85611239565b6001600160a01b038816600090815260046020908152604080832085845290915290205491935091506115509082866001611604565b6001600160a01b038716600090815260046020908152604080832086845282528083209390935560039052205461158a9082866001611604565b60008381526003602052604080822092909255905163536a4ee560e11b81526001600160a01b0385169163a6d49dca916115ca918a918990600401612118565b600060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b50505050505050505050565b6000808083600281111561161457fe5b141561164757611624868661124a565b9050611640868661163b848863ffffffff611c8816565b611cab565b9150610b4d565b600183600281111561165557fe5b141561169c57611665868661124a565b9050838110156116875760405162461bcd60e51b815260040161041790612469565b611640868661163b848863ffffffff611cf416565b60028360028111156116aa57fe5b14156116bb57611640868686611cab565b60405162461bcd60e51b815260040161041790612330565b600080600019815b8551811015611916578481815181106116f057fe5b602002602001015160001461190e576000806117118884815181106112a257fe5b915091506000198414156117b7578193506117708188858151811061173257fe5b6020908102919091018101516001600160a01b038d16600090815260048352604080822088835290935291909120549190600163ffffffff61160416565b95506117b08188858151811061178257fe5b602002602001015160016003600087815260200190815260200160002054611604909392919063ffffffff16565b9450611865565b83821461180a576001600160a01b03891660009081526004602090815260408083208784528252808320989098558382528782205495825260039052868120959095558185529490932054919391929182905b6118358188858151811061181a57fe5b6020026020010151600189611604909392919063ffffffff16565b95506118628188858151811061184757fe5b6020026020010151600188611604909392919063ffffffff16565b94505b600688848151811061187357fe5b60200260200101518154811061188557fe5b600091825260208220015488516001600160a01b039091169163a6d49dca918c91908b90889081106118b357fe5b60200260200101516040518463ffffffff1660e01b81526004016118d993929190612118565b600060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b5050505050505b6001016116db565b5060001981146114e3576001600160a01b0386166000908152600460209081526040808320848452825280832086905560039091529020829055505050505050565b6001600160a01b03821660009081526002602052604090819020805460ff1916831515179055517fb21eb88b4e33b3f1281830a7178d74d8aa73220416215726b68ae23d539515cb906110d29084908490612156565b6001600160a01b03821660009081526001602052604090205460ff16156119e75760405162461bcd60e51b81526004016104179061222e565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611a4b9085906121b5565b60405180910390a3505050565b60006006805490509050306001600160a01b0316826001600160a01b0316638b7b59d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa557600080fd5b505afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190611d81565b6001600160a01b031614611b035760405162461bcd60e51b8152600401610417906121c0565b80826001600160a01b031663b8f9260b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3d57600080fd5b505afa158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7591906120cb565b14611b925760405162461bcd60e51b815260040161041790612432565b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384161790556040517f2f334d8c412c0143e93911652cc34f5fcaae2f287a574eae9736d648f9b4363190611c25908490612104565b60405180910390a1919050565b6001600160a01b03821660009081526007602052604090819020805460ff1916831515179055517fff452b3b9159b024a9098f0058c63eccd90d36b3584608202800d662f962bb60906110d29084908490612156565b818101828110156111cc5760405162461bcd60e51b81526004016104179061255a565b60006401000000008210611cd15760405162461bcd60e51b81526004016104179061229c565b5063ffffffff600183016020026101000390811b1984169082901b179392505050565b600082821115611d165760405162461bcd60e51b8152600401610417906122f9565b50900390565b60008083601f840112611d2d578182fd5b50813567ffffffffffffffff811115611d44578182fd5b6020830191508360208083028501011115611d5e57600080fd5b9250929050565b600060208284031215611d76578081fd5b813561052381612608565b600060208284031215611d92578081fd5b815161052381612608565b60008060408385031215611daf578081fd5b8235611dba81612608565b91506020830135611dca81612608565b809150509250929050565b60008060008060008060808789031215611ded578182fd5b8635611df881612608565b95506020870135611e0881612608565b9450604087013567ffffffffffffffff80821115611e24578384fd5b611e308a838b01611d1c565b90965094506060890135915080821115611e48578384fd5b50611e5589828a01611d1c565b979a9699509497509295939492505050565b600080600060608486031215611e7b578283fd5b8335611e8681612608565b92506020840135611e9681612608565b915060408401358015158114611eaa578182fd5b809150509250925092565b60008060008060808587031215611eca578384fd5b8435611ed581612608565b93506020850135611ee581612608565b93969395505050506040820135916060013590565b600080600080600060608688031215611f11578081fd5b8535611f1c81612608565b9450602086013567ffffffffffffffff80821115611f38578283fd5b611f4489838a01611d1c565b90965094506040880135915080821115611f5c578283fd5b50611f6988828901611d1c565b969995985093965092949392505050565b60008060408385031215611f8c578182fd5b8235611f9781612608565b915060208301358015158114611dca578182fd5b60008060408385031215611fbd578182fd5b8235611fc881612608565b946020939093013593505050565b600080600060608486031215611fea578283fd5b8335611ff581612608565b95602085013595506040909401359392505050565b6000806000806040858703121561201f578384fd5b843567ffffffffffffffff80821115612036578586fd5b61204288838901611d1c565b9096509450602087013591508082111561205a578384fd5b5061206787828801611d1c565b95989497509550505050565b60008060208385031215612085578182fd5b823567ffffffffffffffff81111561209b578283fd5b6120a785828601611d1c565b90969095509350505050565b6000602082840312156120c4578081fd5b5035919050565b6000602082840312156120dc578081fd5b5051919050565b600080604083850312156120f5578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039290921682521515602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156121a95783518352928401929184019160010161218d565b50909695505050505050565b901515815260200190565b6020808252600d908201527f494e56414c49445f47524f555000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f494e56414c49445f494e434f4e53495354454e545f4c454e4754480000000000604082015260600190565b60208082526016908201527f494e56414c49445f53555045525f4f50455241544f5200000000000000000000604082015260600190565b60208082526017908201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604082015260600190565b60208082526023908201527f416d6f756e7420746f20777269746520696e2062696e20697320746f6f206c6160408201527f7267650000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526008908201527f756e6465666c6f77000000000000000000000000000000000000000000000000604082015260600190565b60208082526011908201527f496e76616c6964206f7065726174696f6e000000000000000000000000000000604082015260600190565b60208082526014908201527f4e4f545f415554484f52495a45445f41444d494e000000000000000000000000604082015260600190565b60208082526019908201527f494e56414c49445f46524f4d5f5a45524f5f4144445245535300000000000000604082015260600190565b6020808252602c908201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060408201527f6572206f70657261746f72730000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f494e56414c49445f494400000000000000000000000000000000000000000000604082015260600190565b60208082526022908201527f63616e277420737562737472616374206d6f7265207468616e2074686572652060408201527f6973000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f6f6e6c792061646d696e2063616e207365747570206d6574615472616e73616360408201527f74696f6e50726f636573736f7273000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604082015260600190565b60208082526008908201527f6f766572666c6f77000000000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4e4f545f415554484f52495a45445f4d494e5445520000000000000000000000604082015260600190565b90815260200190565b6001600160a01b038116811461261d57600080fd5b5056fea2646970667358221220a5e7a0e28642b43f01ff64e9ccab02b3c77129cf7c15bab23d76242a499f8cc064736f6c63430006050033",
  "userdoc": {
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "return the balance of a particular owner for a particular subToken."
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "return the balances of a list of owners / subTokens."
      },
      "batchTransferFrom(address,address,uint256[],uint256[])": {
        "notice": "transfer a number of different subTokens from one address to another."
      },
      "burn(uint256,uint256)": {
        "notice": "burn token for a specific subToken."
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "burn token for a specific owner and subToken."
      },
      "isApprovedForAll(address,address)": {
        "notice": "return whether an oeprator has the ability to transfer on behalf of another address."
      },
      "isMinter(address)": {
        "notice": "check whether address `who` is given minter rights."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant or revoke the ability for an address to transfer token on your behalf."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "grant or revoke the ability for an address to transfer token on behalf of another address."
      },
      "setMinter(address,bool)": {
        "notice": "Enable or disable the ability of `minter` to mint tokens"
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "singleTransferFrom(address,address,uint256,uint256)": {
        "notice": "transfer a number of subToken from one address to another."
      },
      "supplyOf(uint256)": {
        "notice": "return the current total supply of a specific subToken."
      }
    }
  },
  "devdoc": {
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "id": "subToken id.",
          "owner": "whose balance it is of."
        },
        "returns": {
          "balance": "of the owner"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "ids": "list of subTokens's addresses.",
          "owners": "list of addresses to which we want to know the balance."
        },
        "returns": {
          "balances": "list of balances for each request."
        }
      },
      "batchMint(address,uint256[],uint256[])": {
        "details": "mint more tokens of a several subToken .",
        "params": {
          "amounts": "for each token minted.",
          "ids": "subToken ids (also the index at which it was added).",
          "to": "address receiving the tokens."
        }
      },
      "batchTransferFrom(address,address,uint256[],uint256[])": {
        "params": {
          "from": "owner to transfer from.",
          "ids": "list of subToken ids to transfer.",
          "to": "destination address that will receive the tokens.",
          "values": "list of amount for eacg subTokens to transfer."
        }
      },
      "burn(uint256,uint256)": {
        "params": {
          "id": "subToken id.",
          "value": "amount of tokens to burn."
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "from": "fron which address the token are burned from.",
          "id": "subToken id.",
          "value": "amount of tokens to burn."
        }
      },
      "changeAdmin(address)": {
        "details": "change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "address of the new administrator."
        }
      },
      "getAdmin()": {
        "details": "gives the current administrator of this contract.",
        "returns": {
          "_0": "the current administrator of this contract."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "address being given the ability to transfer.",
          "owner": "address who would have granted the rights."
        },
        "returns": {
          "isOperator": "whether the operator has approval rigths or not."
        }
      },
      "isMetaTransactionProcessor(address)": {
        "details": "check whether address `who` is given meta-transaction execution rights.",
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has meta-transaction execution rights."
        }
      },
      "isMinter(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has minter rights."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "mint(address,uint256,uint256)": {
        "details": "mint more tokens of a specific subToken .",
        "params": {
          "amount": "of token minted.",
          "id": "subToken id (also the index at which it was added).",
          "to": "address receiving the tokens."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether the operator is revoked or approved.",
          "operator": "address being granted/revoked ability to transfer."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "whether the operator is revoked or approved.",
          "operator": "address being granted/revoked ability to transfer.",
          "sender": "address granting/revoking the approval."
        }
      },
      "setMetaTransactionProcessor(address,bool)": {
        "details": "Enable or disable the ability of `metaTransactionProcessor` to perform meta-tx (metaTransactionProcessor rights).",
        "params": {
          "enabled": "set whether the metaTransactionProcessor is enabled or disabled.",
          "metaTransactionProcessor": "address that will be given/removed metaTransactionProcessor rights."
        }
      },
      "setMinter(address,bool)": {
        "params": {
          "enabled": "set whether the minter is enabled or disabled.",
          "minter": "address that will be given/removed minter right."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "singleTransferFrom(address,address,uint256,uint256)": {
        "params": {
          "from": "owner to transfer from.",
          "id": "subToken id.",
          "to": "destination address that will receive the tokens.",
          "value": "amount of tokens to transfer."
        }
      },
      "supplyOf(uint256)": {
        "params": {
          "id": "subToken id."
        },
        "returns": {
          "supply": "current total number of tokens."
        }
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13069,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13454,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13131,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_metaTransactionContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1533,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_packedSupplies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1539,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_packedTokenBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1545,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1548,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_erc20s",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_contract(ERC20SubToken)1980)dyn_storage"
      },
      {
        "astId": 1552,
        "contract": "src/Catalyst/ERC20GroupGem.sol:ERC20GroupGem",
        "label": "_minters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(ERC20SubToken)1980)dyn_storage": {
        "base": "t_contract(ERC20SubToken)1980",
        "encoding": "dynamic_array",
        "label": "contract ERC20SubToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20SubToken)1980": {
        "encoding": "inplace",
        "label": "contract ERC20SubToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}