{"language":"Solidity","settings":{"evmVersion":"petersburg","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":2000},"remappings":[]},"sources":{"contracts_common/src/Interfaces/ERC20.sol":{"content":"pragma solidity ^0.5.2;\n\nimport \"./ERC20Basic.sol\";\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\n/* interface */\ncontract ERC20 is ERC20Basic {\n    function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function allowance(address owner, address spender)\n        public\n        view\n        returns (uint256);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n","keccak256":"0xa8cb63790e43bb77235530d0add180a84e9eb20c95173059e7d783c599c199b0"},"contracts_common/src/Interfaces/ERC20Basic.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title ERC20Basic DRAFT\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\n/* interface */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n","keccak256":"0x7d333b4cd97e3fa0a67f3f20d79e6a46d5c81a8f7d506aa24c624ec6e4e913b9"},"contracts_common/src/Interfaces/Medianizer.sol":{"content":"pragma solidity ^0.5.2;\n\n\n/**\n * @title Medianizer contract\n * @dev From MakerDAO (https://etherscan.io/address/0x729D19f657BD0614b4985Cf1D82531c67569197B#code)\n */\ninterface Medianizer {\n    function read() external view returns (bytes32);\n}\n","keccak256":"0x77a6277882bc0f9482175a23dcd2cf4ec08cc7268f9e8caf71ad49c39b07c262"},"contracts_common/src/Libraries/SafeMathWithRequire.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert\n */\nlibrary SafeMathWithRequire {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        require(c / a == b, \"overflow\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"undeflow\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"overflow\");\n        return c;\n    }\n}\n","keccak256":"0x362e750dc8b68acf6b56e0e78c6e8801b5d08031cfc77576e3222e5f42d99313"},"src/SandSale/SandSale.sol":{"content":"pragma solidity 0.5.9;\n\nimport \"../../contracts_common/src/Libraries/SafeMathWithRequire.sol\";\nimport \"../../contracts_common/src/Interfaces/ERC20.sol\";\nimport \"../../contracts_common/src/Interfaces/Medianizer.sol\";\n\n\n/**\n * @title SAND tokens sale contract\n * @notice This contract is used to sell SAND tokens (accepts ETH and DAI) at a fixed USD price\n */\ncontract SandSale {\n    using SafeMathWithRequire for uint256;\n    Medianizer public medianizer;\n    ERC20 public sand;\n    ERC20 public dai;\n\n    address public admin;\n    address payable public wallet;\n    bool public isPaused;\n\n    /* We set the USD price here, 1 SAND = 0.0144 USD */\n    uint256 constant private sandPriceInUsd = 14400000000000000;\n\n    /**\n     * @notice Initializes the contract\n     * @param medianizerContractAddress The address of the Medianizer contract\n     * @param sandTokenContractAddress The address of the SAND token contract\n     * @param daiTokenContractAddress The address of the DAI token contract\n     * @param initialAdmin The address of the admin of the contract\n     * @param initialWallet the address of the wallet that will receive the funds\n     */\n    constructor(\n        address medianizerContractAddress,\n        address sandTokenContractAddress,\n        address daiTokenContractAddress,\n        address initialAdmin,\n        address payable initialWallet\n    ) public {\n        require(initialWallet != address(0), \"need a wallet to receive funds\");\n        medianizer = Medianizer(medianizerContractAddress);\n        sand = ERC20(sandTokenContractAddress);\n        dai = ERC20(daiTokenContractAddress);\n        admin = initialAdmin;\n        wallet = initialWallet;\n    }\n\n    /**\n     * @notice Buys SAND tokens with Ether\n     * @param to The address that will receive the SAND\n     */\n    function buySandWithEther(address to) external payable whenNotPaused() {\n        uint256 sandAmount = getSandAmountWithEther(msg.value);\n\n        require(\n            sand.transferFrom(address(this), to, sandAmount),\n            \"Transfer failed\"\n        );\n\n        address(wallet).transfer(msg.value);\n    }\n\n    /**\n     * @notice Buys SAND with DAI\n     * @param daiAmount The amount of DAI\n     * @param to The address that will receive the SAND\n     */\n    function buySandWithDai(uint256 daiAmount, address to) external whenNotPaused() {\n        require(\n            dai.transferFrom(msg.sender, wallet, daiAmount),\n            \"Transfer failed\"\n        );\n\n        uint256 sandAmount = getSandAmountWithDai(daiAmount);\n\n        require(\n            sand.transferFrom(address(this), to, sandAmount),\n            \"Transfer failed\"\n        );\n    }\n\n    /**\n     * @notice Transfers the SAND balance from this contract to another address\n     * @param to The address that will receive the funds\n     * @param amount The amount to transfer\n     */\n    function withdrawSand(address to, uint256 amount) external onlyAdmin() {\n        require(\n            sand.transferFrom(address(this), to, amount),\n            \"Transfer failed\"\n        );\n    }\n\n    /**\n     * @notice Returns the amount of SAND that can be bought using a specific amount of ETH\n     * @param ethAmount An amount of ETH\n     * @return The amount of SAND\n     */\n    function getSandAmountWithEther(uint256 ethAmount) public view returns (uint256) {\n        uint256 ethUsdPair = getEthUsdPair();\n\n        uint256 usdAmount = ethAmount.mul(ethUsdPair);\n        uint256 sandAmount = usdAmount.div(sandPriceInUsd);\n\n        return sandAmount;\n    }\n\n    /**\n     * @notice Returns the amount of SAND that can be bought using a specific amount of DAI\n     * @param daiAmount An amount of DAI\n     * @return The amount of SAND\n     */\n    function getSandAmountWithDai(uint256 daiAmount) public view returns (uint256) {\n        uint256 sandAmount = daiAmount.mul(1000000000000000000).div(sandPriceInUsd);\n        return sandAmount;\n    }\n\n    /**\n     * @notice Changes the address of the admin\n     * @param newAdmin The address of the new admin\n     */\n    function changeAdmin(address newAdmin) external onlyAdmin() {\n         admin = newAdmin;\n    }\n\n    /**\n     * @notice Toggles the current pause state\n     */\n    function togglePause() external onlyAdmin() {\n        isPaused = !isPaused;\n    }\n\n    /**\n     * @notice Gets the ETHUSD pair from the Medianizer contract\n     * @return The pair as an uint256\n     */\n    function getEthUsdPair() private view returns (uint256) {\n        bytes32 pair = medianizer.read();\n\n        return uint256(pair);\n    }\n\n    modifier onlyAdmin() {\n        require (msg.sender == admin, \"only admin allowed\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require (isPaused == false, \"Contract is paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require (isPaused == true, \"Contract is not paused\");\n        _;\n    }\n}\n","keccak256":"0x8f5d453b1e9b36bf52fcc8b84265289e4219daa28b1abe7f33c2fb269c5d6bb6"}}}