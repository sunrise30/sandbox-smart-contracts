{
  "contractInfo": {
    "abi": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "name": "success",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0x095ea7b3"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function",
        "signature": "0x18160ddd"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "name": "success",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0x23b872dd"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "from",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "approveFor",
        "outputs": [
          {
            "name": "success",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0x2b991746"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function",
        "signature": "0x313ce567"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "who",
            "type": "address"
          }
        ],
        "name": "isSuperOperator",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function",
        "signature": "0x654b748a"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "getAdmin",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function",
        "signature": "0x6e9960c3"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "who",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function",
        "signature": "0x70a08231"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "changeAdmin",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0x8f283970"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "emitTransferEvent",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0xa6d49dca"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "name": "success",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0xa9059cbb"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "superOperator",
            "type": "address"
          },
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "setSuperOperator",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function",
        "signature": "0xac9fe421"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "name": "remaining",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function",
        "signature": "0xdd62ed3e"
      },
      {
        "inputs": [
          {
            "name": "_core",
            "type": "address"
          },
          {
            "name": "_index",
            "type": "uint8"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "superOperator",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "enabled",
            "type": "bool"
          }
        ],
        "name": "SuperOperator",
        "type": "event",
        "signature": "0x44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "oldAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event",
        "signature": "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event",
        "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event",
        "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
      }
    ],
    "evm": {
      "bytecode": {
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50604051610bab380380610bab8339818101604052604081101561003357600080fd5b508051602091820151604080518082019091526001600160a01b0390921680835260ff90911691909201819052600280546001600160a01b03191690921760ff60a01b191674010000000000000000000000000000000000000000909102179055610b08806100a36000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636e9960c31161008c578063a6d49dca11610066578063a6d49dca14610260578063a9059cbb14610296578063ac9fe421146102c2578063dd62ed3e146102f0576100df565b80636e9960c3146101ee57806370a08231146102125780638f28397014610238576100df565b80632b991746116100bd5780632b99174614610174578063313ce567146101aa578063654b748a146101c8576100df565b8063095ea7b3146100e457806318160ddd1461012457806323b872dd1461013e575b600080fd5b610110600480360360408110156100fa57600080fd5b506001600160a01b03813516906020013561031e565b604080519115158252519081900360200190f35b61012c610334565b60408051918252519081900360200190f35b6101106004803603606081101561015457600080fd5b506001600160a01b038135811691602081013590911690604001356103e3565b6101106004803603606081101561018a57600080fd5b506001600160a01b038135811691602081013590911690604001356104ff565b6101b261056d565b6040805160ff9092168252519081900360200190f35b610110600480360360208110156101de57600080fd5b50356001600160a01b0316610572565b6101f6610590565b604080516001600160a01b039092168252519081900360200190f35b61012c6004803603602081101561022857600080fd5b50356001600160a01b031661059f565b61025e6004803603602081101561024e57600080fd5b50356001600160a01b0316610659565b005b61025e6004803603606081101561027657600080fd5b506001600160a01b0381358116916020810135909116906040013561073a565b610110600480360360408110156102ac57600080fd5b506001600160a01b0381351690602001356107e9565b61025e600480360360408110156102d857600080fd5b506001600160a01b03813516906020013515156107f6565b61012c6004803603604081101561030657600080fd5b506001600160a01b03813581169160200135166108c1565b600061032b3384846108ec565b50600192915050565b600254604080517f8806792f00000000000000000000000000000000000000000000000000000000815260ff74010000000000000000000000000000000000000000840416600482015290516000926001600160a01b031691638806792f916024808301926020929190829003018186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d60208110156103dc57600080fd5b5051905090565b6000336001600160a01b0385161480159061040e57503360009081526001602052604090205460ff16155b156104ea576001600160a01b03841660009081526003602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146104e857828110156104b3576040805162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f7567682066756e647320616c6c6f7765640000000000000000604482015290519081900360640190fd5b6104c3818463ffffffff6109bf16565b6001600160a01b03861660009081526003602090815260408083203384529091529020555b505b6104f58484846109d1565b5060019392505050565b6000336001600160a01b038516148061052757503360009081526001602052604090205460ff165b6105625760405162461bcd60e51b8152600401808060200182810382526023815260200180610ab16023913960400191505060405180910390fd5b6104f58484846108ec565b601290565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031690565b600254604080517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260ff7401000000000000000000000000000000000000000085041660248301529151600093929092169162fdd58e91604480820192602092909190829003018186803b15801561062757600080fd5b505afa15801561063b573d6000803e3d6000fd5b505050506040513d602081101561065157600080fd5b505192915050565b6000546001600160a01b031633146106b8576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610799576040805162461bcd60e51b815260206004820152600960248201527f6f6e6c7920636f72650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600061032b3384846109d1565b6000546001600160a01b0316331461083f5760405162461bcd60e51b815260040180806020018281038252602c815260200180610a85602c913960400191505060405180910390fd5b6001600160a01b03821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d89281900390910190a15050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6001600160a01b0383161580159061090c57506001600160a01b03821615155b61095d576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f7420617070726f7665207769746820307830000000000000000000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000828211156109cb57fe5b50900390565b600254604080517ffe99049a0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015260ff740100000000000000000000000000000000000000008504166044830152606482018590529151919092169163fe99049a91608480830192600092919082900301818387803b158015610a6757600080fd5b505af1158015610a7b573d6000803e3d6000fd5b5050505050505056fe6f6e6c792061646d696e20697320616c6c6f77656420746f20616464207375706572206f70657261746f72736d73672e73656e64657220213d2066726f6d207c7c2073757065724f70657261746f72a265627a7a723058205e893d0e2fcbd7a2e28e2f371590cd5e89381c873200158ade849d8e9fd6ed9b64736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xBAB CODESIZE SUB DUP1 PUSH2 0xBAB DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP1 DUP4 MSTORE PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP2 MUL OR SWAP1 SSTORE PUSH2 0xB08 DUP1 PUSH2 0xA3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E9960C3 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA6D49DCA GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA6D49DCA EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xAC9FE421 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2F0 JUMPI PUSH2 0xDF JUMP JUMPDEST DUP1 PUSH4 0x6E9960C3 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x238 JUMPI PUSH2 0xDF JUMP JUMPDEST DUP1 PUSH4 0x2B991746 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x2B991746 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x654B748A EQ PUSH2 0x1C8 JUMPI PUSH2 0xDF JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x13E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x31E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH2 0x334 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x3E3 JUMP JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x56D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x572 JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x590 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x59F JUMP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x659 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x73A JUMP JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x7E9 JUMP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x12C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32B CALLER DUP5 DUP5 PUSH2 0x8EC JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8806792F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP5 DIV AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x8806792F SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x40E JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x4EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x4E8 JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682066756E647320616C6C6F7765640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x4C3 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x9BF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST POP JUMPDEST PUSH2 0x4F5 DUP5 DUP5 DUP5 PUSH2 0x9D1 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ DUP1 PUSH2 0x527 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x562 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xAB1 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4F5 DUP5 DUP5 DUP5 PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH31 0xFDD58E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP6 DIV AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0xFDD58E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206368616E67652061646D696E0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x799 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920636F72650000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32B CALLER DUP5 DUP5 PUSH2 0x9D1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xA85 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x44F92D27ABDF4CFB6A7D712C3AF68F3BE086D4CA747AB802C36F67D6790060D8 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x90C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0x95D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420617070726F7665207769746820307830000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x9CB JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFE99049A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP6 DIV AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xFE99049A SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP INVALID PUSH16 0x6E6C792061646D696E20697320616C6C PUSH16 0x77656420746F20616464207375706572 KECCAK256 PUSH16 0x70657261746F72736D73672E73656E64 PUSH6 0x7220213D2066 PUSH19 0x6F6D207C7C2073757065724F70657261746F72 LOG2 PUSH6 0x627A7A723058 KECCAK256 0x5e DUP10 RETURNDATASIZE 0xe 0x2f 0xcb 0xd7 LOG2 0xe2 DUP15 0x2f CALLDATACOPY ISZERO SWAP1 0xcd 0x5e DUP10 CODESIZE SHR DUP8 ORIGIN STOP ISZERO DUP11 0xde DUP5 SWAP14 DUP15 SWAP16 0xd6 0xed SWAP12 PUSH5 0x736F6C6343 STOP SDIV MULMOD STOP ORIGIN ",
        "sourceMap": "342:2940:65:-;;;612:95;8:9:-1;5:2;;;30:1;27;20:12;5:2;612:95:65;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;612:95:65;;;;;;;;679:21;;;;;;;;-1:-1:-1;679:21:65;;;;;;;;;;;;;;;;;670:6;:30;;-1:-1:-1;670:30:65;;;;-1:-1:-1;670:30:65;-1:-1:-1;670:30:65;;;;;;-1:-1:-1;;342:2940:65;-1:-1:-1;342:2940:65;;"
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "608060405234801561001057600080fd5b50600436106100df5760003560e01c80636e9960c31161008c578063a6d49dca11610066578063a6d49dca14610260578063a9059cbb14610296578063ac9fe421146102c2578063dd62ed3e146102f0576100df565b80636e9960c3146101ee57806370a08231146102125780638f28397014610238576100df565b80632b991746116100bd5780632b99174614610174578063313ce567146101aa578063654b748a146101c8576100df565b8063095ea7b3146100e457806318160ddd1461012457806323b872dd1461013e575b600080fd5b610110600480360360408110156100fa57600080fd5b506001600160a01b03813516906020013561031e565b604080519115158252519081900360200190f35b61012c610334565b60408051918252519081900360200190f35b6101106004803603606081101561015457600080fd5b506001600160a01b038135811691602081013590911690604001356103e3565b6101106004803603606081101561018a57600080fd5b506001600160a01b038135811691602081013590911690604001356104ff565b6101b261056d565b6040805160ff9092168252519081900360200190f35b610110600480360360208110156101de57600080fd5b50356001600160a01b0316610572565b6101f6610590565b604080516001600160a01b039092168252519081900360200190f35b61012c6004803603602081101561022857600080fd5b50356001600160a01b031661059f565b61025e6004803603602081101561024e57600080fd5b50356001600160a01b0316610659565b005b61025e6004803603606081101561027657600080fd5b506001600160a01b0381358116916020810135909116906040013561073a565b610110600480360360408110156102ac57600080fd5b506001600160a01b0381351690602001356107e9565b61025e600480360360408110156102d857600080fd5b506001600160a01b03813516906020013515156107f6565b61012c6004803603604081101561030657600080fd5b506001600160a01b03813581169160200135166108c1565b600061032b3384846108ec565b50600192915050565b600254604080517f8806792f00000000000000000000000000000000000000000000000000000000815260ff74010000000000000000000000000000000000000000840416600482015290516000926001600160a01b031691638806792f916024808301926020929190829003018186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d60208110156103dc57600080fd5b5051905090565b6000336001600160a01b0385161480159061040e57503360009081526001602052604090205460ff16155b156104ea576001600160a01b03841660009081526003602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146104e857828110156104b3576040805162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f7567682066756e647320616c6c6f7765640000000000000000604482015290519081900360640190fd5b6104c3818463ffffffff6109bf16565b6001600160a01b03861660009081526003602090815260408083203384529091529020555b505b6104f58484846109d1565b5060019392505050565b6000336001600160a01b038516148061052757503360009081526001602052604090205460ff165b6105625760405162461bcd60e51b8152600401808060200182810382526023815260200180610ab16023913960400191505060405180910390fd5b6104f58484846108ec565b601290565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031690565b600254604080517efdd58e0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260ff7401000000000000000000000000000000000000000085041660248301529151600093929092169162fdd58e91604480820192602092909190829003018186803b15801561062757600080fd5b505afa15801561063b573d6000803e3d6000fd5b505050506040513d602081101561065157600080fd5b505192915050565b6000546001600160a01b031633146106b8576040805162461bcd60e51b815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206368616e67652061646d696e0000000000604482015290519081900360640190fd5b600054604080516001600160a01b039283168152918316602083015280517f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9281900390910190a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610799576040805162461bcd60e51b815260206004820152600960248201527f6f6e6c7920636f72650000000000000000000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600061032b3384846109d1565b6000546001600160a01b0316331461083f5760405162461bcd60e51b815260040180806020018281038252602c815260200180610a85602c913960400191505060405180910390fd5b6001600160a01b03821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d89281900390910190a15050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6001600160a01b0383161580159061090c57506001600160a01b03821615155b61095d576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f7420617070726f7665207769746820307830000000000000000000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000828211156109cb57fe5b50900390565b600254604080517ffe99049a0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015260ff740100000000000000000000000000000000000000008504166044830152606482018590529151919092169163fe99049a91608480830192600092919082900301818387803b158015610a6757600080fd5b505af1158015610a7b573d6000803e3d6000fd5b5050505050505056fe6f6e6c792061646d696e20697320616c6c6f77656420746f20616464207375706572206f70657261746f72736d73672e73656e64657220213d2066726f6d207c7c2073757065724f70657261746f72a265627a7a723058205e893d0e2fcbd7a2e28e2f371590cd5e89381c873200158ade849d8e9fd6ed9b64736f6c63430005090032",
        "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E9960C3 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA6D49DCA GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA6D49DCA EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xAC9FE421 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2F0 JUMPI PUSH2 0xDF JUMP JUMPDEST DUP1 PUSH4 0x6E9960C3 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x8F283970 EQ PUSH2 0x238 JUMPI PUSH2 0xDF JUMP JUMPDEST DUP1 PUSH4 0x2B991746 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x2B991746 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x654B748A EQ PUSH2 0x1C8 JUMPI PUSH2 0xDF JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x124 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x13E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x31E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH2 0x334 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x3E3 JUMP JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x4FF JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x56D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x572 JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x590 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x59F JUMP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x659 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x73A JUMP JUMPDEST PUSH2 0x110 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x7E9 JUMP JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x12C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32B CALLER DUP5 DUP5 PUSH2 0x8EC JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8806792F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP5 DIV AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x8806792F SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x40E JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x4EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x4E8 JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682066756E647320616C6C6F7765640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x4C3 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x9BF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST POP JUMPDEST PUSH2 0x4F5 DUP5 DUP5 DUP5 PUSH2 0x9D1 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EQ DUP1 PUSH2 0x527 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x562 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xAB1 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4F5 DUP5 DUP5 DUP5 PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH31 0xFDD58E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP6 DIV AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0xFDD58E SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C792061646D696E2063616E206368616E67652061646D696E0000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x799 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920636F72650000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32B CALLER DUP5 DUP5 PUSH2 0x9D1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xA85 PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0x44F92D27ABDF4CFB6A7D712C3AF68F3BE086D4CA747AB802C36F67D6790060D8 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x90C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST PUSH2 0x95D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420617070726F7665207769746820307830000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x9CB JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFE99049A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0xFF PUSH21 0x10000000000000000000000000000000000000000 DUP6 DIV AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xFE99049A SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP INVALID PUSH16 0x6E6C792061646D696E20697320616C6C PUSH16 0x77656420746F20616464207375706572 KECCAK256 PUSH16 0x70657261746F72736D73672E73656E64 PUSH6 0x7220213D2066 PUSH19 0x6F6D207C7C2073757065724F70657261746F72 LOG2 PUSH6 0x627A7A723058 KECCAK256 0x5e DUP10 RETURNDATASIZE 0xe 0x2f 0xcb 0xd7 LOG2 0xe2 DUP15 0x2f CALLDATACOPY ISZERO SWAP1 0xcd 0x5e DUP10 CODESIZE SHR DUP8 ORIGIN STOP ISZERO DUP11 0xde DUP5 SWAP14 DUP15 SWAP16 0xd6 0xed SWAP12 PUSH5 0x736F6C6343 STOP SDIV MULMOD STOP ORIGIN ",
        "sourceMap": "342:2940:65:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;342:2940:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1882:182;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1882:182:65;;-1:-1:-1;;;;;1882:182:65;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;713:111;;;:::i;:::-;;;;;;;;;;;;;;;;1226:650;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1226:650:65;;;;;;;;;;;;;;;;;:::i;2070:334::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2070:334:65;;;;;;;;;;;;;;;;;:::i;962:81::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;970:109:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;970:109:7;-1:-1:-1;;;;;970:109:7;;:::i;264:82:1:-;;;:::i;:::-;;;;-1:-1:-1;;;;;264:82:1;;;;;;;;;;;;;;830:126:65;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;830:126:65;-1:-1:-1;;;;;830:126:65;;:::i;469:197:1:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;469:197:1;-1:-1:-1;;;;;469:197:1;;:::i;:::-;;3070:210:65;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3070:210:65;;;;;;;;;;;;;;;;;:::i;1049:171::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1049:171:65;;-1:-1:-1;;;;;1049:171:65;;;;;;:::i;484:302:7:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;484:302:7;;-1:-1:-1;;;;;484:302:7;;;;;;;;:::i;2738:171:65:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2738:171:65;;;;;;;;;;:::i;1882:182::-;1966:12;1994:42;2006:10;2018:8;2028:7;1994:11;:42::i;:::-;-1:-1:-1;2053:4:65;1882:182;;;;:::o;713:111::-;783:6;:11;:34;;;;;;804:12;;;;;783:34;;;;;;-1:-1:-1;;;;;;;783:11:65;;:20;;:34;;;;;;;;;;;;;;:11;:34;;;5:2:-1;;;;30:1;27;20:12;5:2;783:34:65;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;783:34:65;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;783:34:65;;-1:-1:-1;713:111:65;:::o;1226:650::-;1325:12;-1:-1:-1;;;;;1357:19:65;;:10;:19;;;;:51;;-1:-1:-1;1397:10:65;1381:27;;;;:15;:27;;;;;;;;1380:28;1357:51;1353:456;;;-1:-1:-1;;;;;1444:15:65;;1424:17;1444:15;;;:8;:15;;;;;;;;1460:10;1444:27;;;;;;;;1502:12;1489:25;;1485:314;;1678:7;1665:9;:20;;1657:57;;;;;-1:-1:-1;;;1657:57:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;1762:22;:9;1776:7;1762:22;:13;:22;:::i;:::-;-1:-1:-1;;;;;1732:15:65;;;;;;:8;:15;;;;;;;;1748:10;1732:27;;;;;;;:52;1485:314;1353:456;;1818:30;1828:5;1835:3;1840:7;1818:9;:30::i;:::-;-1:-1:-1;1865:4:65;1226:650;;;;;:::o;2070:334::-;2171:12;-1:-1:-1;;;;;2220:18:65;;:10;:18;;:49;;-1:-1:-1;2258:10:65;2242:27;;;;:15;:27;;;;;;;;2220:49;2199:131;;;;-1:-1:-1;;;2199:131:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2340:36;2352:4;2358:8;2368:7;2340:11;:36::i;962:81::-;1033:2;962:81;:::o;970:109:7:-;-1:-1:-1;;;;;1052:20:7;1029:4;1052:20;;;-1:-1:-1;1052:20:7;;;;;;;;;970:109::o;264:82:1:-;307:7;333:6;-1:-1:-1;;;;;333:6:1;;264:82::o;830:126:65:-;909:6;:11;:40;;;;;;-1:-1:-1;;;;;909:40:65;;;;;;;-1:-1:-1;936:12:65;;;;909:40;;;;;;-1:-1:-1;;909:11:65;;;;;:21;;:40;;;;;;;;;;;;;;;:11;:40;;;5:2:-1;;;;30:1;27;20:12;5:2;909:40:65;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;909:40:65;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;909:40:65;;830:126;-1:-1:-1;;830:126:65:o;469:197:1:-;549:6;;-1:-1:-1;;;;;549:6:1;535:10;:20;527:60;;;;;-1:-1:-1;;;527:60:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;615:6;;602:30;;;-1:-1:-1;;;;;615:6:1;;;602:30;;;;;;;;;;;;;;;;;;;;;642:6;:17;;;;-1:-1:-1;;;;;642:17:1;;;;;;;;;;469:197::o;3070:210:65:-;3203:6;:11;-1:-1:-1;;;;;3203:11:65;3181:10;:34;3173:56;;;;;-1:-1:-1;;;3173:56:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;3244:29;;;;;;;;-1:-1:-1;;;;;3244:29:65;;;;;;;;;;;;;;;;;3070:210;;;:::o;1049:171::-;1129:12;1157:35;1167:10;1179:3;1184:7;1157:9;:35::i;484:302:7:-;601:6;;-1:-1:-1;;;;;601:6:7;587:10;:20;566:111;;;;-1:-1:-1;;;566:111:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;687:30:7;;;;;;-1:-1:-1;687:30:7;;;;;;;;;:40;;;;;;;;;;;;;742:37;;;;;;;;;;;;;;;;;;;;;484:302;;:::o;2738:171:65:-;-1:-1:-1;;;;;2876:16:65;;;2836:17;2876:16;;;:8;:16;;;;;;;;:26;;;;;;;;;;;;;2738:171::o;2410:322::-;-1:-1:-1;;;;;2534:20:65;;;;;;:46;;-1:-1:-1;;;;;;2558:22:65;;;;2534:46;2513:116;;;;;-1:-1:-1;;;2513:116:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2639:16:65;;;;;;;:8;:16;;;;;;;;:26;;;;;;;;;;;;;:36;;;2690:35;;;;;;;;;;;;;;;;;2410:322;;;:::o;1121:120:37:-;1179:7;1210:1;1205;:6;;1198:14;;;;-1:-1:-1;1229:5:37;;;1121:120::o;2915:149:65:-;2998:6;:11;:59;;;;;;-1:-1:-1;;;;;2998:59:65;;;;;;;;;;;;;;-1:-1:-1;3035:12:65;;;;2998:59;;;;;;;;;;;;:11;;;;;:24;;:59;;;;;-1:-1:-1;;2998:59:65;;;;;;;-1:-1:-1;2998:11:65;:59;;;5:2:-1;;;;30:1;27;20:12;5:2;2998:59:65;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2998:59:65;;;;2915:149;;;:::o"
      },
      "methodIdentifiers": {
        "allowance(address,address)": "dd62ed3e",
        "approve(address,uint256)": "095ea7b3",
        "approveFor(address,address,uint256)": "2b991746",
        "balanceOf(address)": "70a08231",
        "changeAdmin(address)": "8f283970",
        "decimals()": "313ce567",
        "emitTransferEvent(address,address,uint256)": "a6d49dca",
        "getAdmin()": "6e9960c3",
        "isSuperOperator(address)": "654b748a",
        "setSuperOperator(address,bool)": "ac9fe421",
        "totalSupply()": "18160ddd",
        "transfer(address,uint256)": "a9059cbb",
        "transferFrom(address,address,uint256)": "23b872dd"
      }
    },
    "metadata": "{\"compiler\":{\"version\":\"0.5.9+commit.e560f70d\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emitTransferEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"superOperator\",\"type\":\"address\"},{\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_core\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"changeAdmin(address)\":{\"params\":{\"newAdmin\":\"address of the new administrator.\"}},\"getAdmin()\":{\"return\":\"the current administrator of this contract.\"},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"return\":\"whether the address has superOperator rights.\"},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}}}},\"userdoc\":{\"methods\":{\"changeAdmin(address)\":{\"notice\":\"change the administrator to be `newAdmin`.\"},\"getAdmin()\":{\"notice\":\"gives the current administrator of this contract.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"}}}},\"settings\":{\"compilationTarget\":{\"src/Orbs/ERC20ORB.sol\":\"ERC20ORB\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts_common/src/BaseWithStorage/Admin.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\ncontract Admin {\\n\\n    address internal _admin;\\n\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    /// @notice gives the current administrator of this contract.\\n    /// @return the current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @notice change the administrator to be `newAdmin`.\\n    /// @param newAdmin address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"only admin can change admin\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require (msg.sender == _admin, \\\"only admin allowed\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf3763fa108235379b48cf8fe9a708692fcb077250d9974351fd636ff0baf84bf\"},\"contracts_common/src/BaseWithStorage/SuperOperators.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./Admin.sol\\\";\\n\\ncontract SuperOperators is Admin {\\n\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(\\n            msg.sender == _admin,\\n            \\\"only admin is allowed to add super operators\\\"\\n        );\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0x22354cf60ccf77a6de61c13bdaf4e3094d115b960ae563b0527622c846a12abb\"},\"contracts_common/src/Interfaces/ERC1155.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n    @title ERC-1155 Multi Token Standard\\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\n */\\ninterface ERC1155 {\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n        @notice Transfers `value` amount of an `id` from  `from` to `to`  (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `to` is the zero address.\\n        MUST revert if balance of holder for token `id` is lower than the `value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param from    Source address\\n        @param to      Target address\\n        @param id      ID of the token type\\n        @param value   Transfer amount\\n        @param data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `to`\\n    */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `to` is the zero address.\\n        MUST revert if length of `ids` is not the same as length of `values`.\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `ids` is lower than the respective amount(s) in `values` sent to the recipient.\\n        MUST revert on any other error.\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param from    Source address\\n        @param to      Target address\\n        @param ids     IDs of each token type (order and length must match _values array)\\n        @param values  Transfer amounts per token type (order and length must match _ids array)\\n        @param data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `to`\\n    */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice Get the balance of an account's tokens.\\n        @param owner  The address of the token holder\\n        @param id     ID of the token\\n        @return        The _owner's balance of the token type requested\\n     */\\n    function balanceOf(address owner, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @notice Get the balance of multiple account/token pairs\\n        @param owners The addresses of the token holders\\n        @param ids    ID of the tokens\\n        @return        The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n        @dev MUST emit the ApprovalForAll event on success.\\n        @param operator  Address to add to the set of authorized operators\\n        @param approved  True if the operator is approved, false to revoke approval\\n    */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n        @notice Queries the approval status of an operator for a given owner.\\n        @param owner     The owner of the tokens\\n        @param operator  Address of authorized operator\\n        @return           True if the operator is approved, false if not\\n    */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xadc315968f24479f9e6e5cbdfb32a3a8d6b83061afb0680ad3a73959e40e447f\"},\"contracts_common/src/Interfaces/ERC1155TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface ERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param from      The address which previously owned the token\\n        @param id        The ID of the token being transferred\\n        @param value     The amount of tokens being transferred\\n        @param data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from      The address which previously owned the token\\n        @param ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x915c81f5684876945b81020f620aa6261a7bf3a1bf0c07f1eada0e88200872de\"},\"contracts_common/src/Interfaces/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\n/* interface */\\ncontract ERC20 is ERC20Basic {\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        returns (bool);\\n    function approve(address spender, uint256 value) public returns (bool);\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        returns (uint256);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa8cb63790e43bb77235530d0add180a84e9eb20c95173059e7d783c599c199b0\"},\"contracts_common/src/Interfaces/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title ERC20Basic DRAFT\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\n/* interface */\\ncontract ERC20Basic {\\n    function totalSupply() public view returns (uint256);\\n    function balanceOf(address who) public view returns (uint256);\\n    function transfer(address to, uint256 value) public returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x7d333b4cd97e3fa0a67f3f20d79e6a46d5c81a8f7d506aa24c624ec6e4e913b9\"},\"contracts_common/src/Interfaces/ERC20Events.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/* interface */\\ncontract ERC20Events {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xee09c10a3f9adc913227efdcd94ce44e05b59b04717f8f868153d356bd03f5d2\"},\"contracts_common/src/Libraries/AddressUtils.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary AddressUtils {\\n\\n    function toPayable(address _address) internal pure returns (address payable _payable) {\\n        return address(uint160(_address));\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        // for accounts without code, i.e. `keccak256('')`:\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n        bytes32 codehash;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2ad037f43ea9a899526bd911737727d027ce8a2bc1cf615bdf5a1706d400afd6\"},\"contracts_common/src/Libraries/BytesUtil.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nlibrary BytesUtil {\\n    function memcpy(uint256 dest, uint256 src, uint256 len) internal pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    function pointerToBytes(uint256 src, uint256 len)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory ret = new bytes(len);\\n        uint256 retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n\\n        memcpy(retptr, src, len);\\n        return ret;\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(\\n                add(m, 20),\\n                xor(0x140000000000000000000000000000000000000000, a)\\n            )\\n            mstore(0x40, add(m, 52))\\n            b := m\\n        }\\n    }\\n\\n    function uint256ToBytes(uint256 a) internal pure returns (bytes memory b) {\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 32), a)\\n            mstore(0x40, add(m, 64))\\n            b := m\\n        }\\n    }\\n\\n    function doFirstParamEqualsAddress(bytes memory data, address _address)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (data.length < (36 + 32)) {\\n            return false;\\n        }\\n        uint256 value;\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value == uint256(_address);\\n    }\\n\\n    function doParamEqualsUInt256(bytes memory data, uint256 i, uint256 value)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (data.length < (36 + (i + 1) * 32)) {\\n            return false;\\n        }\\n        uint256 offset = 36 + i * 32;\\n        uint256 valuePresent;\\n        assembly {\\n            valuePresent := mload(add(data, offset))\\n        }\\n        return valuePresent == value;\\n    }\\n\\n    function overrideFirst32BytesWithAddress(\\n        bytes memory data,\\n        address _address\\n    ) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n\\n        bytes memory addressBytes = addressToBytes(_address);\\n        uint256 src;\\n        assembly {\\n            src := add(addressBytes, 32)\\n        }\\n\\n        memcpy(dest, src, 20);\\n        return data;\\n    }\\n\\n    function overrideFirstTwo32BytesWithAddressAndInt(\\n        bytes memory data,\\n        address _address,\\n        uint256 _value\\n    ) internal pure returns (bytes memory) {\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(data, 48)\\n        } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes)\\n        bytes memory bbytes = addressToBytes(_address);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 20);\\n\\n        assembly {\\n            dest := add(data, 68)\\n        } // 48 = 32 (offset) + 4 (func sig) + 32 (next slot)\\n        bbytes = uint256ToBytes(_value);\\n        assembly {\\n            src := add(bbytes, 32)\\n        }\\n        memcpy(dest, src, 32);\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xb5c236938e1f71524127371a015836e83103c5ac1b4ed7b7f22892a8c0429e10\"},\"contracts_common/src/Libraries/ObjectLib64.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\nimport \\\"./SafeMathWithRequire.sol\\\";\\n\\nlibrary ObjectLib64 {\\n    using SafeMathWithRequire for uint256;\\n    enum Operations {ADD, SUB, REPLACE}\\n    // Constants regarding bin or chunk sizes for balance packing\\n    uint256 constant TYPES_BITS_SIZE = 64; // Max size of each object\\n    uint256 constant TYPES_PER_UINT256 = 256 / TYPES_BITS_SIZE; // Number of types per uint256\\n\\n    //\\n    // Objects and Tokens Functions\\n    //\\n\\n    /**\\n  * @dev Return the bin number and index within that bin where ID is\\n  * @param _tokenId Object type\\n  * @return (Bin number, ID's index within that bin)\\n  */\\n    function getTokenBinIndex(uint256 _tokenId)\\n        internal\\n        pure\\n        returns (uint256 bin, uint256 index)\\n    {\\n        bin = (_tokenId * TYPES_BITS_SIZE) / 256;\\n        index = _tokenId % TYPES_PER_UINT256;\\n        return (bin, index);\\n    }\\n\\n    /**\\n  * @dev update the balance of a type provided in _binBalances\\n  * @param _binBalances Uint256 containing the balances of objects\\n  * @param _index Index of the object in the provided bin\\n  * @param _amount Value to update the type balance\\n  * @param _operation Which operation to conduct :\\n  *     Operations.REPLACE : Replace type balance with _amount\\n  *     Operations.ADD     : ADD _amount to type balance\\n  *     Operations.SUB     : Substract _amount from type balance\\n  */\\n    function updateTokenBalance(\\n        uint256 _binBalances,\\n        uint256 _index,\\n        uint256 _amount,\\n        Operations _operation\\n    ) internal pure returns (uint256 newBinBalance) {\\n        uint256 objectBalance = 0;\\n        if (_operation == Operations.ADD) {\\n            objectBalance = getValueInBin(_binBalances, _index);\\n            newBinBalance = writeValueInBin(\\n                _binBalances,\\n                _index,\\n                objectBalance.add(_amount)\\n            );\\n        } else if (_operation == Operations.SUB) {\\n            objectBalance = getValueInBin(_binBalances, _index);\\n            newBinBalance = writeValueInBin(\\n                _binBalances,\\n                _index,\\n                objectBalance.sub(_amount)\\n            );\\n        } else if (_operation == Operations.REPLACE) {\\n            newBinBalance = writeValueInBin(_binBalances, _index, _amount);\\n        } else {\\n            revert(\\\"Invalid operation\\\"); // Bad operation\\n        }\\n\\n        return newBinBalance;\\n    }\\n    /*\\n  * @dev return value in _binValue at position _index\\n  * @param _binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n  * @param _index index at which to retrieve value\\n  * @return Value at given _index in _bin\\n  */\\n    function getValueInBin(uint256 _binValue, uint256 _index)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 rightShift = 256 - TYPES_BITS_SIZE * (_index + 1);\\n        return (_binValue >> rightShift) & mask;\\n    }\\n\\n    /**\\n  * @dev return the updated _binValue after writing _amount at _index\\n  * @param _binValue uint256 containing the balances of TYPES_PER_UINT256 types\\n  * @param _index Index at which to retrieve value\\n  * @param _amount Value to store at _index in _bin\\n  * @return Value at given _index in _bin\\n  */\\n    function writeValueInBin(uint256 _binValue, uint256 _index, uint256 _amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(\\n            _amount < 2**TYPES_BITS_SIZE,\\n            \\\"Amount to write in bin is too large\\\"\\n        );\\n\\n        // Mask to retrieve data for a given binData\\n        uint256 mask = (uint256(1) << TYPES_BITS_SIZE) - 1;\\n\\n        // Shift amount\\n        uint256 leftShift = 256 - TYPES_BITS_SIZE * (_index + 1);\\n        return (_binValue & ~(mask << leftShift)) | (_amount << leftShift);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb83c349da8cb7578d7765a0c4d5b8ed7ccf08e1e96941df35af63a252ad07db8\"},\"contracts_common/src/Libraries/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x55d3e77e8ca8c1f47ed120ef7a1b288e999c2bdb7a508dfa533494f9b9849002\"},\"contracts_common/src/Libraries/SafeMathWithRequire.sol\":{\"content\":\"pragma solidity ^0.5.2;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert\\n */\\nlibrary SafeMathWithRequire {\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        require(c / a == b, \\\"overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"undeflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c >= a, \\\"overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x362e750dc8b68acf6b56e0e78c6e8801b5d08031cfc77576e3222e5f42d99313\"},\"src/Orbs/ERC20ORB.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport {ERC20} from \\\"../../contracts_common/src/Interfaces/ERC20.sol\\\";\\nimport {\\n    ERC20Events\\n} from \\\"../../contracts_common/src/Interfaces/ERC20Events.sol\\\";\\nimport \\\"../../contracts_common/src/Libraries/SafeMath.sol\\\";\\nimport \\\"../../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\n\\nimport \\\"./ORBCore.sol\\\";\\n\\ncontract ERC20ORB is\\n    ERC20Events,\\n    SuperOperators /*is ERC20*/\\n{\\n    using SafeMath for uint256;\\n\\n    struct Origin {\\n        ORBCore core;\\n        uint8 index;\\n    }\\n\\n    Origin origin;\\n    mapping(address => mapping(address => uint256)) internal mAllowed;\\n\\n    constructor(ORBCore _core, uint8 _index) public {\\n        origin = Origin(_core, _index);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return origin.core.supplyOf(origin.index);\\n    }\\n\\n    function balanceOf(address who) public view returns (uint256) {\\n        return origin.core.balanceOf(who, origin.index);\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    function transfer(address _to, uint256 _amount)\\n        public\\n        returns (bool success)\\n    {\\n        _transfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _amount)\\n        public\\n        returns (bool success)\\n    {\\n        if (msg.sender != _from && !_superOperators[msg.sender]) {\\n            uint256 allowance = mAllowed[_from][msg.sender];\\n            if (allowance != (2**256) - 1) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(allowance >= _amount, \\\"Not enough funds allowed\\\");\\n                mAllowed[_from][msg.sender] = allowance.sub(_amount);\\n            }\\n        }\\n        _transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _amount)\\n        public\\n        returns (bool success)\\n    {\\n        _approveFor(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function approveFor(address from, address _spender, uint256 _amount)\\n        public\\n        returns (bool success)\\n    {\\n        require(\\n            msg.sender == from || _superOperators[msg.sender],\\n            \\\"msg.sender != from || superOperator\\\"\\n        );\\n        _approveFor(from, _spender, _amount);\\n        return true;\\n    }\\n\\n    function _approveFor(address _owner, address _spender, uint256 _amount)\\n        internal\\n    {\\n        require(\\n            _owner != address(0) && _spender != address(0),\\n            \\\"Cannot approve with 0x0\\\"\\n        );\\n        mAllowed[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        returns (uint256 remaining)\\n    {\\n        return mAllowed[_owner][_spender];\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _amount) internal {\\n        origin.core.transferFrom(_from, _to, origin.index, _amount);\\n    }\\n\\n    function emitTransferEvent(address _from, address _to, uint256 _amount)\\n        external\\n    {\\n        require(msg.sender == address(origin.core), \\\"only core\\\");\\n        emit Transfer(_from, _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x45948fc22ab622c8f55fa6c423bc31a403974a42393ebd50e7dd28c913384d4b\"},\"src/Orbs/ORBCore.sol\":{\"content\":\"pragma solidity 0.5.9;\\n\\nimport \\\"./ERC20ORB.sol\\\";\\nimport \\\"../../contracts_common/src/Libraries/SafeMath.sol\\\";\\nimport \\\"../../contracts_common/src/Libraries/AddressUtils.sol\\\";\\nimport \\\"../../contracts_common/src/Libraries/ObjectLib64.sol\\\";\\nimport \\\"../../contracts_common/src/Libraries/BytesUtil.sol\\\";\\n\\nimport \\\"../../contracts_common/src/Interfaces/ERC1155.sol\\\";\\nimport \\\"../../contracts_common/src/Interfaces/ERC1155TokenReceiver.sol\\\";\\n\\nimport \\\"../../contracts_common/src/BaseWithStorage/SuperOperators.sol\\\";\\n\\ncontract ORBCore is SuperOperators, ERC1155 {\\n    using AddressUtils for address;\\n    using ObjectLib64 for ObjectLib64.Operations;\\n    using ObjectLib64 for uint256;\\n    using SafeMath for uint256;\\n    mapping(address => uint256) packedTokenBalance;\\n    mapping(address => mapping(address => bool)) operatorsForAll;\\n\\n    mapping(address => bool) metaTransactionContracts; // native meta-transaction support\\n    \\n    uint256[3] totalSupplies;\\n    ERC20ORB[3] erc20s;\\n    event ORB(ERC20ORB orb);\\n    constructor(address _to, uint256 supply0, uint256 supply1, uint256 supply2)\\n        public\\n    {\\n        deployORB(0, supply0, _to);\\n        deployORB(1, supply1, _to);\\n        deployORB(2, supply2, _to);\\n    }\\n\\n    function deployORB(uint8 index, uint256 supply, address _to) internal {\\n        ERC20ORB orb = new ERC20ORB(this, index);\\n\\n        packedTokenBalance[_to] = packedTokenBalance[_to].updateTokenBalance(\\n            index,\\n            supply,\\n            ObjectLib64.Operations.REPLACE\\n        );\\n        totalSupplies[index] = supply;\\n\\n        orb.emitTransferEvent(address(0), _to, supply);\\n\\n        erc20s[index] = orb;\\n        emit ORB(orb);\\n    }\\n\\n    function supplyOf(uint256 _id) external view returns (uint256) {\\n        if (_id > 2) {\\n            return 0;\\n        }\\n        return totalSupplies[_id];\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value\\n    ) external {\\n        require(msg.sender == address(erc20s[_id]), \\\"only sub erc20\\\");\\n        _transferFrom(_from, _to, _id, _value);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeTransfer(\\n                metaTransactionContracts[msg.sender] ? _from : msg.sender,\\n                _from,\\n                _to,\\n                _id,\\n                _value,\\n                \\\"\\\",\\n                true\\n            ),\\n            \\\"failCheck\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value\\n    ) internal {\\n        require(_to != address(0), \\\"Invalid to address\\\");\\n        ERC20ORB erc20 = erc20s[_id];\\n        if (\\n            _from != msg.sender &&\\n            !metaTransactionContracts[msg.sender] &&\\n            msg.sender != address(erc20)\\n        ) {\\n            require(\\n                _superOperators[msg.sender] ||\\n                    operatorsForAll[_from][msg.sender],\\n                \\\"Operator not approved\\\"\\n            );\\n        }\\n\\n        packedTokenBalance[_from] = packedTokenBalance[_from]\\n            .updateTokenBalance(_id, _value, ObjectLib64.Operations.SUB);\\n        packedTokenBalance[_to] = packedTokenBalance[_to].updateTokenBalance(\\n            _id,\\n            _value,\\n            ObjectLib64.Operations.ADD\\n        );\\n        emit TransferSingle(\\n            metaTransactionContracts[msg.sender] ? _from : msg.sender,\\n            _from,\\n            _to,\\n            _id,\\n            _value\\n        );\\n        erc20.emitTransferEvent(_from, _to, _value);\\n    }\\n\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external {\\n        _transferFrom(_from, _to, _id, _value);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeTransfer(\\n                metaTransactionContracts[msg.sender] ? _from : msg.sender,\\n                _from,\\n                _to,\\n                _id,\\n                _value,\\n                _data,\\n                false\\n            ),\\n            \\\"failCheck\\\"\\n        );\\n    }\\n\\n    // NOTE: call data should be optimized to order _ids so packedBalance can be used efficiently\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external {\\n        _batchTransferFrom(_from, _to, _ids, _values);\\n        require( // solium-disable-line error-reason\\n            _checkERC1155AndCallSafeBatchTransfer(\\n                metaTransactionContracts[msg.sender] ? _from : msg.sender,\\n                _from,\\n                _to,\\n                _ids,\\n                _values,\\n                _data\\n            )\\n        );\\n    }\\n\\n    function _batchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _values\\n    ) internal {\\n        require(\\n            _ids.length == _values.length,\\n            \\\"Inconsistent array length between args\\\"\\n        );\\n        require(_to != address(0), \\\"Invalid recipient\\\");\\n        require(\\n            _from == msg.sender ||\\n                _superOperators[msg.sender] ||\\n                operatorsForAll[_from][msg.sender] ||\\n                metaTransactionContracts[msg.sender],\\n            \\\"not authorized\\\"\\n        );\\n\\n        uint256 balFrom = packedTokenBalance[_from];\\n        uint256 balTo = packedTokenBalance[_to];\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            ERC20ORB erc20 = erc20s[_ids[i]];\\n            balFrom = ObjectLib64.updateTokenBalance(\\n                balFrom,\\n                _ids[i],\\n                _values[i],\\n                ObjectLib64.Operations.SUB\\n            );\\n            balTo = ObjectLib64.updateTokenBalance(\\n                balTo,\\n                _ids[i],\\n                _values[i],\\n                ObjectLib64.Operations.ADD\\n            );\\n            erc20.emitTransferEvent(_from, _to, _values[i]);\\n        }\\n        packedTokenBalance[_from] = balFrom;\\n        packedTokenBalance[_to] = balTo;\\n        emit TransferBatch(\\n            metaTransactionContracts[msg.sender] ? _from : msg.sender,\\n            _from,\\n            _to,\\n            _ids,\\n            _values\\n        );\\n    }\\n\\n    function balanceOf(address _owner, uint256 _tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_tokenId > 2) {\\n            return 0;\\n        }\\n        return packedTokenBalance[_owner].getValueInBin(_tokenId);\\n    }\\n\\n    function balanceOfBatch(\\n        address[] calldata _owners,\\n        uint256[] calldata _tokenIds\\n    ) external view returns (uint256[] memory) {\\n        require(\\n            _owners.length == _tokenIds.length,\\n            \\\"Inconsistent array length between args\\\"\\n        );\\n        uint256[] memory balances = new uint256[](_tokenIds.length);\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            balances[i] = balanceOf(_owners[i], _tokenIds[i]);\\n        }\\n        return balances;\\n    }\\n\\n    function setApprovalForAllFor(\\n        address _sender,\\n        address _operator,\\n        bool _approved\\n    ) external {\\n        require(\\n            msg.sender == _sender ||\\n                metaTransactionContracts[msg.sender] ||\\n                _superOperators[msg.sender],\\n            \\\"require meta approval\\\"\\n        );\\n        _setApprovalForAll(_sender, _operator, _approved);\\n    }\\n    function setApprovalForAll(address _operator, bool _approved) external {\\n        _setApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n    function _setApprovalForAll(\\n        address _sender,\\n        address _operator,\\n        bool _approved\\n    ) internal {\\n        require(\\n            !_superOperators[_operator],\\n            \\\"super operator can't have their approvalForAll changed\\\"\\n        );\\n        operatorsForAll[_sender][_operator] = _approved;\\n        emit ApprovalForAll(_sender, _operator, _approved);\\n    }\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator)\\n    {\\n        return operatorsForAll[_owner][_operator] || _superOperators[_operator];\\n    }\\n\\n    function supportsInterface(bytes4 id) external view returns (bool) {\\n        //ERC165            // ERC1155\\n        return id == 0x01ffc9a7 || id == 0xd9b67a26;\\n    }\\n\\n    bytes4 private constant ERC1155_IS_RECEIVER = 0x4e2312e0;\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n    bytes4 constant ERC165ID = 0x01ffc9a7;\\n\\n    function checkIsERC1155Receiver(address _contract)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes4 erc1155ReceiverID = ERC1155_IS_RECEIVER;\\n        bytes4 erc165ID = ERC165ID;\\n        bool success;\\n        uint256 result;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let x := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID) // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), erc1155ReceiverID) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                10000, // 10k gas\\n                _contract, // To addr\\n                x, // Inputs are stored at location x\\n                0x24, // Inputs are 36 bytes long\\n                x, // Store output over input (saves space)\\n                0x20\\n            ) // Outputs are 32 bytes long\\n\\n            result := mload(x) // Load the result\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result == 1;\\n    }\\n\\n    function _checkERC1155AndCallSafeTransfer(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes memory _data,\\n        bool _unsafe\\n    ) internal returns (bool) {\\n        if (!_to.isContract()) {\\n            return true;\\n        }\\n        if (_unsafe && !checkIsERC1155Receiver(_to)) {\\n            return true;\\n        }\\n        return\\n            ERC1155TokenReceiver(_to).onERC1155Received(\\n                    _operator,\\n                    _from,\\n                    _id,\\n                    _value,\\n                    _data\\n                ) ==\\n                ERC1155_RECEIVED;\\n    }\\n\\n    function _checkERC1155AndCallSafeBatchTransfer(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _values,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (!_to.isContract()) {\\n            return true;\\n        }\\n        bytes4 retval = ERC1155TokenReceiver(_to).onERC1155BatchReceived(\\n            _operator,\\n            _from,\\n            _ids,\\n            _values,\\n            _data\\n        );\\n        return (retval == ERC1155_BATCH_RECEIVED);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf6ec0f84eae161947a0b9bc9eec29c9cab6a63f8e3954b82187138ec2cc9b01e\"}},\"version\":1}",
    "userdoc": {
      "methods": {
        "changeAdmin(address)": {
          "notice": "change the administrator to be `newAdmin`."
        },
        "getAdmin()": {
          "notice": "gives the current administrator of this contract."
        },
        "isSuperOperator(address)": {
          "notice": "check whether address `who` is given superOperator rights."
        },
        "setSuperOperator(address,bool)": {
          "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
        }
      }
    }
  },
  "args": [
    "0x19e558019bCcc783db9769698eA93bAAb3082B66",
    2
  ],
  "address": "0x4278E1aAc5F50Af150cAEeDbA778e4fac78EF751",
  "transactionHash": "0x59fa0d0ecd9c300f8b096f00da0aa7a6c51320b3141792c1d969408204993d1d"
}